'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mergeClassNames = require('merge-class-names');

var _mergeClassNames2 = _interopRequireDefault(_mergeClassNames);

var _dates = require('./lib/dates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var className = 'react-calendar__month-view__days__day';

var Day = function Day(_ref) {
  var classes = _ref.classes,
      currentMonthIndex = _ref.currentMonthIndex,
      date = _ref.date,
      maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      onClick = _ref.onClick,
      style = _ref.style,
      tileClassName = _ref.tileClassName,
      tileContent = _ref.tileContent;

  var isDisabled = minDate && (0, _dates.getBeginOfDay)(minDate) > date || maxDate && (0, _dates.getEndOfDay)(maxDate) < date;
  return _react2.default.createElement(
    'div',
    {
      className: _mergeClassNames2.default.apply(undefined, [className].concat(_toConsumableArray(classes), [isDisabled && "day-disabled", (0, _dates.isWeekend)(date) && className + '--weekend', date.getMonth() !== currentMonthIndex && className + '--neighboringMonth', tileClassName instanceof Function ? tileClassName({ date: date, view: 'month' }) : tileClassName])),
      key: date,
      onClick: !isDisabled && onClick && function () {
        return onClick(date);
      },
      style: style
    },
    _react2.default.createElement(
      'time',
      { dateTime: (0, _dates.getISOLocalDate)(date) + 'T00:00:00.000' },
      (0, _dates.getDay)(date)
    ),
    typeof tileContent === 'function' ? tileContent({ date: date, view: 'month' }) : tileContent
  );
};

Day.displayName = "Day";

exports.default = Day;