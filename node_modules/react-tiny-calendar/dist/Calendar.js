'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mergeClassNames = require('merge-class-names');

var _mergeClassNames2 = _interopRequireDefault(_mergeClassNames);

var _reactTinyVirtualList = require('react-tiny-virtual-list');

var _reactTinyVirtualList2 = _interopRequireDefault(_reactTinyVirtualList);

var _get_days_in_month = require('date-fns/get_days_in_month');

var _get_days_in_month2 = _interopRequireDefault(_get_days_in_month);

var _MonthView = require('./MonthView');

var _MonthView2 = _interopRequireDefault(_MonthView);

var _dates = require('./lib/dates');

var _utils = require('./lib/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Calendar = function (_Component) {
  _inherits(Calendar, _Component);

  function Calendar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Calendar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.getValueFrom = function (value) {
      if (!value) {
        return null;
      }

      var _this$props = _this.props,
          maxDate = _this$props.maxDate,
          minDate = _this$props.minDate;

      var rawValueFrom = value instanceof Array && value.length === 2 ? value[0] : value;
      var valueFromDate = new Date(rawValueFrom);

      if (Number.isNaN(valueFromDate.getTime())) {
        throw new Error('Invalid date: ' + value);
      }

      var valueFrom = (0, _dates.getBegin)('day', valueFromDate);

      return (0, _utils.between)(valueFrom, minDate, maxDate);
    }, _this.state = {
      value: _this.props.value,
      activeStartDate: _this.getActiveStartDate()
    }, _this.onChange = function (value) {
      var _this$props2 = _this.props,
          selectRange = _this$props2.selectRange,
          selectionState = _this$props2.selectionState;


      var nextValue = void 0;
      if (selectRange) {
        var previousValue = _this.state.value;
        // Range selection turned on

        if (selectionState === 'start') {
          nextValue = [value, value];
          (0, _utils.callIfDefined)(_this.props.onChange, nextValue);
        } else if (selectionState === 'end') {
          nextValue = [previousValue[0], value];
          (0, _utils.callIfDefined)(_this.props.onChange, nextValue);
        }
      } else {
        // Range selection turned off
        nextValue = _this.getValueFrom(value);
        (0, _utils.callIfDefined)(_this.props.onChange, nextValue);
      }

      _this.setState({ value: nextValue });
    }, _this.renderMonthView = function (_ref2) {
      var index = _ref2.index,
          style = _ref2.style;
      var _this$props3 = _this.props,
          calendarType = _this$props3.calendarType,
          maxDate = _this$props3.maxDate,
          minDate = _this$props3.minDate,
          renderChildren = _this$props3.renderChildren,
          tileClassName = _this$props3.tileClassName,
          tileContent = _this$props3.tileContent,
          selectRange = _this$props3.selectRange,
          selectionState = _this$props3.selectionState;
      var _this$state = _this.state,
          activeStartDate = _this$state.activeStartDate,
          value = _this$state.value;
      var _this2 = _this,
          onMouseOver = _this2.onMouseOver;


      var clickAction = _this.onChange;

      return _react2.default.createElement(_MonthView2.default, {
        onClick: (0, _utils.mergeFunctions)(clickAction, _this.props.onClickDay),
        activeStartDate: (0, _dates.getDifferentMonth)(activeStartDate, index),
        maxDate: maxDate,
        minDate: minDate,
        tileClassName: tileClassName,
        tileContent: tileContent || renderChildren,
        value: value,
        valueType: 'day',
        style: style,
        selectRange: selectRange,
        selectionState: selectionState,
        daySize: _this.dayDimension
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Calendar, [{
    key: 'getActiveStartDate',
    value: function getActiveStartDate() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var rangeType = 'month';
      var valueFrom = props.activeStartDate || this.getValueFrom(props.value) || new Date();
      return (0, _dates.getBegin)(rangeType, valueFrom);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var height = window.innerHeight - (26 + 39);

      var _props = this.props,
          className = _props.className,
          selectRange = _props.selectRange,
          numberOfMonths = _props.numberOfMonths;
      var _state = this.state,
          value = _state.value,
          activeStartDate = _state.activeStartDate;
      var onMouseOut = this.onMouseOut;

      var valueArray = [].concat(value);

      var scrollToIndex = void 0;
      if (value) {
        var displayFrom = activeStartDate;
        var displayTo = this.getValueFrom(value);
        scrollToIndex = displayTo.getMonth() - displayFrom.getMonth() + 12 * (displayTo.getFullYear() - displayFrom.getFullYear());
      } else {
        scrollToIndex = 0;
      }

      this.dayDimension = window.innerWidth * 0.1428;

      return _react2.default.createElement(
        'div',
        {
          className: (0, _mergeClassNames2.default)('react-calendar', selectRange && valueArray.length === 1 && 'react-calendar--selectRange', className),
          onMouseOut: selectRange ? onMouseOut : null,
          onBlur: selectRange ? onMouseOut : null
        },
        _react2.default.createElement(
          'div',
          { className: 'react-calendar__weeks' },
          _react2.default.createElement(
            'span',
            null,
            'Mo'
          ),
          _react2.default.createElement(
            'span',
            null,
            'Tu'
          ),
          _react2.default.createElement(
            'span',
            null,
            'We'
          ),
          _react2.default.createElement(
            'span',
            null,
            'Th'
          ),
          _react2.default.createElement(
            'span',
            null,
            'Fr'
          ),
          _react2.default.createElement(
            'span',
            null,
            'Sa'
          ),
          _react2.default.createElement(
            'span',
            null,
            'Su'
          )
        ),
        _react2.default.createElement(_reactTinyVirtualList2.default, {
          value: value,
          width: 'auto',
          height: height,
          itemCount: numberOfMonths,
          itemSize: function itemSize(index) {
            var start = (0, _dates.getDifferentMonth)(activeStartDate, index);
            var daysInMonth = (0, _get_days_in_month2.default)(start);
            var offset = (0, _dates.getDayOfWeek)(start);

            var asliHeight = Math.ceil((daysInMonth + offset) / 7) * _this3.dayDimension + 79;
            // this.dayDimension = window.innerWidth/7 - Make the date a square first so that it becomes a proper circle.
            //Magic number 79: Height of month label
            return asliHeight;
          },
          overscanCount: 3,
          renderItem: this.renderMonthView,
          scrollToAlignment: 'auto',
          scrollToIndex: scrollToIndex
        })
      );
    }
  }]);

  return Calendar;
}(_react.Component);

exports.default = Calendar;


Calendar.defaultProps = {
  maxDetail: 'month',
  numberOfMonths: 13
};