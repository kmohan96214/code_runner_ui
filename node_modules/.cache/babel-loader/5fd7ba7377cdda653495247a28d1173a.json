{"ast":null,"code":"import _jsx from \"@babel/runtime/helpers/jsx\";\n\n/* eslint no-undef: \"error\" */\n\n/* eslint-env browser */\nimport React, { useContext } from 'react';\nimport { AppContext } from '../../context';\nimport PageHeader from '../../Components/PageHeaders';\nimport OutputIcon from '../../icons/output.png';\n\nvar OutputView = function OutputView() {\n  var _useContext = useContext(AppContext),\n      interpretedData = _useContext.interpretedData,\n      updateCameraFlag = _useContext.updateCameraFlag,\n      updatePreviewFlag = _useContext.updatePreviewFlag,\n      updateCodeFlag = _useContext.updateCodeFlag,\n      updateRunFlag = _useContext.updateRunFlag,\n      showOutput = _useContext.showOutput,\n      updateOutputFlag = _useContext.updateOutputFlag,\n      setInterpretedData = _useContext.setInterpretedData,\n      setSelectedEnv = _useContext.setSelectedEnv;\n\n  var restartCodeRunner = function restartCodeRunner() {\n    updateCodeFlag(false);\n    updateCameraFlag(false);\n    updatePreviewFlag(false);\n    updateRunFlag(false);\n    updateOutputFlag(false);\n    setInterpretedData('');\n    setSelectedEnv('C');\n  };\n\n  return showOutput ? /*#__PURE__*/_jsx(\"div\", {}, void 0, /*#__PURE__*/_jsx(PageHeader, {\n    imageSrc: OutputIcon,\n    title: \"Output Console\",\n    subtitle: \"Here's your output\"\n  }), /*#__PURE__*/_jsx(\"div\", {\n    className: \"output-console\"\n  }, void 0, interpretedData.map(function (el) {\n    return /*#__PURE__*/_jsx(\"div\", {}, void 0, el);\n  })), /*#__PURE__*/_jsx(\"div\", {}, void 0, /*#__PURE__*/_jsx(\"button\", {\n    type: \"button\",\n    className: \"Button--secondary\",\n    onClick: restartCodeRunner\n  }, void 0, \"Start over\"))) : null;\n};\n\nvar _default = OutputView;\nexport default _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutputView, \"OutputView\", \"/home/krishnamohan/projects/major/Coderunner/src/Containers/OutputView/index.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/krishnamohan/projects/major/Coderunner/src/Containers/OutputView/index.jsx\");\n}();\n\n;","map":{"version":3,"sources":["/home/krishnamohan/projects/major/Coderunner/src/Containers/OutputView/index.jsx"],"names":["React","useContext","AppContext","PageHeader","OutputIcon","OutputView","interpretedData","updateCameraFlag","updatePreviewFlag","updateCodeFlag","updateRunFlag","showOutput","updateOutputFlag","setInterpretedData","setSelectedEnv","restartCodeRunner","map","el"],"mappings":";;AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,oBAWnBJ,UAAU,CAACC,UAAD,CAXS;AAAA,MAErBI,eAFqB,eAErBA,eAFqB;AAAA,MAGrBC,gBAHqB,eAGrBA,gBAHqB;AAAA,MAIrBC,iBAJqB,eAIrBA,iBAJqB;AAAA,MAKrBC,cALqB,eAKrBA,cALqB;AAAA,MAMrBC,aANqB,eAMrBA,aANqB;AAAA,MAOrBC,UAPqB,eAOrBA,UAPqB;AAAA,MAQrBC,gBARqB,eAQrBA,gBARqB;AAAA,MASrBC,kBATqB,eASrBA,kBATqB;AAAA,MAUrBC,cAVqB,eAUrBA,cAVqB;;AAavB,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BN,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAC,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAE,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAC,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAC,IAAAA,cAAc,CAAC,GAAD,CAAd;AACD,GARD;;AAUA,SACiBH,UADjB,gBAEI,qCACE,KAAC,UAAD;AACE,IAAA,QAAQ,EAAEP,UADZ;AAEE,IAAA,KAAK,EAAC,gBAFR;AAGE,IAAA,QAAQ,EAAC;AAHX,IADF,eAME;AAAK,IAAA,SAAS,EAAC;AAAf,aACGE,eAAe,CAACU,GAAhB,CAAoB,UAAAC,EAAE;AAAA,wBACrB,wBAAMA,EAAN,CADqB;AAAA,GAAtB,CADH,CANF,eAYE,qCACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,OAAO,EAAEF;AAHX,0BADF,CAZF,CAFJ;AA0BD,CAjDD;;eAmDeV,U;AAAf;;;;;;;;gCAnDMA,U","sourcesContent":["/* eslint no-undef: \"error\" */\n/* eslint-env browser */\nimport React, { useContext } from 'react'\nimport { AppContext } from '../../context'\nimport PageHeader from '../../Components/PageHeaders'\nimport OutputIcon from '../../icons/output.png'\n\nconst OutputView = () => {\n  const {\n    interpretedData,\n    updateCameraFlag,\n    updatePreviewFlag,\n    updateCodeFlag,\n    updateRunFlag,\n    showOutput,\n    updateOutputFlag,\n    setInterpretedData,\n    setSelectedEnv\n  } = useContext(AppContext)\n\n  const restartCodeRunner = () => {\n    updateCodeFlag(false)\n    updateCameraFlag(false)\n    updatePreviewFlag(false)\n    updateRunFlag(false)\n    updateOutputFlag(false)\n    setInterpretedData('')\n    setSelectedEnv('C')\n  }\n\n  return (\n    <If condition={showOutput}>\n      <div>\n        <PageHeader\n          imageSrc={OutputIcon}\n          title=\"Output Console\"\n          subtitle=\"Here's your output\"\n        />\n        <div className=\"output-console\">\n          {interpretedData.map(el => (\n            <div>{el}</div>\n          ))}\n        </div>\n\n        <div>\n          <button\n            type=\"button\"\n            className=\"Button--secondary\"\n            onClick={restartCodeRunner}\n          >\n            Start over\n          </button>\n        </div>\n      </div>\n    </If>\n  )\n}\n\nexport default OutputView\n"]},"metadata":{},"sourceType":"module"}