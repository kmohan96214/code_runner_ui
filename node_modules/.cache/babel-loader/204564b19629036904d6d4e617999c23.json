{"ast":null,"code":"import _jsx from \"@babel/runtime/helpers/jsx\";\n\n/* eslint no-undef: \"error\" */\n\n/* eslint-env browser */\nimport React, { useContext, useState, useEffect } from 'react'; // import Select from 'react-select'\n\nimport { AppContext } from '../../context';\nimport PageHeader from '../../Components/PageHeaders';\nimport CompileIcon from '../../icons/compile.png';\n\nvar CodeView = function CodeView() {\n  var _useContext = useContext(AppContext),\n      interpretedData = _useContext.interpretedData,\n      setInterpretedData = _useContext.setInterpretedData,\n      compileCodeAPI = _useContext.compileCodeAPI,\n      updateCameraFlag = _useContext.updateCameraFlag,\n      updatePreviewFlag = _useContext.updatePreviewFlag,\n      showCode = _useContext.showCode,\n      selectedEnv = _useContext.selectedEnv,\n      setSelectedEnv = _useContext.setSelectedEnv,\n      apiError = _useContext.apiError,\n      apiErrorMessage = _useContext.apiErrorMessage;\n\n  var _useState = useState(interpretedData),\n      textAreaData = _useState[0],\n      setTextAreaData = _useState[1];\n\n  var _useState2 = useState(false),\n      errorConsole = _useState2[0],\n      showErrorConsole = _useState2[1];\n\n  useEffect(function () {\n    setTextAreaData(interpretedData);\n  }, [interpretedData]);\n  useEffect(function () {\n    if (apiError) {\n      showErrorConsole(true);\n    }\n  }, [apiError]);\n\n  var compileCode = function compileCode() {\n    setInterpretedData(textAreaData);\n    updateCameraFlag(false);\n    updatePreviewFlag(false);\n    var payload = {\n      code: textAreaData,\n      language: selectedEnv,\n      name: 'string'\n    };\n    compileCodeAPI(payload);\n  };\n\n  var editCode = function editCode(e) {\n    showErrorConsole(false);\n    setTextAreaData(e.currentTarget.value);\n  };\n\n  var options = [{\n    value: 'C',\n    label: 'C'\n  }, {\n    value: 'JS',\n    label: 'Javascript'\n  }];\n\n  var handleInputChange = function handleInputChange(e) {\n    showErrorConsole(false);\n    setSelectedEnv(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, showCode ? /*#__PURE__*/_jsx(\"div\", {}, void 0, /*#__PURE__*/_jsx(PageHeader, {\n    imageSrc: CompileIcon,\n    title: \"Code Editor\",\n    subtitle: \"The image output has generated the following code. If you would like to edit the code, please make your changes. Once you're happy with the code, click on compile to continue\"\n  }), /*#__PURE__*/_jsx(\"div\", {\n    className: \"mt-20 mb-20 flex flex-center flex-middle\"\n  }, void 0, /*#__PURE__*/_jsx(\"label\", {\n    className: \"fs-15 ml-10 mr-10 fw-500 c-black-60\",\n    htmlFor: \"language\"\n  }, void 0, \"Choose language\"), /*#__PURE__*/_jsx(\"select\", {\n    id: \"language\",\n    className: \"w-50p bg-white h-32 pl-8 fs-14 c-black-60\",\n    onChange: function onChange(e) {\n      return handleInputChange(e);\n    },\n    value: selectedEnv\n  }, void 0, options.map(function (el) {\n    return /*#__PURE__*/_jsx(\"option\", {\n      value: el.value\n    }, void 0, el.label);\n  }))), /*#__PURE__*/_jsx(\"textarea\", {\n    cols: \"30\",\n    value: textAreaData,\n    className: \"code-input\",\n    onInput: function onInput(e) {\n      return editCode(e);\n    }\n  }), /*#__PURE__*/_jsx(\"button\", {\n    type: \"button\",\n    className: \"Button--secondary\",\n    onClick: compileCode\n  }, void 0, selectedEnv === 'JS' ? 'Run' : 'Compile')) : null, errorConsole && apiErrorMessage && showCode ? [/*#__PURE__*/_jsx(\"div\", {\n    className: \"fs-16 c-black-60 fw-600 ml-10 mt-30\"\n  }, \"0\", \"Error console\"), /*#__PURE__*/_jsx(\"div\", {\n    className: \"mt-10 code-input fs-16 bg-black c-white fw-500 lh-title\"\n  }, \"1\", apiErrorMessage.map(function (el, index) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: index === 0 ? 'c-red' : ''\n    }, void 0, el);\n  }))] : null);\n};\n\nvar _default = CodeView;\nexport default _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(CodeView, \"CodeView\", \"/home/krishnamohan/projects/major/Coderunner/src/Containers/CodeView/index.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/krishnamohan/projects/major/Coderunner/src/Containers/CodeView/index.jsx\");\n}();\n\n;","map":{"version":3,"sources":["/home/krishnamohan/projects/major/Coderunner/src/Containers/CodeView/index.jsx"],"names":["React","useContext","useState","useEffect","AppContext","PageHeader","CompileIcon","CodeView","interpretedData","setInterpretedData","compileCodeAPI","updateCameraFlag","updatePreviewFlag","showCode","selectedEnv","setSelectedEnv","apiError","apiErrorMessage","textAreaData","setTextAreaData","errorConsole","showErrorConsole","compileCode","payload","code","language","name","editCode","e","currentTarget","value","options","label","handleInputChange","target","map","el","index"],"mappings":"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","sourcesContent":["/* eslint no-undef: \"error\" */\n/* eslint-env browser */\nimport React, { useContext, useState, useEffect } from 'react'\n// import Select from 'react-select'\nimport { AppContext } from '../../context'\nimport PageHeader from '../../Components/PageHeaders'\nimport CompileIcon from '../../icons/compile.png'\n\nconst CodeView = () => {\n  const {\n    interpretedData,\n    setInterpretedData,\n    compileCodeAPI,\n    updateCameraFlag,\n    updatePreviewFlag,\n    showCode,\n    // updateCodeFlag,\n    // updateRunFlag,\n    selectedEnv,\n    setSelectedEnv,\n    apiError,\n    apiErrorMessage\n  } = useContext(AppContext)\n\n  const [textAreaData, setTextAreaData] = useState(interpretedData)\n  const [errorConsole, showErrorConsole] = useState(false)\n\n  useEffect(() => {\n    setTextAreaData(interpretedData)\n  }, [interpretedData])\n\n  useEffect(() => {\n    if (apiError) {\n      showErrorConsole(true)\n    }\n  }, [apiError])\n\n  const compileCode = () => {\n    setInterpretedData(textAreaData)\n    updateCameraFlag(false)\n    updatePreviewFlag(false)\n    const payload = {\n      code: textAreaData,\n      language: selectedEnv,\n      name: 'string'\n    }\n    compileCodeAPI(payload)\n  }\n\n  const editCode = e => {\n    showErrorConsole(false)\n    setTextAreaData(e.currentTarget.value)\n  }\n\n  const options = [\n    { value: 'C', label: 'C' },\n    { value: 'JS', label: 'Javascript' }\n  ]\n\n  const handleInputChange = e => {\n    showErrorConsole(false)\n    setSelectedEnv(e.target.value)\n  }\n\n  return (\n    <>\n      <If condition={showCode}>\n        <div>\n          <PageHeader\n            imageSrc={CompileIcon}\n            title=\"Code Editor\"\n            subtitle=\"The image output has generated the following code.\n            If you would like to edit the code, please make your changes.\n            Once you're happy with the code, click on compile to continue\"\n          />\n\n          <div className=\"mt-20 mb-20 flex flex-center flex-middle\">\n            <label className=\"fs-15 ml-10 mr-10 fw-500 c-black-60\" htmlFor=\"language\">Choose language</label>\n            <select\n              id=\"language\"\n              className=\"w-50p bg-white h-32 pl-8 fs-14 c-black-60\"\n              onChange={e => handleInputChange(e)}\n              value={selectedEnv}\n            >\n              {\n                options.map(el => (\n                  <option value={el.value}>\n                    {el.label}\n                  </option>\n                ))\n              }\n            </select>\n          </div>\n\n          <textarea\n            cols=\"30\"\n            value={textAreaData}\n            className=\"code-input\"\n            onInput={e => editCode(e)}\n          />\n          <button\n            type=\"button\"\n            className=\"Button--secondary\"\n            onClick={compileCode}\n          >\n            {selectedEnv === 'JS' ? 'Run' : 'Compile' }\n          </button>\n        </div>\n      </If>\n\n      <If condition={errorConsole && apiErrorMessage && showCode}>\n        <div className=\"fs-16 c-black-60 fw-600 ml-10 mt-30\">\n          Error console\n        </div>\n        <div className=\"mt-10 code-input fs-16 bg-black c-white fw-500 lh-title\">\n          {apiErrorMessage.map((el, index) => (\n            <div className={index === 0 ? 'c-red' : ''}>{el}</div>\n          ))}\n        </div>\n      </If>\n    </>\n  )\n}\n\nexport default CodeView\n"]},"metadata":{},"sourceType":"module"}