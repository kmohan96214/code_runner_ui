// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array properties 1`] = `
"
// sitrep
function fn() {
  const [a, b = 'foo', c, d] = x.split(\\"_\\");
  return a + b + c + d;
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
function fn() {
  console.groupCollapsed(\\"fn\\");

  const [a, b = 'foo', c, d] = x.split(\\"_\\");
  console.log(\\"a\\", a);
  console.log(\\"b\\", b);
  console.log(\\"c\\", c);
  console.log(\\"d\\", d);

  var _returnValue = a + b + c + d;

  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"fn\\");
  return _returnValue;
}
"
`;

exports[`array properties with let 1`] = `
"
// sitrep
function fn() {
  let a, b, c, d;
  [a, b = 'foo', c, d] = x.split(\\"_\\");
  return a + b + c + d;
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
function fn() {
  console.groupCollapsed(\\"fn\\");

  let a, b, c, d;
  [a, b = 'foo', c, d] = x.split(\\"_\\");
  console.log(\\"a\\", a);
  console.log(\\"b\\", b);
  console.log(\\"c\\", c);
  console.log(\\"d\\", d);

  var _returnValue = a + b + c + d;

  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"fn\\");
  return _returnValue;
}
"
`;

exports[`arrow fn expression callback 1`] = `
"
myFn(
  // sitrep
  (x) => x
)

      â†“ â†“ â†“ â†“ â†“ â†“

myFn(
// sitrep
function (x) {
  console.groupCollapsed(\\"function: (x) => x\\");
  var _returnValue = x;
  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"function: (x) => x\\");
  return _returnValue;
});
"
`;

exports[`arrow function assignment 1`] = `
"
// sitrep
var cb = x => {
  x = x + 2
  x.charAt(0)
  return x
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
var cb = function (x) {
  console.groupCollapsed(\\"cb\\");

  x = x + 2;
  console.log(\\"x: \\", x);
  x.charAt(0);
  var _returnValue = x;
  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"cb\\");
  return _returnValue;
};
"
`;

exports[`arrow function expression (shorthand arrow fn) 1`] = `
"
// sitrep
var cb = x => x.charAt(0)

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
var cb = function (x) {
  console.groupCollapsed(\\"cb\\");

  var _returnValue = x.charAt(0);

  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"cb\\");
  return _returnValue;
};
"
`;

exports[`class methods 1`] = `
"
class Boom {
  // sitrep
  fire() {
    let a = 2

    return a + 5
  }
}

      â†“ â†“ â†“ â†“ â†“ â†“

class Boom {
  // sitrep
  fire() {
    console.groupCollapsed(\\"fire\\");

    let a = 2;

    console.log(\\"a: \\", a);

    var _returnValue = a + 5;

    console.log(\\"Return Value:\\", _returnValue);
    console.groupEnd(\\"fire\\");
    return _returnValue;
  }
}
"
`;

exports[`class property 1`] = `
"
class Foo {
  // sitrep
  handleClick = (e) =>{
    const foo = e.target.innerText;
    // some actions based on foo
    e.preventDefault()
  }
}

      â†“ â†“ â†“ â†“ â†“ â†“

class Foo {
  constructor() {
    this.handleClick = e => {
      console.groupCollapsed(\\"handleClick\\");

      const foo = e.target.innerText;
      // some actions based on foo
      console.log(\\"foo: \\", foo);
      e.preventDefault();
      console.groupEnd(\\"handleClick\\");
    };
  }
  // sitrep


}
"
`;

exports[`collapsed option 1`] = `
"
// sitrep
function fn(a) {
  a = a.map(x => x)
  return a
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
function fn(a) {
  console.group(\\"fn\\");

  a = a.map(x => x);
  console.log(\\"a: \\", a);
  var _returnValue = a;
  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"fn\\");
  return _returnValue;
}
"
`;

exports[`custom label 1`] = `
"
// ðŸ”¬
function fn(a) {
  a = a.map(x => x)
  return a
}

      â†“ â†“ â†“ â†“ â†“ â†“

// ðŸ”¬
function fn(a) {
  console.groupCollapsed(\\"fn\\");

  a = a.map(x => x);
  console.log(\\"a: \\", a);
  var _returnValue = a;
  console.log(\\"Return Value:\\", _returnValue);
  console.groupEnd(\\"fn\\");
  return _returnValue;
}
"
`;

exports[`function 1`] = `
"
// sitrep
function bar () {
  var a = 'foo'
  const b = 'bar'
  let c = [a, b].map(x => x)
  let d = a
  return c.join('-')
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
function bar() {
  console.groupCollapsed('bar');

  var a = 'foo';
  console.log('a: ', a);
  const b = 'bar';
  console.log('b: ', b);
  let c = [a, b].map(x => x);
  console.log('c: ', c);
  let d = a;
  console.log('d: ', d);

  var _returnValue = c.join('-');

  console.log('Return Value:', _returnValue);
  console.groupEnd('bar');
  return _returnValue;
}
"
`;

exports[`function assignment 1`] = `
"
// sitrep
var a = function () {
  return 'foo'
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
var a = function () {
  console.groupCollapsed('a');
  var _returnValue = 'foo';
  console.log('Return Value:', _returnValue);
  console.groupEnd('a');

  return _returnValue;
};
"
`;

exports[`function declaration with multiple returns 1`] = `
"
myFn(
  // sitrep
  function(err, vars) {
    if (err) {
      return err
    }

    vars = vars.map(x => x)
    return vars
  }
)

      â†“ â†“ â†“ â†“ â†“ â†“

myFn(
// sitrep
function (err, vars) {
  console.groupCollapsed(\\"function: function(err, vars) {\\");

  if (err) {
    var _returnValue = err;
    console.log(\\"Return Value:\\", _returnValue);
    console.groupEnd(\\"function: function(err, vars) {\\");

    return _returnValue;
  }

  vars = vars.map(x => x);
  console.log(\\"vars: \\", vars);
  var _returnValue2 = vars;
  console.log(\\"Return Value:\\", _returnValue2);
  console.groupEnd(\\"function: function(err, vars) {\\");
  return _returnValue2;
});
"
`;

exports[`function has a for loop 1`] = `
"
// sitrep
function test() {
    var sum = 0;
    for (var i = 0; i < 5; i++) {
        sum = sum + i;
    }
    return sum;
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
function test() {
    console.groupCollapsed(\\"test\\");

    var sum = 0;
    console.log(\\"sum: \\", sum);
    for (var i = 0; i < 5; i++) {
        sum = sum + i;
        console.log(\\"sum: \\", sum);
    }
    var _returnValue = sum;
    console.log(\\"Return Value:\\", _returnValue);
    console.groupEnd(\\"test\\");
    return _returnValue;
}
"
`;

exports[`function has a for-of loop 1`] = `
"
// sitrep
function test(arr) {
    var sum = 0;
    for (const value of arr) {
        sum += value;
    }
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
function test(arr) {
    console.groupCollapsed(\\"test\\");

    var sum = 0;
    console.log(\\"sum: \\", sum);
    for (const value of arr) {
        sum += value;
        console.log(\\"sum: \\", sum);
    }
    console.groupEnd(\\"test\\");
}
"
`;

exports[`no function parent 1`] = `
"
// sitrep
if (a) {
  let a = 2

  let b = a + 5
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
if (a) {
  let a = 2;

  let b = a + 5;
}
"
`;

exports[`object properties 1`] = `
"
const obj = {
  // sitrep
  fn() {
    const { a, b, c = 'foo', d: alias } = x;
    return a + b + c + alias;
  }
}

      â†“ â†“ â†“ â†“ â†“ â†“

const obj = {
  // sitrep
  fn() {
    console.groupCollapsed('fn');

    const { a, b, c = 'foo', d: alias } = x;
    console.log('a', a);
    console.log('b', b);
    console.log('c', c);
    console.log('alias', alias);

    var _returnValue = a + b + c + alias;

    console.log('Return Value:', _returnValue);
    console.groupEnd('fn');
    return _returnValue;
  }
};
"
`;

exports[`object properties with let 1`] = `
"
const obj = {
  // sitrep
  fn(x) {
    let a, b, c, d;
    ({ a, b, c = 'foo', d: alias } = x);
    return a + b + c + alias;
  }
}

      â†“ â†“ â†“ â†“ â†“ â†“

const obj = {
  // sitrep
  fn(x) {
    console.groupCollapsed('fn');

    let a, b, c, d;
    ({ a, b, c = 'foo', d: alias } = x);
    console.log('a', a);
    console.log('b', b);
    console.log('c', c);
    console.log('alias', alias);

    var _returnValue = a + b + c + alias;

    console.log('Return Value:', _returnValue);
    console.groupEnd('fn');
    return _returnValue;
  }
};
"
`;

exports[`optional log prefix 1`] = `
"
// sitrep prefix
function bar () {
  var a = 'foo'
  const b = 'bar'
  let c = [a, b].map(x => x)
  let d = a
  return c.join('-')
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep prefix
function bar() {
  console.groupCollapsed('(prefix) bar');

  var a = 'foo';
  console.log('a: ', a);
  const b = 'bar';
  console.log('b: ', b);
  let c = [a, b].map(x => x);
  console.log('c: ', c);
  let d = a;
  console.log('d: ', d);

  var _returnValue = c.join('-');

  console.log('Return Value:', _returnValue);
  console.groupEnd('(prefix) bar');
  return _returnValue;
}
"
`;

exports[`should not add console logs 1`] = `
"
// sitrep
const shouldNotLog = 'bar';

function bar () {
  var a = 'foo'
  const b = 'bar'
  let c = [a, b].map(x => x)
  return c.join('-')
}

var cb = x => x.charAt(0)

var cb = x => {
  x = x + 2
  x.charAt(0)
  return x
}

var a = function () {
  return 'foo'
}

const obj = {
  fn() {
    let a = 5
    return a + 5
  }
}

class Boom {
  // sitrep
  shouldNotLog = 'bar';

  fire() {
    let a = 2

    return a + 5
  }

  handleClick = (e) => e.preventDefault()
}

      â†“ â†“ â†“ â†“ â†“ â†“

// sitrep
const shouldNotLog = 'bar';

function bar() {
  var a = 'foo';
  const b = 'bar';
  let c = [a, b].map(x => x);
  return c.join('-');
}

var cb = x => x.charAt(0);

var cb = x => {
  x = x + 2;
  x.charAt(0);
  return x;
};

var a = function () {
  return 'foo';
};

const obj = {
  fn() {
    let a = 5;
    return a + 5;
  }
};

class Boom {
  constructor() {
    this.shouldNotLog = 'bar';

    this.handleClick = e => e.preventDefault();
  }
  // sitrep


  fire() {
    let a = 2;

    return a + 5;
  }

}
"
`;
