import React, { PureComponent } from 'react'
import { Link } from 'react-router'
import { graphql } from 'react-apollo'
import PropTypes from 'prop-types'
import { List, ListItem } from 'Lib/List'
import { Truncate } from 'Lib/Text'
import Sheet from 'Lib/Sheet'
import {
	InfiniteLoader,
	List as VirtualList,
	AutoSizer
} from 'react-virtualized'
import range from 'lodash.range'
import Status from 'Lib/Status'

import GET_HOTELS_FOR_TAG_QUERY from './HotelsQueryForSelectedTag.graphql'
import Placeholder from 'Components/Hotels/Results/HotelItem/Placeholder'
import HotelItem from 'Components/Hotels/Results/HotelItem'
import { isEmpty } from 'Utils'
import { detailsPageClaverTap } from 'Utils/Analytics'

import { HOTEL_DETAILS } from 'Constants/hotels/paths'
import { HOTELS_LOCATION_ZERO_RESULTS } from 'Constants/hotels/errors'

import {
	constructHotelDetailsImageUrl,
	mapQueryToDetailsURL,
	removeDuplicates
} from 'Utils/hotels'


class TaggedModal extends PureComponent {
	constructor(props) {
		super(props);
		this.screenHeight = window.innerHeight
	}
	hotelClickedFromTaggedModal = (index) => {
		detailsPageClaverTap(
			'Hotels_Details_Tag_List_Hotel_Clicked',
			this.props.payLoadForClavertap,
			{ tagValue: this.props.tag.name, tagListRank: index + 1 }
		)
	}
	renderHotelItem = ({ index, key, style }) => {
		if (index >= this.props.hotels.edges.length) {
			return (
				<ListItem style={{ ...style }} key={key} className="pl-8 pr-8">
					<Placeholder />
				</ListItem>
			)
		}

		const hotelItem = this.props.hotels.edges[index].node
		return (
			<Link
				to={{
					pathname: HOTEL_DETAILS(hotelItem.id),
					query: mapQueryToDetailsURL(this.props.queryParamsForTaggedModal)
				}}
				key={hotelItem.id}
				onClick={this.hotelClickedFromTaggedModal.bind(this, index)}
			>
				<ListItem style={style} className="pl-8 pr-8" enableRipple={true}>
					<HotelItem
						name={hotelItem.name}
						image={constructHotelDetailsImageUrl(
							hotelItem.image,
							'w_208,h_240,fl_progressive,e_sharpen:80,q_auto,c_fill'
						)}
						location={hotelItem.area ? true : false}
						deal={Boolean(hotelItem.discount)}
						tripAdvisorRating={hotelItem.tripAdvisorRating}
						tripAdvisorReviewCount={hotelItem.tripAdvisorReviewCount}
						starRating={hotelItem.starRating}
						distanceFromCurrentLocation={hotelItem.distanceFromCurrentLocation}
						discountedPrice={hotelItem.discountedPrice}
						strikedOutPrice={hotelItem.discount + hotelItem.discountedPrice}
						discountPercentage={hotelItem.discountPercentage}
						payAtHotel={Boolean(hotelItem.payAtHotel)}
						freeCancellation={Boolean(hotelItem.freeCancellation)}
						hotelWithDeals={Boolean(hotelItem.hotelWithDeals)}
						tax={hotelItem.tax}
						mrp={hotelItem.mrp}
					/>
				</ListItem>
			</Link>
		)
	}

	isRowLoaded = ({ index }) => {
		const { hotels } = this.props
		return !hotels.pageInfo.hasNextPage || Boolean(hotels.edges[index])
	}
	render() {
		const {
			loading,
			error,
			hotels,
			loadMoreRows,
			closeFn,
			slideUp,
			tag,
			queryParamsForTaggedModal
		} = this.props
		let totalRowCount = 10
		if (!loading && !isEmpty(hotels)) {
			const { totalCount, edges } = hotels
			if (totalCount > edges.length) {
				if (totalCount - edges.length >= 5) {
					totalRowCount = edges.length + 5
				} else {
					totalRowCount = edges.length + (totalCount - edges.length)
				}

			} else {
				totalRowCount = totalCount
			}
		}
		const { edges } = hotels || {}
		return (
			<Sheet isOpen={slideUp} title="Tagged as" onClose={closeFn}>
				<p className="bg-white ta-l fw-500 fs-16 lh-copy pb-10 pt-10 bb pl-8 pr-8">Other "{tag.name}" hotels in {queryParamsForTaggedModal.city}</p>
				<div className="overflow-y-scroll bg-white" style={{ height: '100vh' }}>
					<Choose>
						<When condition={loading}>
							<List>
								{range(10).map(i => {
									return (
										<ListItem key={i} className="pl-8 pr-8">
											<Placeholder />
										</ListItem>
									)
								})}
							</List>
						</When>
						<Otherwise>
							{hotels == undefined ? (
								<List>
									{range(10).map(i => {
										return (
											<ListItem key={i} className="pl-8 pr-8">
												<Placeholder />
											</ListItem>
										)
									})}
								</List>
							) : (
									<Choose>
										<When condition={isEmpty(edges)}>
											<Status
												heading=""
												body={HOTELS_LOCATION_ZERO_RESULTS}
												onClick={closeFn}
												action="Go back"
											/>
										</When>
										<Otherwise>
											<List className="bt-0">
												<InfiniteLoader
													loadMoreRows={loadMoreRows}
													rowCount={totalRowCount}
													isRowLoaded={this.isRowLoaded}
												>
													{({ onRowsRendered, registerChild }) => (
														<AutoSizer>
															{({ height, width }) => (
																<VirtualList
																	height={this.screenHeight}
																	rowCount={totalRowCount}
																	onRowsRendered={onRowsRendered}
																	ref={registerChild}
																	rowHeight={136}
																	rowRenderer={this.renderHotelItem}
																	overscanRowCount={0}
																	width={width}
																/>
															)}
														</AutoSizer>
													)}
												</InfiniteLoader>
											</List>
										</Otherwise>
									</Choose>
								)
							}
						</Otherwise>
					</Choose>
				</div>
			</Sheet>
		)

	}

}
const HotelsCardListForSelectedTag = graphql(GET_HOTELS_FOR_TAG_QUERY, {
	options: props => {
		const query = {
			...props.queryParamsForTaggedModal,
			selectedTagId: props.tag.id.toString(),
			currentHotelId: props.currentHotelId

		}
		return {
			variables: {
				...query,
				after: props.endCursor || null,
				first: 10
			},

		}
	},
	props({ ownProps, data: { loading, error, hotels, fetchMore } }) {
		return {
			loading,
			hotels,
			loadMoreRows: () => {
				const query = {
					...ownProps.queryParamsForTaggedModal,
					selectedTagId: ownProps.tag.id.toString(),
					currentHotelId: ownProps.currentHotelId
				}
				return fetchMore({
					query: GET_HOTELS_FOR_TAG_QUERY,
					variables: {
						...query,
						after: hotels.pageInfo.endCursor ? hotels.pageInfo.endCursor : null,
						first: 10
					},
					updateQuery: (previousResult, { fetchMoreResult }) => {

						if (!fetchMoreResult) return previousResult;
						let previousEntry = previousResult.hotels.edges;
						let newComments = fetchMoreResult.hotels.edges;
						newComments = newComments.filter(edge => !previousEntry.some(PrevEdge => edge.node.id === PrevEdge.node.id))
						return {
							hotels: {
								...fetchMoreResult.hotels,
								edges: [...previousEntry, ...newComments]
							}
						}
					}
				})
			}
		}
	},
	skip: ({ queryParamsForTaggedModal }) => {
		const shouldSkip =
			!queryParamsForTaggedModal.chkIn || !queryParamsForTaggedModal.chkOut || !queryParamsForTaggedModal.city || !queryParamsForTaggedModal.country
		return shouldSkip
	}
})(TaggedModal)

TaggedModal.propTypes = {
	closeFn: PropTypes.func,
	slideUp: PropTypes.boolean
}

TaggedModal.defaultProps = {
	closeFn: () => { },
	slideUp: false
}

export default HotelsCardListForSelectedTag
