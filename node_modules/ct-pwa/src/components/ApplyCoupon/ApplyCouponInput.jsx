import React, { Component } from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import { List, ListItem } from 'Lib/List'
import { Shake } from 'Lib/Animate'
import Input from 'Lib/Form/Input'
import { path } from 'Utils'

class ApplyCouponInput extends Component {
  constructor(props) {
    super(props)
    this.state = {
      enablePin: false,
      couponValue: '',
      gvPin: ''
    }
  }

  _handleGVPinChange = pin => {
    this.props.handleCouponChange(
      { value: this.state.couponValue, pin },
      'coupon',
      this.props.index
    )
  }

  _handleCouponChange = (value, name) => {
    if (this.props.giftVoucherEnable) {
      const { appliedSuccess, showDefaultPin } = this.props || {}

      const voucher_details =
        path(['couponDetails', 'voucher_details'], this.props) || {}

      this.props.handleResetGVError() // Reset Error
      const firstSixDigitCouponCode = value.substring(0, 6)
      let enablePin = false
      let diableApplyTextFlag = false
      if (
        firstSixDigitCouponCode === '100137' ||
        firstSixDigitCouponCode === '300013' ||
        firstSixDigitCouponCode === '300033'
      ) {
        this.props.handleDefaultPinHandler()
        enablePin = true
        this.setState({
          labelButtonText: ''
        })
        diableApplyTextFlag = true
      }
      if (
        (this.state.enablePin && !appliedSuccess && showDefaultPin) ||
        (!appliedSuccess &&
          voucher_details[this.props.index] &&
          voucher_details[this.props.index].status === 'F')
      ) {
        diableApplyTextFlag = true
      }

      this.props.diableApplyTextHandler({
        index: this.props.index,
        flag: diableApplyTextFlag
      })

      const labelButtonText = enablePin ? '' : this.props.textApplyButton
      this.setState({
        enablePin,
        labelButtonText,
        couponValue: value.trim()
      })
    }
    const pin =
      (this.props.couponCodes[this.props.index] &&
        this.props.couponCodes[this.props.index].pin) ||
      null
    this.props.handleCouponChange(
      { value: value.trim(), pin },
      'coupon',
      this.props.index
    )
  }
  _handleActionClick = () => {
    this.props.onApplyActionClick(this.props.index)
  }
  render() {
    const {
      appliedSuccess,
      inputClassName,
      wrapper,
      wrapperClassName,
      couponText,
      textEnterCouponCode,
      giftVoucherEnable,
      textApplyButton,
      couponDetails,
      showDefaultPin
    } = this.props

    const { voucher_details = [] } = couponDetails || {}
    const inputClass = classNames('fs-15 c-black-90', {
      'c-green fw-700': appliedSuccess,
      'ta-r': this.props.isRTL
    })
    return (
      <React.Fragment>
        <List>
          <Shake animate={this.props.animate}>
            <If condition={appliedSuccess}>
              <Input
                autoComplete="off"
                type="text"
                inputClassName={inputClass}
                style={{ textTransform: 'uppercase' }}
                wrapper={wrapper}
                wrapperClassName={wrapperClassName}
                value={couponText}
                name="coupon"
                readonly={true}
                placeholder={couponText}
                actionLabel="X"
                actionClassName="fs-15 bg-light-gray c-white pt-5 pb-5 pl-8 pr-8 br4 fw-800"
                onActionClick={() =>
                  this.props.onRemoveActionClick(this.props.index)
                }
              />
            </If>
            <If condition={!appliedSuccess}>
              <Input
                autoComplete="off"
                ref={this.setCouponInputRef}
                dir="ltr"
                type="text"
                inputClassName={inputClass}
                style={{ textTransform: 'uppercase' }}
                wrapper={wrapper}
                wrapperClassName={wrapperClassName}
                placeholder={textEnterCouponCode}
                value={couponText}
                name="coupon"
                onChange={this._handleCouponChange}
                hasError={this.props.hasError}
                onFocus={this.props.handleCouponFocus}
                actionLabel={this.props.actionLabel}
                actionClassName="fs-15 c-blue ws-nowrap"
                onActionClick={this._handleActionClick}
              />
            </If>
            <If
              condition={
                (giftVoucherEnable &&
                  this.state.enablePin &&
                  !appliedSuccess &&
                  showDefaultPin) ||
                (giftVoucherEnable &&
                  !appliedSuccess &&
                  voucher_details[this.props.index] &&
                  voucher_details[this.props.index].status === 'F')
              }
            >
              <Input
                autoComplete="off"
                ref={this.setCouponInputRef}
                dir="ltr"
                type="number"
                inputClassName={inputClassName}
                style={{ textTransform: 'uppercase' }}
                wrapper={wrapper}
                wrapperClassName={wrapperClassName}
                placeholder={'Enter Pin'}
                onChange={this._handleGVPinChange}
                name="coupon"
                hasError={this.props.hasError}
                actionLabel={this.props.textApplyButton}
                actionClassName="fs-15 c-blue ws-nowrap"
                onActionClick={() =>
                  this.props.onApplyGVActionClick(this.props.index)
                }
              />
            </If>
          </Shake>
        </List>
      </React.Fragment>
    )
  }
}

ApplyCouponInput.propTypes = {
  couponDetails: PropTypes.objectOf(PropTypes.any),
  couponCodes: PropTypes.objectOf(PropTypes.any),
  key: PropTypes.string,
  index: PropTypes.number
}

ApplyCouponInput.defaultProps = {}

export default ApplyCouponInput
