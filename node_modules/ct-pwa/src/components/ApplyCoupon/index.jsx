import React, { Component } from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'

import { isEmpty, formatCurrency, path, getformattedDate } from 'Utils'
import Pageloader from 'Lib/Pageloader'
import { ListItem } from 'Lib/List'
import { SectionHeader } from 'Lib/Text'
import Overlay from 'Lib/Overlay'
import CashbackModal from 'Lib/CashbackModal'
import InfoIcon from './info.svg'
import ApplyCouponInput from './ApplyCouponInput'
import SuccessIcon from 'Components/Payment/icons/tick.svg'
import { DEFAULT_GIFT_VOUCHER_COUNT } from 'Constants'

class ApplyCoupon extends Component {
  constructor(props) {
    super(props)

    this.state = {
      couponCodes: {},
      animate: {
        coupon: false
      },
      error: { 0: { coupon: false } },
      // coupon: props.preApplyCouponCode,
      enablePin: false,
      gvPin: '',
      newGVCount:
        (this.props.couponDetails && this.props.couponDetails.newGVCount) || 1,
      diableApplyTextIndex: null,
      newAddGVFlag: false,
      showDefaultPin: true,
      gvErrorFlag: false,
      maxGiftVoucherCount: this.props.getMaxGiftVoucher
    }
    if (props.preApplyCouponCode && !isEmpty(this.state.couponCodes[0])) {
      this.state.couponCodes[0].value = props.preApplyCouponCode
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    return (
      this.state.gvErrorFlag !== nextState.gvErrorFlag ||
      this.state.diableApplyTextIndex !== nextState.diableApplyTextIndex ||
      this.state.newGVCount !== nextState.newGVCount ||
      this.state.newAddGVFlag !== nextState.newAddGVFlag ||
      this.state.couponCodes !== nextState.couponCodes ||
      // this.state.coupon !== nextState.coupon ||
      this.state.error !== nextState.error ||
      this.state.gvPin !== nextState.gvPin ||
      this.props.isCouponLoading !== nextProps.isCouponLoading ||
      this.props.totalAmount !== nextProps.totalAmount ||
      (!isEmpty(nextProps.couponDetails) &&
        this.props.couponDetails !== nextProps.couponDetails) ||
      this.state.showCashbackSchedule !== nextState.showCashbackSchedule
    )
  }

  componentDidUpdate(prevProps, prevState) {
    const { couponDetails = {} } = this.props || {}
    const { voucher_details = [], couponCodes: savedCouponCodes = {} } =
      couponDetails || {}

    if (
      couponDetails !== prevProps.couponDetails &&
      !isEmpty(voucher_details)
    ) {
      if (voucher_details[voucher_details.length - 1].status === 'S') {
        this.setState({
          newAddGVFlag: true
        })
      } else {
        this.setState({
          gvErrorFlag: true
        })
      }
    }

    if (this.state.couponCodes !== prevState.couponCodes) {
      this.setState({
        gvErrorFlag: false
      })
    }

    if (isEmpty(this.state.couponCodes) && !isEmpty(savedCouponCodes)) {
      this.setState({
        couponCodes: savedCouponCodes
      })
    }

    if (couponDetails && this.state.newGVCount < couponDetails.newGVCount) {
      this.setState({
        newGVCount: couponDetails.newGVCount
      })
    }
  }

  _showCashbackSchedule = () => {
    this.setState({ showCashbackSchedule: true })
  }

  _hideCashbackSchedule = () => {
    this.setState({ showCashbackSchedule: false })
  }

  _getCouponDetails = () => {
    const { couponDetails, textNote } = this.props
    const couponMessages = []
    let couponNote = ''
    let couponError = ''
    let appliedCouponText = ''
    if (
      this.props.isShukranEnabled &&
      !isEmpty(couponDetails) &&
      !isEmpty(couponDetails.fares) &&
      couponDetails.isShukranCard
    ) {
      const couponMessage = this.props.shukranCardSuccessNote.replace(
        '{shukranSuccess}',
        couponDetails.fares[this.props.fareKey]
      )
      couponMessages.push(couponMessage)
      appliedCouponText = 'SHUKRAN'
    } else if (!isEmpty(couponDetails)) {
      const { details, wt_details: wtDetails } = couponDetails
      if (details) {
        for (let i = 0; i < details.length; i += 1) {
          const couponType = details[i].coupon_type.toLowerCase()
          if (couponType !== 'error') {
            const couponMessage = details[i].coupon_type_msg.replace(
              '<amount>',
              this.props.formatCurrency(details[i].amount)
            )
            couponMessages.push(couponMessage)
          }
          if (!isEmpty(wtDetails)) {
            couponNote = details[i].message
            couponNote = `${textNote} : ${couponNote}`
          } else if (couponType === 'error') {
            couponError = details[i]
            this.props.resetCouponDetails()
          }
        }
        if (details && details[0] && details[0].coupons.length) {
          appliedCouponText = details[0].coupons.join(',') // support for multiple coupons
        }
      }
    }
    return { couponMessages, couponNote, couponError, appliedCouponText }
  }

  _handleCouponChange = (obj, name, index) => {
    this.setState({
      error: { ...(this.state.error || {}), [index]: { coupon: false } },
      couponCodes: { ...(this.state.couponCodes || {}), [index]: obj }
    })
    this.props.onCouponChange(obj.value, 'coupon')
  }

  _handleGVCouponChange = (value, name) => {
    this.setState({
      gvPin: value.trim()
    })
  }

  _handleDefaultPinHandler = () => {
    this.setState({
      showDefaultPin: true
    })
  }
  _handleResetGVError = () => {
    this.setState({
      gvErrorFlag: false
    })
  }
  _handleRemoveCoupon = index => {
    let reduceGVCount = false
    if (this.state.newGVCount > 1) {
      this.setState(prevState => ({
        newGVCount: prevState.newGVCount - 1
      }))
      reduceGVCount = true
    }

    const { couponDetails } = this.props
    if (!isEmpty(couponDetails) && !isEmpty(couponDetails.voucher_details)) {
      const newGVCount = reduceGVCount
        ? this.state.newGVCount - 1
        : this.state.newGVCount

      const couponCodes = this.state.couponCodes
      delete couponCodes[index]
      const newCouponCodes = {}
      Object.keys(couponCodes).forEach((el, index) => {
        newCouponCodes[index] = couponCodes[el]
      })
      this.setState({
        couponCodes: newCouponCodes
      })

      this.props.resetCouponDetails(index, newGVCount, newCouponCodes)

      const updatedVoucherDetails = this.props.couponDetails.voucher_details.filter(
        (el, i) => {
          return i !== index
        }
      )

      if (updatedVoucherDetails.length === 0) {
        this.setState({
          showDefaultPin: false
        })
      } else {
        this.setState({
          showDefaultPin: true
        })
      }
      const updatedCouponDetail = {
        ...this.props.couponDetails,
        voucher_details: updatedVoucherDetails,
        couponCodes: newCouponCodes,
        newGVCount: reduceGVCount
          ? this.state.newGVCount - 1
          : this.state.newGVCount
      }
      this.props.updateCouponDetails(updatedCouponDetail)
    } else {
      this.props.resetCouponDetails()
      this.props.onCouponChange('', 'coupon')
      if (this.couponInputRef) {
        this.couponInputRef.focus()
      }
    }
  }
  _setCouponInputRef = ref => {
    this.couponInputRef = ref
  }

  _handleCouponFocus = name => {
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  _setCouponStatus = index => {
    this.setState(prevState => ({
      error: { ...prevState.error, [index]: { coupon: true } },
      animate: { ...prevState.animate, coupon: true }
    }))
    this.props.handleValidationError({
      message: this.props.textValidateEnterCouponCode
    })

    setTimeout(() => {
      this.setState({
        animate: {
          coupon: false
        }
      })
    }, 500)
  }

  _validateCoupon = index => {
    const { couponCodes } = this.state
    let isValidCoupon = true
    if (isEmpty(couponCodes[index])) {
      this._setCouponStatus(index)
      isValidCoupon = false
    }
    return isValidCoupon
  }

  _applyCoupon = index => {
    const { couponCodes, newGVCount } = this.state

    if (newGVCount > 1) {
      this.props.handleValidationError({
        message: this.props.invalidGVErrorMessage
      })
    } else if (this._validateCoupon(index)) {
      this.props.applyCoupon({
        coupon: couponCodes[index],
        newGVCount
      })
    }
  }

  _applyGVCouponHandler = index => {
    const { couponCodes, maxGiftVoucherCount, newGVCount } = this.state
    let obj = {}

    Object.keys(couponCodes).forEach((el, index) => {
      if (index < maxGiftVoucherCount) {
        const indexValue = index + 1
        obj['voucher' + indexValue] = couponCodes[el].value
        obj['pin' + indexValue] = couponCodes[el].pin
      }
    })
    // for (let i = 1; i <= maxGiftVoucherCount; i++) {
    //   if (i > Object.keys(couponCodes).length) {
    //     obj['voucher' + i] = null
    //     obj['pin' + i] = null
    //   }
    // }
    obj.maxAllowed = maxGiftVoucherCount

    if (isEmpty(couponCodes[index].pin)) {
      this.props.handleValidationError({
        message: this.props.gvPinErrorMessage
      })
    } else if (!isEmpty(obj)) {
      this.props.applyCoupon({
        obj,
        newGVCount,
        couponCodes
      })
    }
  }

  _renderCouponError = () => {
    this.props.resetCouponDetails()
  }

  _renderSchedule = wtDetails => {
    const {
      message_values: { amount },
      breakup
    } = wtDetails
    let {
      message: subheader,
      message_values: { date }
    } = wtDetails
    date = getformattedDate(date).split(',')
    ;[, date] = date
    subheader = subheader
      .replace('<amount>', this.props.formatCurrency(amount))
      .replace('<date>', date)
    return (
      <Overlay>
        <CashbackModal
          textCashbackSchedule={this.props.textCashbackSchedule}
          textClose={this.props.textClose}
          subheader={subheader}
          breakup={breakup}
          onPrimaryAction={this._hideCashbackSchedule}
        />
      </Overlay>
    )
  }

  _addNewGVHandler = () => {
    this.setState(prevState => ({
      newGVCount: prevState.newGVCount + 1,
      newAddGVFlag: false
    }))
  }

  _diableApplyTextHandler = ({ index, flag }) => {
    this.setState({
      diableApplyTextIndex: flag ? index : null
    })
  }

  render() {
    const couponClassName = classNames('h-48 flex flex-middle', {
      'has-error': this.state.error.coupon
    })

    let inputClass
    let appliedGVCoupons = null
    let appliedSuccess = {}

    const { couponMessages, couponNote, couponError, appliedCouponText } =
      this._getCouponDetails() || {}
    const wtDetails = this.state.showCashbackSchedule
      ? path(['couponDetails', 'wt_details'], this.props)
      : {}
    let couponText =
      (this.state.couponCodes[0] && this.state.couponCodes[0].value) ||
      appliedCouponText
    const { isCouponLoading } = this.props
    appliedSuccess[0] =
      ((this.state.couponCodes[0] && this.state.couponCodes[0].value === '') ||
        appliedCouponText === this.props.shukranPlaceholder ||
        appliedCouponText.toLowerCase() === couponText.toLowerCase()) &&
      appliedCouponText !== '' &&
      !couponError

    if (appliedSuccess[0]) {
      couponText = `${appliedCouponText} - ${this.props.textCouponApplied}`
    }

    let gvTotalAmount = 0
    let gvAmountText = ''
    const { couponCodes } = this.state
    const {
      textHangOn,
      textCheckingSavings,
      textCashbackSchedule,
      textApplyCouponCode,
      textEnterCouponCode,
      preApplyCouponCode,
      giftVoucherEnable,
      textApplyButton,
      couponDetails,
      totalAmount
    } = this.props
    const { voucher_details = [] } = couponDetails || {}

    const voucherErr = []
    if (!isEmpty(voucher_details)) {
      voucher_details.forEach((el, index) => {
        if (el.status === 'S') {
          appliedSuccess[index] = true
          gvTotalAmount += el.applied_amount
        } else {
          voucherErr.push({
            index,
            message: el.isExpired ? 'expired' : 'invalid'
          })
        }
      })
      gvAmountText = `An amount of ${this.props.formatCurrency(
        gvTotalAmount
      )} has been redeemed for this booking`
    }

    const couponCodeText =
      this.state.newGVCount > 1 ? 'Gift Card' : textEnterCouponCode

    return (
      <div>
        <SectionHeader>{textApplyCouponCode}</SectionHeader>
        {new Array(this.state.newGVCount).fill().map((val, index) => (
          <ApplyCouponInput
            couponDetails={couponDetails}
            couponCodes={couponCodes}
            key={`${index}`}
            index={index}
            animate={
              !isEmpty(couponError)
                ? true
                : this.state.gvErrorFlag ||
                  (this.state.error[index] && this.state.error[index].coupon)
            }
            appliedSuccess={appliedSuccess[index]}
            wrapperClassName={couponClassName}
            couponText={
              isEmpty(couponCodes)
                ? couponText
                : couponCodes[index] && couponCodes[index].value
            }
            onRemoveActionClick={this._handleRemoveCoupon}
            autoComplete="off"
            ref={this.setCouponInputRef}
            dir="ltr"
            type="text"
            style={{ textTransform: 'uppercase' }}
            wrapper={ListItem}
            textEnterCouponCode={couponCodeText}
            name="coupon"
            handleCouponChange={this._handleCouponChange}
           
            hasError={
              !isEmpty(couponError)
                ? true
                : this.state.gvErrorFlag ||
                  (this.state.error[index] && this.state.error[index].coupon)
            }
            handleCouponFocus={this._handleCouponFocus}
            actionLabel={
              this.state.diableApplyTextIndex === index ? '' : textApplyButton
            }
            actionClassName="fs-15 c-blue ws-nowrap"
            onApplyActionClick={this._applyCoupon}
            onApplyGVActionClick={this._applyGVCouponHandler}
            giftVoucherEnable={giftVoucherEnable}
            textApplyButton={this.props.textApplyButton}
            isRTL={this.props.isRTL}
            diableApplyTextHandler={this._diableApplyTextHandler}
            showDefaultPin={this.state.showDefaultPin}
            handleDefaultPinHandler={this._handleDefaultPinHandler}
            handleResetGVError={this._handleResetGVError}
          />
        ))}
        <If
          condition={
            voucher_details.length > 0 &&
            voucher_details[voucher_details.length - 1].status === 'S' &&
            this.state.newGVCount < this.state.maxGiftVoucherCount &&
            this.state.newAddGVFlag &&
            totalAmount > 0
          }
        >
          <p
            className="pt-10 pb-10 pl-16 fs-14 fw-600 underline"
            onClick={this._addNewGVHandler}
          >
            {' '}
            {'+Add New GV'}
          </p>
        </If>

        <If condition={this.state.gvErrorFlag && voucherErr.length > 0}>
          <div className="bb pt-10 pb-10 pr-16 pl-16 bg-semilight-gray">
            <p className="c-red fs-14 fw-600">
              {voucherErr.map(el => {
                return `Gift Voucher ${el.index + 1} is ${el.message}`
              })}
            </p>
          </div>
        </If>

        <If condition={gvTotalAmount > 0}>
          <div>
            <p className="fs-14 c-black-90 pl-16 pr-16 flex flex-middle lh-copy mb-3 mt-3">
              <SuccessIcon fill="#339900" width="11" height="11" />
              <span className="mr-10 ml-10">{gvAmountText}</span>
            </p>
          </div>
        </If>

        <If condition={!isEmpty(couponMessages)}>
          <div>
            <For each="message" of={couponMessages}>
              <p className="fs-14 c-black-90 pl-16 pr-16 flex flex-middle lh-copy mb-3 mt-3">
                <SuccessIcon fill="#339900" width="11" height="11" />
                <span className="mr-10 ml-10">{message}</span>
              </p>
            </For>
          </div>
        </If>

        <If condition={!isEmpty(couponNote)}>
          <p className="fs-13 mt-5 mb-5 pl-16 pr-16 c-black-50 lh-title">
            {couponNote}
          </p>
          <If condition={!isEmpty(couponMessages)}>
            <a
              className="fs-13 mb-5 pl-16 pr-16 c-blue lh-title d-ib"
              onClick={this._showCashbackSchedule}
            >
              {textCashbackSchedule}
            </a>
          </If>
        </If>
        <If condition={!isEmpty(wtDetails)}>
          {this._renderSchedule(wtDetails)}
        </If>
        <If condition={isCouponLoading}>
          <Pageloader
            title={textHangOn}
            message={`${textCheckingSavings}...`}
          />
        </If>

        <If condition={!isEmpty(couponError)}>
          <div className="bb pt-10 pb-10 pr-16 pl-16 bg-semilight-gray">
            <p className="c-red fs-14 fw-600">{couponError.headerMsg}</p>
            <ul className="lists">
              <Choose>
                <When condition={Array.isArray(couponError.reason)}>
                  {couponError.reason.map(el => {
                    return <li className="pt-8 c-red fs-12 lh-title">{el}</li>
                  })}
                </When>
                <Otherwise>
                  <p className="c-red fs-12 lh-title">{couponError.message}</p>
                </Otherwise>
              </Choose>
            </ul>
          </div>
        </If>
        <If
          condition={!isEmpty(couponError.promoMsg) && this.props.showPromoMsg}
        >
          <div className="Deal pl-16 pr-16 pt-10 pb-10">
            <p className="c-light-green fs-12 lh-title">
              <InfoIcon
                className="vertical-top mr-5"
                fill="#00bc20"
                width="14"
                height="14"
              />{' '}
              {couponError.promoMsg}.{' '}
              <a className="c-blue ml-5" href="/offers" target="_blank">
                Know more
              </a>
            </p>
          </div>
        </If>
      </div>
    )
  }
}

ApplyCoupon.propTypes = {
  formatCurrency: PropTypes.func,
  isShukranEnabled: PropTypes.bool,
  shukranCardNumber: PropTypes.string,
  fareKey: PropTypes.string,
  shukranPlaceholder: PropTypes.string,
  shukranCardSuccessNote: PropTypes.string,
  applyCoupon: PropTypes.func.isRequired,
  invalidGVErrorMessage: PropTypes.string,
  preApplyCouponCode: PropTypes.string,
  gvPinErrorMessage: PropTypes.string,
  resetCouponDetails: PropTypes.func.isRequired,
  updateCouponDetails: PropTypes.func,
  couponDetails: PropTypes.objectOf(PropTypes.any),
  isCouponLoading: PropTypes.bool,
  onCouponChange: PropTypes.func,
  getMaxGiftVoucher: PropTypes.func,
  textHangOn: PropTypes.string,
  textCheckingSavings: PropTypes.string,
  textCashbackSchedule: PropTypes.string,
  textApplyCouponCode: PropTypes.string,
  textEnterCouponCode: PropTypes.string,
  textValidateEnterCouponCode: PropTypes.string,
  textOkay: PropTypes.string,
  textInvalidCoupon: PropTypes.string,
  textCouponApplied: PropTypes.string,
  textNote: PropTypes.string,
  textClose: PropTypes.string,
  textApplyButton: PropTypes.string,
  isRTL: PropTypes.bool,
  showPromoMsg: PropTypes.bool,
  giftVoucherEnable: PropTypes.bool,
  totalAmount: PropTypes.number,
  getMaxGiftVoucher: PropTypes.number
}

ApplyCoupon.defaultProps = {
  getMaxGiftVoucher: () => {},
  formatCurrency,
  isShukranEnabled: false,
  shukranCardNumber: '',
  shukranPlaceholder: 'SHUKRAN',
  fareKey: '',
  shukranCardSuccessNote:
    'Great! You  will earn {shukranSuccess} shukran points on this booking',
  couponDetails: {},
  isCouponLoading: false,
  onCouponChange: () => {},
  preApplyCouponCode: undefined,
  textHangOn: 'Hang on',
  textCheckingSavings: 'Checking your savings',
  textCashbackSchedule: 'Cashback schedule',
  textApplyCouponCode: 'Apply Coupon Code',
  textEnterCouponCode: 'Enter Coupon Code',
  textInvalidCoupon: 'Invalid Coupon',
  textValidateEnterCouponCode: 'Please enter a coupon code',
  textOkay: 'Okay',
  textCouponApplied: 'COUPON APPLIED',
  textNote: 'Note',
  textClose: 'Close',
  textApplyButton: 'Apply',
  isRTL: false,
  showPromoMsg: true,
  giftVoucherEnable: false,
  gvPinErrorMessage: 'Enter Pin',
  invalidGVErrorMessage: 'Unfortunately this gift card is invalid',
  getMaxGiftVoucher: DEFAULT_GIFT_VOUCHER_COUNT
}

export default ApplyCoupon
