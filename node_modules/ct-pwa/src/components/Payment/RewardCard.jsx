import React, { Component } from 'react'
import classNames from 'classnames'
import Button from 'Lib/Buttons'
import { ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'

import Pageloader from 'Lib/Pageloader'
import axios from 'Utils/axios'

import { DOMAIN } from 'Constants'
import { getCurrency, formatCurrency } from 'Utils'

import CreditCard from './CreditCard'
import InfoIcon from './icons/info.svg'

const REWARD_SUCCESS_STATUS = 'S'

class RewardCard extends Component {
  static propTypes = {}
  static defaultProps = {
    setRewardData: () => {}
  }
  static getDerivedStateFromProps(props, state) {
    const cardNumber = (props.cardNumberProps.value || '').replace(/\s/g, '')
    if (cardNumber !== state.appliedRewardCardNumber) {
      return {
        ...state,
        rewardData: null
      }
    }
    return null
  }

  constructor(props) {
    super(props)
    this.state = { checkingBalance: false, rewardData: null }
  }

  getRewardBalance = async () => {
    try {
      if (this.props.validateCard()) {
        const { rewardPaymentType, rewardPointTrackId } = this.props
        const appliedRewardCardNumber = (
          this.props.cardNumberProps.value || ''
        ).replace(/\s/g, '')

        const [mm, yy] = this.props.expiryDateProps.value.split('/')
        this.setState({ appliedRewardCardNumber })
        const response = await axios.post(
          `${DOMAIN}/book/flights/rewardpoint-service/getRewardPointBalance`,
          {
            rewardsType: rewardPaymentType.subtype,
            rewardsRequestType: 'BALANCE_CHECK',
            trackId: rewardPointTrackId,
            cardNumber: appliedRewardCardNumber,
            currency: getCurrency(),
            params: {
              customerName: 'Cleartrip PWA',
              expiryDate: `${yy}${mm}`
            },
            amount: this.props.total
          },
          {
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json'
            }
          }
        )
        this.setState({
          checkingBalance: false
        })

        const responseData = response.data

        return responseData
      } else {
        this.setState({
          checkingBalance: false,
          rewardData: null
        })
      }
    } catch (e) {
      this.setState({
        checkingBalance: false,
        rewardData: null
      })
      this.props.handleValidationError({
        message:
          "We've an error connecting to ADCB server, please try again after sometime"
      })
      console.log(e)
    }
  }

  _handleCheckBalance = async () => {
    this.setState({
      checkingBalance: true,
      rewardData: null
    })
    const rewardData = await this.getRewardBalance()
    if (rewardData.status === REWARD_SUCCESS_STATUS) {
      const redeemValue = Math.min(rewardData.amount, this.props.total)
      if (rewardData.amount >= this.props.rewardMinRedeemAmount) {
        this.props.setRewardData(
          {
            rewardData,
            redeemValue
          },
          { totalAmount: this.props.total }
        )
      }
      this.setState({
        rewardData,
        redeemValue: redeemValue || ''
      })
    } else if (rewardData.status !== REWARD_SUCCESS_STATUS) {
      this.props.handleValidationError({ message: rewardData.description })
      this.setState({
        checkingBalance: false,
        rewardData: null
      })
    }
  }

  _handleInputChange = (value, name) => {
    const val = Number(value.trim()) || ''
    this.setState({ [name]: val })
    this.props.setRewardData(
      {
        redeemValue: val < this.props.rewardMinRedeemAmount ? 0 : val,
        rewardData: this.state.rewardData
      },
      {
        totalAmount: this.props.total
      }
    )
  }

  render() {
    const { rewardData = mockResponseData } = this.state
    const { rewardMinRedeemAmount, rewardPaymentType } = this.props

    let errorMessage
    let isRedeemVisible = true
    if (rewardData) {
      if (rewardData.amount < rewardMinRedeemAmount) {
        errorMessage = this.props.textRewardThreshold(
          rewardMinRedeemAmount,
          rewardPaymentType.subtype
        )
        isRedeemVisible = false
      } else if (this.state.redeemValue < rewardMinRedeemAmount) {
        errorMessage = this.props.textRewardMinimumRedeemValue(
          rewardMinRedeemAmount
        )
      }

      if (
        this.state.redeemValue > rewardData.amount ||
        this.state.redeemValue > this.props.total
      ) {
        errorMessage = this.props.textRewardMaximumRedeemValue(
          Math.min(rewardData.amount, this.props.total)
        )
      }
    }

    const creditCardFieldClassName = classNames(
      'input input--text fs-15 bg-white fw-800',
      {
        'ta-r': this.props.isRTL,
        'c-red': !!errorMessage
      }
    )
    const labelClassName = classNames('fw-700 flex pr-5 pl-5 fs-15', {
      'c-red': !!errorMessage
    })

    return (
      <div>
        <If condition={this.state.checkingBalance}>
          <Pageloader
            title={this.props.textHangOn}
            message={this.props.textGettingRewardBalance}
          />
        </If>
        <CreditCard {...this.props} />
        <If condition={rewardData}>
          <ListItem className="h-56 flex flex-middle flex-between bg-white">
            <div className="flex flex-top">
              <p className="fs-15 c-black-90 mb-5">
                {formatCurrency(rewardData.amount)}{' '}
                {this.props.labelCheckTouchPointBalanceAvaliable}
                <span className="fs-13 c-black-60 pl-5">
                  ({rewardData.pointBalance} TouchPoints)
                </span>
              </p>
            </div>
          </ListItem>
          <If condition={isRedeemVisible}>
            <ListItem className="h-56 flex flex-middle flex-between bg-white">
              <div className="flex flex-middle">
                <div>
                  <p className="fs-15 c-black-60 ws-nowrap" for="rewardValue">
                    <label for="rewardValue">
                      {this.props.labelRewardPoint}
                    </label>
                  </p>
                </div>
                <Input
                  id="rewardValue"
                  ref={this.setInputRef}
                  type="number"
                  dir="ltr"
                  name="redeemValue"
                  label={`${getCurrency()}`}
                  labelClassName={labelClassName}
                  wrapper={<div />}
                  wrapperClassName="flex flex-middle"
                  inputClassName={creditCardFieldClassName}
                  value={this.state.redeemValue}
                  onChange={this._handleInputChange}
                />
              </div>
            </ListItem>
          </If>
          <If condition={errorMessage}>
            <ListItem className="h-56 flex flex-middle flex-between bg-white">
              <div className="flex flex-top">
                <InfoIcon fill="#df3b2e" />
                <p className="pl-5 fs-15 c-black-90 mb-5 c-red">
                  {errorMessage}
                </p>
              </div>
            </ListItem>
          </If>
        </If>
        <If condition={!rewardData}>
          <Button
            className="bg-white c-blue"
            onClick={this._handleCheckBalance}
            type=""
            disabled={this.state.checkingBalance}
          >
            {this.props.labelCheckTouchPointBalance}
          </Button>
        </If>
      </div>
    )
  }
}

export default RewardCard
