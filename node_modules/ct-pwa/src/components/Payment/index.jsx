import React, { PureComponent } from 'react'
import classNames from 'classnames'
import PropTypes from 'prop-types'
import format from 'date-fns/format'

import Button from 'Lib/Buttons'
import { SectionHeader, SectionHelper } from 'Lib/Text'
import { Tab, Tabs } from 'Lib/Tabs'
import { List, ListItem } from 'Lib/List'
import { RadioList, RadioItem } from 'Lib/Radio'
import { Shake } from 'Lib/Animate'
import Input from 'Lib/Form/Input'
import Overlay from 'Lib/Overlay'
import CashbackModal from 'Lib/CashbackModal'
import Modal from 'Lib/Modal'
import { HOTEL_BOOKING_POLICY_URL } from 'Constants/api/hotels'
import {
  PAYMENT_CARDINFO_MIN_CHARS,
  CART_TYPE_VISA,
  CART_TYPE_MASTERCARD,
  DEFAULT_GIFT_VOUCHER_COUNT
} from 'Constants'

import { getFormattedExpiryDate, isValidVPA } from 'Utils'
import {
  isEmpty,
  path,
  reduceObjectToArray,
  getCardType,
  formatCurrency,
  getformattedDate
} from 'Utils'

import ApplyCoupon from 'Components/ApplyCoupon'

import Cleave from 'Components/Payment/Cleave'
import CVVInput from 'Components/Payment/CVVInput'
import BankSearch from 'Components/Payment/BankSearch'

import Wallets from 'Components/Payment/Wallets'
import UPI from 'Components/Payment/UPI'
import RewardCard from 'Components/Payment/RewardCard'

import Countup from 'react-countup'

import RightChev from './icons/rightarr.svg'
import Card from './icons/card.colored.svg'
import Visa from './icons/visa.colored.svg'
import Mastercard from './icons/mastercard.colored.svg'
import Amex from './icons/amex.colored.svg'
import Maestro from './icons/maestro.colored.svg'
import SuccessIcon from './icons/tick.svg'
import CheckedIcon from './icons/checked.svg'

import Paytm from './images/wallets/paytm@2x.png'
import PayU from './images/wallets/payU@2x.png'
import Masterpass from './images/wallets/masterpass@2x.png'

import Axis from './svg/axis.colored.svg'
import Citibank from './svg/citibank.colored.svg'
import HDFC from './svg/hdfc.colored.svg'
import ICICI from './svg/icici.colored.svg'
import Kotak from './svg/kotak.colored.svg'
import SBI from './svg/sbi.colored.svg'
import CreditCard from 'Components/Payment/CreditCard'
import SaveCard from 'Components/Payment/SaveCard'

const CURRENCY = 'INR'

class Payment extends PureComponent {
  constructor(props) {
    super(props)
    let selectedCard = !isEmpty(this.props.cardDetails)
      ? this.props.cardDetails[0]
      : {}
    const cardType = !isEmpty(selectedCard)
      ? selectedCard.type.toLowerCase()
      : ''
    selectedCard = !isEmpty(selectedCard)
      ? `${selectedCard.id}_${cardType}`
      : 'new'
    const CVVLength = cardType === 'amex' ? 4 : 3
    const {
      bankList = [],
      netbankingList = []
    } = this._createNetbankingIconList(this.props.netbankingList)
    const { appliedCouponText: coupon = '' } = ({} = this._getCouponDetails())
    this.state = {
      paymentTab: this._getRetryPaymentMode(),
      selectedCard,
      cardNumber: '',
      CVV: '',
      cardType,
      CVVLength,
      cardExpiryDate: '',
      showBankSearch: false,
      netbanking: '',
      bankList: bankList || [],
      nbLabel: !bankList.length
        ? this.props.labelSelectBank
        : this.props.labelSelectAnotherBank,
      walletType: 'paytm',
      netbankingList: netbankingList || [],
      cardId: !isEmpty(this.props.cardDetails)
        ? this.props.cardDetails[0].id
        : '',
      isOptional: cardType === 'maestro',
      coupon,
      showVerificationCodeInput: false,
      otp: '',
      showCashbackSchedule: false,
      error: {
        expiryDate: false,
        cardNumber: false,
        cvv: false,
        coupon: false
      },
      animate: {
        expiryDate: false,
        cardNumber: false,
        cvv: false,
        coupon: false
      },
      enableSavedCard: ['true']
    }
  }

  componentWillReceiveProps(nextProps) {
    if (
      JSON.stringify(this.props.cardDetails) !==
      JSON.stringify(nextProps.cardDetails)
    ) {
      if (!isEmpty(nextProps.cardDetails)) {
        let selectedCard = nextProps.cardDetails[0]
        selectedCard = `${selectedCard.id}_${selectedCard.type.toLowerCase()}`
        let cardId = nextProps.cardDetails ? nextProps.cardDetails[0].id : ''
        this.setState({ selectedCard, cardId })
      }
    }
    if (
      !isEmpty(nextProps.cardInfo) &&
      JSON.stringify(this.props.cardInfo) !== JSON.stringify(nextProps.cardInfo)
    ) {
      let cardType = path(['cardInfo', 'cardType'], nextProps) || ''
      cardType = cardType.toLowerCase()
      this.setState({ cardType, isOptional: cardType === 'maestro' })
    }
    if (
      isEmpty(this.props.netbankingList) &&
      !isEmpty(nextProps.netbankingList)
    ) {
      const { bankList, netbankingList } = this._createNetbankingIconList(
        nextProps.netbankingList
      )
      this.setState({ bankList, netbankingList })
    }
    if (isEmpty(this.props.paymentMode) && !isEmpty(nextProps.paymentMode)) {
      this.setState({ paymentTab: this._getRetryPaymentMode() })
    }
  }

  componentDidUpdate(prevProps, prevState) {
    const processingFee = this._getProcessingFee()
    const totalAmount = this._calculateTotalAmount(processingFee)
    const isNotDevelopmentFlow =
      process.env.NODE_ENV && process.env.NODE_ENV !== 'development'
    const isFlightsOrHotelsFlow =
      this.props.meta.type === 'flights' || this.props.meta.type === 'hotels'
    const hasCardInfoChanged = this.props.cardInfo !== prevProps.cardInfo
    const hasInsuranceAmountChanged =
      this.props.insuranceAmount !== prevProps.insuranceAmount
    const hasAmountChanged =
      this.props.amount && this.props.amount !== prevProps.amount
    const hasCouponDetailsChanged =
      this.props.couponDetails !== prevProps.couponDetails
    if (
      window &&
      isNotDevelopmentFlow &&
      isFlightsOrHotelsFlow &&
      totalAmount &&
      (hasCardInfoChanged ||
        hasInsuranceAmountChanged ||
        hasAmountChanged ||
        hasCouponDetailsChanged)
    ) {
      this.props.pushDataToGTM({
        totalCost: totalAmount,
        product: this.props.meta.type
      })
    }
  }

  _getRetryPaymentMode = () => {
    const { isRetry, paymentMode } = this.props
    return isRetry && paymentMode ? paymentMode : 'C'
  }

  _createNetbankingIconList = bankingList => {
    if (isEmpty(bankingList)) {
      return { bankList: [], netbankingList: [] }
    }
    const bankList = [
      {
        name: 'Citibank',
        icon: <Citibank />
      },
      {
        name: 'Axis Bank',
        icon: <Axis />
      },
      {
        name: 'HDFC Bank',
        icon: <HDFC />
      },
      {
        name: 'ICICI Bank',
        icon: <ICICI />
      },
      {
        name: 'Kotak Bank',
        icon: <Kotak />
      },
      {
        name: 'State Bank of India',
        icon: <SBI />
      }
    ]
    const localNB = {}
    const nbList = []
    bankList.slice(0).map(bank => {
      localNB[bank.name] = bank
      return bank
    })
    let netbankingList = bankingList
    if (Object.prototype.toString.call(bankingList) === '[object Object]') {
      netbankingList = reduceObjectToArray(
        JSON.parse(JSON.stringify(bankingList))
      )
      netbankingList = netbankingList.slice(0)
    }
    netbankingList.map(bank => {
      const localNBobject = localNB[bank.name]
      if (!isEmpty(localNBobject)) {
        nbList.push({ ...localNBobject, id: bank.id })
      }
      return bank
    })
    return { bankList: nbList, netbankingList }
  }

  _generateNetbankingRadioList = () => {
    const list = []
    this.state.bankList.slice(0).map(bank => {
      list.push(
        <RadioItem className="BankList__item" value={bank.id} key={bank.id}>
          {() => bank.icon}
        </RadioItem>
      )
      return bank
    })
    return list
  }

  _handlePaymentTabChange = value => {
    const { coupon } = this.state
    this.setState({
      paymentTab: value,
      cardNumber: '',
      cardType: '',
      cardExpiryDate: '',
      CVV: '',
      coupon: this.props.useApplyCouponComponent ? coupon : '',
      error: {
        expiryDate: false,
        cardNumber: false,
        cvv: false,
        coupon: false
      },
      animate: {
        expiryDate: false,
        cardNumber: false,
        cvv: false,
        coupon: false
      },
      redeemValue: 0
    })
    if (!this.props.useApplyCouponComponent) {
      this.props.resetCouponDetails()
    }

    if (
      value === 'NB' &&
      this.state.bankList.length === 0 &&
      this.state.netbankingList.length === 1
    ) {
      this._handleNetbankingForOneEntry(this.state.netbankingList[0], 'data')
    }
  }

  _handleCardTap = value => {
    const [cardId, cardType] = value.split('_')
    const state = { selectedCard: value, cardType, CVV: '', cardId }
    if (cardType !== 'unknown') {
      if (cardType === 'amex') {
        state.CVVLength = 4
      } else {
        state.CVVLength = 3
      }
      state.isOptional = cardType === 'maestro'
    }
    this.setState({ ...state })
  }

  _handleCardNumberChange = value => {
    this.setState({ cardNumber: value })
    const rawValue = value.replace(/\s/g, '')
    if (rawValue.length === PAYMENT_CARDINFO_MIN_CHARS) {
      this.props.onCardInput(rawValue)
    } else if (rawValue.length === 0) {
      this.setState({ cardType: '', isOptional: false })
    }
  }

  _onFocusOut = value => {
    this.setState({ cardNumber: value })
    const rawValue = value.replace(/\s/g, '')
    if (rawValue.length >= PAYMENT_CARDINFO_MIN_CHARS) {
      this.props.onCardInput(rawValue)
    }
  }

  _handleCVVChange = event => {
    const { value } = event.currentTarget
    if (value.length <= this.state.CVVLength) {
      this.setState({ CVV: event.currentTarget.value })
    }
  }

  _handleCardTypeChange = cardType => {
    const state = {
      cardType: '',
      CVVLength: 3
    }
    if (cardType !== 'unknown') {
      state.cardType = cardType
      if (cardType === 'amex') {
        state.CVVLength = 4
      }
    }
    state.isOptional = cardType === 'maestro'
    if (this.state.cardType !== cardType) {
      state.CVV = ''
    }
    this.setState({ ...state })
  }

  _handleNetbankingChange = (netbanking, event, selectedFromList = false) => {
    const state = { netbanking }
    if (!selectedFromList) {
      state.nbLabel = this.props.labelSelectAnotherBank
    }
    this.setState({ ...state })
  }

  _handleNetbankingChangeFromList = (netbanking, event) => {
    this.setState({ nbLabel: netbanking.name })
    this._handleNetbankingChange(netbanking.id, event, true)
    this._handleBankSearch()
  }

  _handleNetbankingForOneEntry = (netbanking, event) => {
    this.setState({ nbLabel: netbanking.name })
    this._handleNetbankingChange(netbanking.id, event, true)
  }
  _handleWalletChange = walletType => {
    this.setState({ walletType })
  }

  _handleTWWalletChange = ({ walletType, walletCompany, vpa }) => {
    this.setState({ walletType, walletCompany, vpa })
  }
  _handleBankSearch = () => {
    this.setState(prevState => ({ showBankSearch: !prevState.showBankSearch }))
  }

  _getCardLogo = cardType => {
    if (cardType === 'visa') {
      return Visa
    } else if (cardType === 'mastercard') {
      return Mastercard
    } else if (cardType === 'amex') {
      return Amex
    } else if (cardType === 'maestro') {
      return Maestro
    }
    return Card
  }

  _handleExpiryDateChange = (value, event) => {
    this.setState(prevState => ({
      cardExpiryDate: value,
      error: { ...prevState.error, expiryDate: false },
      animate: { ...prevState.animate, expiryDate: false }
    }))
  }

  _isCardTab = tab => {
    return tab === 'C' || tab === 'RP'
  }

  /* eslint complexity: [ 0 ] */
  _getProcessingFee = () => {
    const { cardInfo } = this.props || {}
    const paymentModeCode = cardInfo.paymentModeCode || 'cc'
    const cardTypeCode = cardInfo.cardTypeCode || '1'
    const { paymentTab, walletType, walletCompany } = this.state
    const { type } = this.props.meta
    let processingFee
    let flatRateFee
    switch (type) {
      case 'flights':
        if (paymentTab === 'NB') {
          processingFee =
            path(['props', 'cardConfig', 'nb', 'df', 'pg', 'f'], this) || 0
        } else if (this._isCardTab(paymentTab)) {
          const cardTypeObject =
            path(['props', 'cardConfig', paymentModeCode], this) || {}
          const cardTypeValue = getCardType(this.state.cardType)
          const cardValue = cardTypeObject[cardTypeValue] ? cardTypeValue : 'df'
          processingFee =
            path(
              ['props', 'cardConfig', paymentModeCode, cardValue, 'pg', 'f'],
              this
            ) || 0
        } else if (paymentTab === 'TW') {
          processingFee =
            path(['props', 'cardConfig', walletType, 'df', 'pg', 'f'], this) ||
            0
        }
        break
      case 'trains':
        if (paymentTab === 'NB') {
          processingFee =
            path(
              ['props', 'netbankingList', this.state.netbanking, 'p'],
              this
            ) || 1.8
        } else if (this._isCardTab(paymentTab)) {
          processingFee =
            path(
              ['props', 'cardConfig', paymentModeCode, cardTypeCode, 'p'],
              this
            ) || 1.8
        }
        break
      case 'hotels':
        if (paymentTab === 'NB') {
          processingFee =
            path(['props', 'cardConfig', 'nb', 'df', 'pg', 'p'], this) || 0

          flatRateFee =
            path(['props', 'cardConfig', 'nb', 'df', 'pg', 'f'], this) || 0
        } else if (paymentTab === 'C') {
          processingFee =
            path(
              ['props', 'cardConfig', paymentModeCode, 'df', 'pg', 'p'],
              this
            ) || 0

          flatRateFee =
            path(
              ['props', 'cardConfig', paymentModeCode, 'df', 'pg', 'f'],
              this
            ) || 0
        }
        break
      default:
        processingFee = ''
        break
    }
    return { processingFee: processingFee, flatRateFee: flatRateFee }
  }

  _validateCVV = () => {
    const { CVV, CVVLength, isOptional } = this.state
    if (!isOptional) {
      const isInvalidCVV = CVV.length !== CVVLength
      return isInvalidCVV
    }
    return false
  }

  _validateCard = () => {
    const { cardNumber, cardExpiryDate, cardType, isOptional, CVV } = this.state
    let cardLength = 16
    let isToastVisible = false
    if (cardType === 'diners') {
      cardLength = 14
    } else if (cardType === 'amex' || cardType === 'american express') {
      cardLength = 15
    }
    const rawCardNumber = cardNumber.replace(/\s/g, '')
    let isInvalidCard
    if (cardType !== 'maestro') {
      isInvalidCard = rawCardNumber.length !== cardLength
    } else {
      isInvalidCard = rawCardNumber.length !== 16 && rawCardNumber.length !== 19
    }
    const isInvalidCVV = this._validateCVV()
    let isInvalidExpiryDate = false
    const currDate = new Date()
    const currMonth = currDate.getMonth() + 1
    const currYear = currDate.getFullYear()
    const { month, year } = getFormattedExpiryDate(cardExpiryDate)
    let error
    if (!isToastVisible && isEmpty(cardNumber)) {
      isToastVisible = true
      this.props.handleValidationError({
        message: this.props.messageCreditCardRequired
      })
    }
    if (!isToastVisible && isInvalidCard && !isEmpty(cardNumber)) {
      isToastVisible = true
      this.props.handleValidationError({
        message: this.props.messageInvalidCreditCard
      })
    }
    if (Number.isInteger(month) && (month < 0 || month > 12) && !isOptional) {
      error = this.props.messageMonthInvalid
      isInvalidExpiryDate = true
    }
    if (!error && !Number.isInteger(year) && !isOptional) {
      error = this.props.messageYearInvalid
      isInvalidExpiryDate = true
    }
    const isCurrentYearAndPastMonth = year === currYear && month < currMonth
    const isPastYear = year < currYear
    if (!error && (isCurrentYearAndPastMonth || isPastYear) && !isOptional) {
      error = this.props.messageDateInvalid
      isInvalidExpiryDate = true
    }
    if (!isToastVisible && isInvalidExpiryDate) {
      isToastVisible = true
      this.props.handleValidationError({
        message: this.props.messageEnterValidExpiryDate
      })
    }
    if (!isToastVisible && isEmpty(CVV) && !isOptional) {
      isToastVisible = true
      this.props.handleValidationError({
        message: this.props.messageCVVRequired
      })
    }
    if (!isToastVisible && !isEmpty(CVV) && isInvalidCVV && !isOptional) {
      isToastVisible = true
      this.props.handleValidationError({
        message: this.props.messageIncorrectCVV
      })
    }
    if (isInvalidCard || isInvalidCVV || isInvalidExpiryDate) {
      this.setState(prevState => ({
        error: {
          ...prevState.error,
          expiryDate: isInvalidExpiryDate,
          cardNumber: isInvalidCard,
          cvv: isInvalidCVV
        },
        animate: {
          ...prevState.error,
          expiryDate: isInvalidExpiryDate,
          cardNumber: isInvalidCard,
          cvv: isInvalidCVV
        }
      }))
      setTimeout(() => {
        this.setState({
          animate: {
            expiryDate: false,
            cardNumber: false,
            cvv: false
          }
        })
      }, 500)
    }
    return !(isInvalidCard || isInvalidCVV || isInvalidExpiryDate)
  }

  _setCVVStatus = isInvalidCVV => {
    this.setState(prevState => ({
      error: {
        ...prevState.error,
        cvv: isInvalidCVV
      },
      animate: {
        ...prevState.error,
        cvv: isInvalidCVV
      }
    }))
    this.props.handleValidationError({
      message: 'Please enter cvv'
    })
    setTimeout(() => {
      this.setState({
        animate: {
          cvv: false
        }
      })
    }, 500)
  }

  _handleMakePayment = event => {
    const {
      paymentTab: paymentMode,
      selectedCard,
      cardId,
      netbanking,
      coupon,
      walletType,
      walletCompany,
      vpa
    } = this.state
    const {
      meta: { type },
      insuranceSelected,
      lengthOfStay,
      international,
      showNoOfDays,
      hotelTravellerInfo
    } = this.props
    let validCardDetails
    let isValidCoupon = false
    let insuranceDetails = {}
    let couponInfo = {}
    let hotelSpecificInfo = {}
    const isHotel = type === 'hotels'
    const isPayAtHotelFlow =
      type === 'hotels' && this.props.paymentOption === 'pah'
    const isPayAtHotelWithCreditCardFlow =
      type === 'hotels' && this.props.paymentOption === 'pahcc'
    const couponDetails =
      type === 'flights'
        ? this.props.couponDetails && this.props.couponDetails.data
        : this.props.couponDetails

    let voucherObj = {}
    let selectedVoucherArr = []
    if (!isEmpty(couponDetails) && !isEmpty(couponDetails.voucher_details)) {
      const { couponCodes, voucher_details: voucherDetail } = couponDetails

      Object.keys(couponCodes).forEach(coupon => {
        voucherDetail.forEach(voucher => {
          if (
            voucher.status === 'S' &&
            voucher.voucher_number === couponCodes[coupon].value
          ) {
            selectedVoucherArr.push({
              voucher: voucher.voucher_number,
              pin: couponCodes[coupon].pin
            })
          }
        })
      })
      selectedVoucherArr.forEach((el, index) => {
        voucherObj['voucher' + (index + 1)] = el.voucher
        voucherObj['pin' + (index + 1)] = el.pin
      })
    }

    if (!isEmpty(couponDetails)) {
      if (!couponDetails.isShukranCard) {
        const { details } = couponDetails
        if (details && details[0].coupon_type !== 'error') {
          isValidCoupon = true
        }
      }

      if (couponDetails.isShukranCard) {
        couponInfo = {
          loyalty_points: String(couponDetails.shukranLoyaltyPoints),
          loyalty_card_no: coupon.toUpperCase(),
          program_name: 'SHUKRAN'
        }
      } else if (!isEmpty(voucherObj)) {
        couponInfo = voucherObj
      } else if (type !== 'trains' && (isValidCoupon || !isEmpty(coupon))) {
        couponInfo = {
          coupon: coupon.toUpperCase(),
          isCheckSavings: true
        }
      }
    }

    if (type === 'flights' && insuranceSelected[0]) {
      insuranceDetails = {
        insurance: true
      }
      if (international && showNoOfDays) {
        insuranceDetails.number_of_days = lengthOfStay
      }
    }
    const displayedValues = {}
    if (paymentMode === 'RP') {
      const { processingFee } = this._getProcessingFee()
      displayedValues.processingFee = processingFee
      displayedValues.totalAmount = this.props.pricingSummary.total || 0
    }
    if (isHotel) {
      hotelSpecificInfo = {
        contact1: hotelTravellerInfo.contactInfo.phone,
        contactType1: 'mobile',
        username: hotelTravellerInfo.contactInfo.email,
        title: hotelTravellerInfo.travellerDetails.title,
        firstName: hotelTravellerInfo.travellerDetails.firstName,
        lastName: hotelTravellerInfo.travellerDetails.lastName,
        insurance: false,
        mobileApp: true,
        product: 'HOTEL',
        responseType: 'json'
      }
      if (!isEmpty(this.props.hotelGst)) {
        hotelSpecificInfo.gst_details = JSON.stringify({
          gst_number: this.props.hotelGst.number,
          gst_holder_name: this.props.hotelGst.name,
          gst_holder_address: this.props.hotelGst.address,
          gst_holder_state_code: this.props.hotelGst.number.substring(0, 2)
        })
      }
      if (isPayAtHotelWithCreditCardFlow) {
        hotelSpecificInfo.original_payment_mode = paymentMode
      }
    }
    if (
      (paymentMode === 'C' && selectedCard === 'new') ||
      paymentMode === 'RP'
    ) {
      validCardDetails = this._validateCard()
      if (!isPayAtHotelFlow && !validCardDetails) {
        return
      }
      const {
        cardNumber,
        CVV,
        cardExpiryDate,
        cardType: _cardType
      } = this.state
      const cardType = getCardType(
        path(['props', 'cardInfo', 'cardType'], this) || _cardType
      )
      const { month, year } = getFormattedExpiryDate(cardExpiryDate)

      this.props.onPayment(
        {
          itineraryId: this.props.itineraryId,
          payment_mode:
            isHotel && (isPayAtHotelFlow || isPayAtHotelWithCreditCardFlow)
              ? 'PP'
              : paymentMode,
          card_number: cardNumber.replace(/\s/g, ''),
          cvv_code: CVV,
          selectedCard,
          card_expiration_month: month,
          card_expiration_year: year,
          card_type: isPayAtHotelFlow ? '0' : cardType,
          ...couponInfo,
          ...insuranceDetails,
          ...hotelSpecificInfo
        },
        displayedValues
      )
    } else if (paymentMode === 'NB') {
      const isValidNB = !isEmpty(netbanking)
      if (!isPayAtHotelFlow && !isValidNB) {
        this.props.handleValidationError({
          message: 'Please select bank'
        })
      } else {
        this.props.onPayment({
          itineraryId: this.props.itineraryId,
          payment_mode:
            isHotel && (isPayAtHotelFlow || isPayAtHotelWithCreditCardFlow)
              ? 'PP'
              : paymentMode,
          issuing_bank: netbanking,
          ...couponInfo,
          ...insuranceDetails,
          ...hotelSpecificInfo
        })
      }
    } else if (paymentMode === 'C' && selectedCard !== 'new') {
      const { CVV, cardType: _cardType } = this.state
      const isInvalidCVV = this._validateCVV()
      if (!isPayAtHotelFlow && isInvalidCVV) {
        this._setCVVStatus(isInvalidCVV)
      } else {
        const cardType = getCardType(
          path(['props', 'cardInfo', 'cardType'], this) || _cardType
        )
        this.props.onPayment({
          itineraryId: this.props.itineraryId,
          payment_mode:
            isHotel && (isPayAtHotelFlow || isPayAtHotelWithCreditCardFlow)
              ? 'PP'
              : paymentMode,
          cvv_code: CVV,
          selectedCard,
          card_type: isPayAtHotelFlow ? '0' : cardType,
          user_card_id: cardId,
          ...couponInfo,
          ...insuranceDetails,
          ...hotelSpecificInfo
        })
      }
    } else if (paymentMode === 'TW') {
      const paymentInput = {
        itineraryId: this.props.itineraryId,
        payment_mode: walletType.toUpperCase(),
        payment_subtype: walletCompany,
        ...couponInfo,
        ...insuranceDetails,
        ...hotelSpecificInfo
      }
      if (walletCompany === 'RAZORPAY') {
        if (!isValidVPA(vpa)) {
          return this.props.handleValidationError({
            message: 'Please enter valid UPI ID'
          })
        }
        paymentInput.vpa = vpa
      }
      this.props.onPayment(paymentInput)
    }
  }

  _handleCardInputsFocus = event => {
    const { name } = event.currentTarget
    this.setState(prevState => ({
      error: {
        ...prevState.error,
        [name]: false
      }
    }))
  }

  _calculateTotalAmount = (processingFee, flatRateFee) => {
    const {
      insuranceAmount,
      meta: { type },
      amount,
      couponDetails
    } = this.props

    const { cardInfo } = this.props || {}
    const paymentModeCode = cardInfo.paymentModeCode || 'cc'
    const cardTypeCode = cardInfo.cardTypeCode || '1'
    const { paymentTab } = this.state

    let processingFeeLimit

    if (paymentTab === 'NB') {
      processingFeeLimit = path(['props', 'cardConfig', 'nb', 'l'], this) || 0
    } else if (paymentTab === 'C') {
      processingFeeLimit =
        path(['props', 'cardConfig', paymentModeCode, 'l'], this) || 0
    }

    let couponAmount = 0
    if (type === 'trains') {
      return Math.round(amount * (1 + (processingFee || 0) / 100))
    } else if (type === 'hotels') {
      if (!isEmpty(couponDetails)) {
        const { details } = couponDetails
        for (let i = 0; i < details.length; i += 1) {
          const couponType = details[i].coupon_type.toLowerCase()
          if (
            couponType === 'cashback' ||
            couponType === 'conditional_cashback'
          ) {
            couponAmount += details[i].amount
          }
        }
      }
      // this.props.pushDataToGTM(Math.round((amount + processingFee + (insuranceAmount *
      //   (this.props.paxCount - this.props.infants))) - couponAmount));
    }
    if (type === 'flights') {
      return Math.round(
        amount +
          (processingFee || 0) +
          insuranceAmount * (this.props.paxCount - this.props.infants) -
          couponAmount
      )
    } else if (type === 'hotels') {
      let total = Math.round(amount * (1 + processingFee / 100) - couponAmount)
      let convenienceFee
      if (flatRateFee) {
        convenienceFee = flatRateFee
        total = Math.round(amount + convenienceFee - couponAmount)
      } else {
        convenienceFee = Math.round(this.props.amount * (processingFee / 100))

        if (processingFeeLimit && convenienceFee > processingFeeLimit) {
          total = Math.round(amount + processingFeeLimit - couponAmount)
        }
      }

      return total
    }
  }

  _getCouponDetails = () => {
    const { type } = this.props.meta
    if (type !== 'trains' && !this.props.useApplyCouponComponent) {
      const { couponDetails } = this.props
      const couponMessages = []
      let couponNote = ''
      let couponError = ''
      let appliedCouponText = ''
      if (!isEmpty(couponDetails)) {
        const { details, wt_details: wtDetails } = couponDetails
        for (let i = 0; i < details.length; i += 1) {
          const couponType = details[i].coupon_type.toLowerCase()
          if (couponType !== 'error') {
            const couponMessage = details[i].coupon_type_msg.replace(
              '<amount>',
              this.props.formatCurrency(details[i].amount)
            )
            couponMessages.push(couponMessage)
          }
          if (!isEmpty(wtDetails)) {
            couponNote = details[i].message
            couponNote = `Note : ${couponNote}`
          } else if (couponType === 'error') {
            couponError = details[i].message
          }
        }
        if (details && details[0] && details[0].coupons.length) {
          appliedCouponText = details[0].coupons.join(',') // support for multiple coupons
        }
      }
      return { couponMessages, couponNote, couponError, appliedCouponText }
    } else if (
      this.props.useApplyCouponComponent &&
      this.props.couponDetails &&
      this.props.couponDetails.data
    ) {
      const { couponDetails: { data: couponData } = {} } = this.props
      if (!couponData.isShukranCard && !isEmpty(couponData)) {
        const { details, wt_details: wtDetails } = couponData
        let appliedCouponText = ''
        if (details && details[0] && details[0].coupons.length) {
          appliedCouponText = details[0].coupons.join(',') // support for multiple coupons
        }
        return { appliedCouponText }
      } else if (couponData.isShukranCard) {
        return { appliedCouponText: couponData.shukranCardNumber }
      }
    }
    return {}
  }

  _handleCouponChange = (value, name) => {
    if (name === 'coupon' && !isEmpty(this.props.couponDetails)) {
      if (this.state[name] !== value) {
        this.props.resetCouponDetails()
      }
    }
    this.setState({ [name]: value.trim() })
  }

  _handleCouponFocus = name => {
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  _setCouponStatus = () => {
    this.setState(prevState => ({
      error: { ...prevState.error, coupon: true },
      animate: { ...prevState.animate, coupon: true }
    }))
    this.props.handleValidationError({
      message: 'Please enter a coupon code'
    })
    setTimeout(() => {
      this.setState({
        animate: {
          coupon: false
        }
      })
    }, 500)
  }

  _validateCoupon = () => {
    const {
      coupon,
      cardNumber,
      cardExpiryDate,
      CVV,
      paymentTab: paymentMode,
      selectedCard
    } = this.state
    let isValidCoupon = true
    if (paymentMode === 'C' && selectedCard === 'new') {
      if (
        isEmpty(coupon) &&
        !isEmpty(cardNumber) &&
        !isEmpty(cardExpiryDate) &&
        !isEmpty(CVV)
      ) {
        this._setCouponStatus()
        isValidCoupon = false
      }
    } else if (paymentMode === 'NB') {
      if (isEmpty(coupon)) {
        this._setCouponStatus()
        isValidCoupon = false
      }
    } else if (paymentMode === 'C' && selectedCard !== 'new') {
      if (isEmpty(coupon) && !isEmpty(CVV)) {
        this._setCouponStatus()
        isValidCoupon = false
      }
    }
    return isValidCoupon
  }

  _applyCoupon = () => {
    const {
      paymentTab: paymentMode,
      selectedCard,
      coupon,
      cardId,
      cardType,
      cardNumber,
      cardExpiryDate,
      CVV,
      netbanking
    } = this.state
    let validCardDetails
    const isHotel = this.props.meta.type === 'hotels'
    const isPayAtHotelFlow = isHotel && this.props.paymentOption === 'pah'
    const isPayAtHotelWithCreditCardFlow =
      isHotel && this.props.paymentOption === 'pahcc'
    if (paymentMode === 'C' && selectedCard === 'new') {
      validCardDetails = this._validateCard()
      if (validCardDetails) {
        if (this._validateCoupon()) {
          this.props.applyCoupon({
            coupon,
            paymentMode,
            cardType: getCardType(cardType),
            cardNumber,
            cardExpiryDate,
            CVV,
            isPayAtHotelFlow,
            isPayAtHotelWithCreditCardFlow
          })
        }
      }
    } else if (paymentMode === 'NB') {
      const isValidNB = !isEmpty(netbanking)
      if (isValidNB) {
        if (this._validateCoupon()) {
          this.props.applyCoupon({
            coupon,
            paymentMode,
            cardType: getCardType(cardType),
            issuing_bank: netbanking,
            isPayAtHotelFlow,
            isPayAtHotelWithCreditCardFlow
          })
        }
      } else {
        this.props.handleValidationError({
          message: 'Please select bank'
        })
      }
    } else if (paymentMode === 'C' && selectedCard !== 'new') {
      const isInvalidCVV = this._validateCVV()
      if (!isInvalidCVV) {
        if (this._validateCoupon()) {
          this.props.applyCoupon({
            coupon,
            paymentMode,
            cardId,
            cardType: getCardType(cardType),
            isPayAtHotelFlow,
            isPayAtHotelWithCreditCardFlow
          })
        }
      } else {
        this._setCVVStatus(isInvalidCVV)
      }
    }
  }

  _showCashbackSchedule = () => {
    this.setState({ showCashbackSchedule: true })
  }

  _hideCashbackSchedule = () => {
    this.setState({ showCashbackSchedule: false })
  }

  _renderSchedule = wtDetails => {
    const {
      message_values: { amount },
      breakup
    } = wtDetails
    let {
      message: subheader,
      message_values: { date }
    } = wtDetails
    date = getformattedDate(date).split(',')
    ;[, date] = date
    subheader = subheader
      .replace('<amount>', this.props.formatCurrency(amount))
      .replace('<date>', date)
    return (
      <Overlay>
        <CashbackModal
          subheader={subheader}
          breakup={breakup}
          onPrimaryAction={this._hideCashbackSchedule}
        />
      </Overlay>
    )
  }

  _handleCouponError = () => {
    this.props.resetCouponDetails()
  }

  _renderCouponError = error => {
    return (
      <Overlay>
        <Modal
          type="error"
          title="Invalid Coupon"
          message={error.replace(/"/g, '')}
          onPrimaryAction={this._handleCouponError}
          primaryButton="Okay"
        />
      </Overlay>
    )
  }

  _calculateConvenienceFee = (processingFee, flatRateFee) => {
    const { cardInfo } = this.props || {}
    const paymentModeCode = cardInfo.paymentModeCode || 'cc'
    const cardTypeCode = cardInfo.cardTypeCode || '1'
    const { paymentTab, walletType } = this.state

    let processingFeeLimit

    if (paymentTab === 'NB') {
      processingFeeLimit = path(['props', 'cardConfig', 'nb', 'l'], this) || 0
    } else if (paymentTab === 'C') {
      processingFeeLimit =
        path(['props', 'cardConfig', paymentModeCode, 'l'], this) || 0
    } else if (paymentTab === 'TW') {
      processingFee =
        path(['props', 'cardConfig', walletType, 'df', 'pg', 'f'], this) || 0
    }

    switch (this.props.meta.type) {
      case 'flights':
        return Math.round(
          processingFee / (this.props.paxCount - this.props.infants)
        )
      case 'hotels':
        let convenienceFee
        if (flatRateFee) {
          convenienceFee = flatRateFee
        } else {
          convenienceFee = Math.round(this.props.amount * (processingFee / 100))

          if (processingFeeLimit && convenienceFee > processingFeeLimit) {
            convenienceFee = processingFeeLimit
          }
        }

        return convenienceFee
      default:
        return 0
    }
  }

  _handleRewardAmount = (rewardInfo, displayedValues) => {
    this.setState({
      redeemValue: rewardInfo.redeemValue
    })
    this.props.rewardCardProps.setRewardData(rewardInfo, displayedValues)
  }

  _sendVerificationCode = () => {
    this.setState({ showVerificationCodeInput: true })
    this.props.sendVerificationCode(
      this.props.itineraryId,
      this.props.hotelTravellerInfo.contactInfo
    )
  }

  _handleOTPChange = (value, name) => {
    this.setState({ [name]: value.trim() })
  }

  _verifyOTP = () => {
    this.props.verifyOTP(
      this.props.itineraryId,
      this.props.hotelTravellerInfo.contactInfo,
      this.state.otp
    )
  }

  _toggleSaveCard = enableSavedCard => {
    if (enableSavedCard[0]) {
      this.setState({
        enableSavedCard
      })
      this.props.saveCardHandler(true)
    } else {
      this.setState({
        enableSavedCard: []
      })
      this.props.saveCardHandler(false)
    }
  }

  render() {
    const { processingFee, flatRateFee } = this._getProcessingFee()
    const CardLogo = this._getCardLogo(this.state.cardType)
    const totalAmount = this._calculateTotalAmount(processingFee, flatRateFee)
    const {
      pricingSummary,
      thirdPartyUPI,
      thirdPartyWallets,
      isUPIRazorPayEnabled
    } = this.props
    const convenienceFee = this._calculateConvenienceFee(
      processingFee,
      flatRateFee
    )
    const flightTotalAmount = (pricingSummary.total || 0) + processingFee
    const flightTotalAmountDisplay = Math.max(
      flightTotalAmount - (this.state.redeemValue || 0),
      0
    )
    const cardNumberClassList = classNames(
      'h-48 flex flex-middle flex-between flex-center',
      {
        'has-error': this.state.error.cardNumber
      }
    )
    const expiryDateClassList = classNames(
      'h-48 flex flex-middle flex-between flex-center',
      {
        'has-error': this.state.error.expiryDate
      }
    )
    const cvvClassList = classNames(
      'h-48 flex flex-middle flex-between flex-center',
      {
        'has-error': this.state.error.cvv
      }
    )
    const {
      Itinerary,
      meta: { type }
    } = this.props
    const optionalListClassName = this.state.isOptional
      ? 'mt-10 flex'
      : 'bt-0 flex'
    const couponClassName = classNames('h-48 flex flex-middle', {
      'has-error': this.state.error.coupon
    })
    const creditCardFieldClassName = classNames('input input--text fs-15', {
      'ta-r': this.props.isRTL
    })
    const { couponMessages, couponNote, couponError } =
      this._getCouponDetails() || {}
    const wtDetails = this.state.showCashbackSchedule
      ? path(['couponDetails', 'wt_details'], this.props)
      : {}
    let pahConfirmationDate =
      this.props.paymentOption === 'pah'
        ? format(parseInt(this.props.pahConfirmationDate, 10), 'ddd, D MMM')
        : ''
    ;[, pahConfirmationDate] = pahConfirmationDate.split(',')
    const isHotel = this.props.meta.type === 'hotels'
    const isPayAtHotelFlow = this.props.paymentOption === 'pah'
    const isPayAtHotelWithCreditCardFlow = this.props.paymentOption === 'pahcc'
    const isThirdPartyWalletsEnabled = !!(
      thirdPartyUPI.length || thirdPartyWallets.length
    )
    const applyCouponText = this.props.applyCouponText
      ? this.props.applyCouponText
      : this.props.textApplyCouponCode

    const enterCouponCodePlaceholder = this.props.enterCouponCodePlaceholder
      ? this.props.enterCouponCodePlaceholder
      : this.props.textEnterCouponCode

    return (
      <div>
        {Itinerary}
        <If condition={isHotel && isPayAtHotelFlow}>
          <Choose>
            <When condition={this.props.otpVerificationSuccessful}>
              <p className="fs-12 c-black-70 mb-10">Awesome! Book now</p>
              <p className="fs-12 c-black-40 mb-10">
                Your room will be booked to guarantee your stay
              </p>
              <p className="fs-12 c-black-70 mb-10">Confirm Later</p>
              <p className="fs-12 c-black-40 mb-10">
                We'll call you on {pahConfirmationDate} to confirm your travel
                plans
              </p>
              <p className="fs-12 c-black-70 mb-10">Pay@Hotel</p>
              <p className="fs-12 c-black-40">
                Make a payment of{' '}
                {formatCurrency(
                  this.props.hotelRateDetails.payAtHotel.total.replace(',', '')
                )}{' '}
                at the hotel
              </p>
            </When>
            <Otherwise>
              <p className="fs-12 c-black-70 mb-10">
                To make a booking, We need to verify your mobile
              </p>
              <p className="fs-12 c-black-40">
                We will send a verification code to{' '}
                {this.props.hotelTravellerInfo.contactInfo.phone}
              </p>
              <If condition={this.state.showVerificationCodeInput}>
                <Input
                  type="number"
                  inputClassName="fs-15 c-black-90"
                  wrapper={ListItem}
                  wrapperClassName="h-48 flex flex-middle"
                  placeholder="Verification code"
                  value={this.state.otp}
                  name="otp"
                  onChange={this._handleOTPChange}
                  actionLabel="Verify"
                  actionClassName="fs-15 c-blue"
                  onActionClick={this._verifyOTP}
                />
              </If>
              <If condition={!this.state.showVerificationCodeInput}>
                <p>
                  <a onClick={this._sendVerificationCode}>
                    <span className="fs-13 c-blue mr-15">TAP TO VERIFY</span>
                  </a>
                </p>
              </If>
            </Otherwise>
          </Choose>
        </If>
        <If condition={!isHotel || (isHotel && !isPayAtHotelFlow)}>
          <SectionHeader>
            {isPayAtHotelWithCreditCardFlow
              ? 'CARD VERIFICATION'
              : this.props.labelPayment}
          </SectionHeader>
          <If
            condition={
              !isEmpty(couponError) && !this.props.useApplyCouponComponent
            }
          >
            {this._renderCouponError(couponError)}
          </If>
          <Tabs
            value={isPayAtHotelWithCreditCardFlow ? 'C' : this.state.paymentTab}
            onChange={this._handlePaymentTabChange}
            className="mb-10"
          >
            <Tab label={this.props.labelPaymentHead} value="C" className="ml-5">
              <If condition={!isEmpty(this.props.cardDetails)}>
                <RadioList
                  className="RadioList mt-10"
                  value={this.state.selectedCard}
                  onChange={this._handleCardTap}
                >
                  {this.props.cardDetails.map(cardInfo => {
                    const Logo = this._getCardLogo(cardInfo.type.toLowerCase())
                    const cardNumber = cardInfo.number
                      .replace(/[^\dA-Z]/g, '')
                      .replace(/(.{4})/g, '$1 ')
                      .trim()
                    return (
                      <RadioItem
                        className="RadioList__item h-48 flex flex-middle"
                        value={`${cardInfo.id}_${cardInfo.type.toLowerCase()}`}
                        isRTL={this.props.isRTL}
                      >
                        {selected => (
                          <p className="flex flex-middle">
                            <Logo
                              width="27"
                              height="23"
                              className="mr-10 ml-10"
                            />
                            <span dir="ltr">{cardNumber}</span>
                          </p>
                        )}
                      </RadioItem>
                    )
                  })}
                  <RadioItem
                    className="RadioList__item h-48 flex flex-middle"
                    value="new"
                    isRTL={this.props.isRTL}
                  >
                    {selected => (
                      <p className="flex flex-middle">
                        <Card width="27" height="23" className="mr-10 ml-10" />
                        {this.props.textAddNewCard}
                      </p>
                    )}
                  </RadioItem>
                </RadioList>
              </If>
              <If
                condition={
                  !isEmpty(this.props.cardDetails) &&
                  this.state.selectedCard !== 'new'
                }
              >
                <If condition={this.state.isOptional}>
                  <SectionHelper>
                    Expiry date and CVV are optional
                  </SectionHelper>
                </If>
                <List className="mt-10">
                  <ListItem className={cvvClassList}>
                    <Shake animate={this.state.animate.cvv}>
                      <CVVInput
                        value={this.state.CVV}
                        name="cvv"
                        maxLength={this.state.CVVLength}
                        onChange={this._handleCVVChange}
                        onFocus={this._handleCardInputsFocus}
                        placeholder={this.props.textEnterCVV}
                        autoComplete="cc-csc"
                      />
                    </Shake>
                  </ListItem>
                </List>
              </If>
              <If
                condition={
                  isEmpty(this.props.cardDetails) ||
                  this.state.selectedCard === 'new'
                }
              >
                <CreditCard
                  CardLogo={CardLogo}
                  animate={this.state.animate}
                  error={this.state.error}
                  validateCard={this._validateCard}
                  total={flightTotalAmount}
                  handleValidationError={this.props.handleValidationError}
                  isRTL={this.props.isRTL}
                  cardNumberProps={{
                    value: this.state.cardNumber,
                    options: {
                      creditCard: true,
                      creditCardStrictMode: true,
                      onCreditCardTypeChanged: this._handleCardTypeChange
                    },
                    placeholder: this.props.placeHolderCardNum,
                    onChange: this._handleCardNumberChange,
                    onFocus: this._handleCardInputsFocus,
                    onFocusOut: this._onFocusOut
                  }}
                  expiryDateProps={{
                    value: this.state.cardExpiryDate,
                    onChange: this._handleExpiryDateChange,
                    onFocus: this._handleCardInputsFocus,
                    options: {
                      date: true,
                      datePattern: ['m', 'y']
                    }
                  }}
                  cvvProps={{
                    value: this.state.CVV,
                    maxLength: this.state.CVVLength,
                    onChange: this._handleCVVChange,
                    onFocus: this._handleCardInputsFocus
                  }}
                  textCCExpiryPlaceholder={this.props.textCCExpiryPlaceholder}
                />

                <If
                  condition={
                    this.props.isLoggedIn && this.props.saveCardEnableFlag
                  }
                >
                  <SaveCard
                    enableSavedCard={this.state.enableSavedCard}
                    toggleSaveCard={this._toggleSaveCard}
                    saveCardText={this.props.saveCardText}
                    neverSaveCVVText={this.props.neverSaveCVVText}
                  />
                </If>
              </If>
            </Tab>
            <If
              condition={
                !isHotel ||
                (isHotel &&
                  !isPayAtHotelFlow &&
                  !isPayAtHotelWithCreditCardFlow)
              }
            >
              <Choose>
                <When
                  condition={
                    this.state.bankList.length === 0 &&
                    this.state.netbankingList.length === 1
                  }
                >
                  <Tab label={this.props.labelPaymentNetBankingHead} value="NB">
                    <List className="mt-10">
                      <ListItem className="h-48 flex flex-middle flex-between">
                        <p className="fs-15 c-blue fw-400">
                          {this.state.nbLabel.toUpperCase()}
                        </p>
                        <CheckedIcon fill="#36c" width="20" height="20" />
                      </ListItem>
                    </List>
                  </Tab>
                </When>
                <When condition={this.state.bankList.length > 1}>
                  <Tab label={this.props.labelPaymentNetBankingHead} value="NB">
                    <List className="mt-10">
                      <If condition={this.state.bankList.length}>
                        <ListItem>
                          <RadioList
                            className="BankList bt-0"
                            onChange={this._handleNetbankingChange}
                            value={this.state.netbanking}
                          >
                            {this._generateNetbankingRadioList()}
                          </RadioList>
                        </ListItem>
                      </If>
                      <ListItem
                        className="h-48 flex flex-middle flex-between"
                        enableRipple={true}
                        onClick={this._handleBankSearch}
                      >
                        <p className="fs-15 c-blue fw-400">
                          {this.state.nbLabel}
                        </p>
                        <RightChev fill="#D4D4D4" />
                      </ListItem>
                    </List>
                  </Tab>
                </When>
              </Choose>

              <If condition={isThirdPartyWalletsEnabled}>
                <Tab label="Wallets/UPI" value="TW">
                  <Wallets
                    onWalletChange={this._handleTWWalletChange}
                    thirdPartyUPI={thirdPartyUPI}
                    thirdPartyWallets={thirdPartyWallets}
                    selectedWallet={this.state.walletCompany}
                  />
                  <If condition={isUPIRazorPayEnabled}>
                    <UPI
                      onWalletChange={this._handleTWWalletChange}
                      thirdPartyUPI={thirdPartyUPI}
                      thirdPartyWallets={thirdPartyWallets}
                      selectedWallet={this.state.walletCompany}
                      vpa={this.state.vpa}
                    />
                  </If>
                </Tab>
              </If>
              <If condition={this.props.rewardCardProps.rewardPointTrackId}>
                <Tab label="ADCB TOUCHPOINTS" value="RP">
                  <RewardCard
                    isRTL={this.props.isRTL}
                    CardLogo={CardLogo}
                    animate={this.state.animate}
                    error={this.state.error}
                    validateCard={this._validateCard}
                    total={flightTotalAmount}
                    handleValidationError={this.props.handleValidationError}
                    cardNumberProps={{
                      value: this.state.cardNumber,
                      options: {
                        creditCard: true,
                        creditCardStrictMode: true,
                        onCreditCardTypeChanged: this._handleCardTypeChange
                      },
                      placeholder: `ADCB ${this.props.placeHolderCardNum}`,
                      onChange: this._handleCardNumberChange,
                      onFocus: this._handleCardInputsFocus,
                      onFocusOut: this._onFocusOut
                    }}
                    expiryDateProps={{
                      value: this.state.cardExpiryDate,
                      onChange: this._handleExpiryDateChange,
                      onFocus: this._handleCardInputsFocus,
                      options: {
                        date: true,
                        datePattern: ['m', 'y']
                      }
                    }}
                    cvvProps={{
                      value: this.state.CVV,
                      maxLength: this.state.CVVLength,
                      onChange: this._handleCVVChange,
                      onFocus: this._handleCardInputsFocus
                    }}
                    textCCExpiryPlaceholder={this.props.textCCExpiryPlaceholder}
                    {...this.props.rewardCardProps}
                    setRewardData={this._handleRewardAmount}
                  />
                </Tab>
              </If>
              <If condition={this.props.enableWallet}>
                <Tab label="Wallet" value="wallet">
                  <RadioList
                    className="RadioList"
                    value={this.state.walletType}
                    onChange={this._handleWalletChange}
                  >
                    <RadioItem
                      className="RadioList__item h-48 flex flex-middle"
                      value="paytm"
                    >
                      {() => (
                        <img
                          src={Paytm}
                          alt="Card"
                          width={63}
                          className="mr-10"
                        />
                      )}
                    </RadioItem>
                    <RadioItem
                      className="RadioList__item h-48 flex flex-middle"
                      value="payu"
                    >
                      {() => (
                        <img
                          src={PayU}
                          alt="Card"
                          width={96}
                          className="mr-10"
                        />
                      )}
                    </RadioItem>
                    <RadioItem
                      className="RadioList__item h-48 flex flex-middle"
                      value="masterpass"
                    >
                      {() => (
                        <img
                          src={Masterpass}
                          alt="Card"
                          width={114}
                          className="mr-10"
                        />
                      )}
                    </RadioItem>
                  </RadioList>
                </Tab>
              </If>
            </If>
          </Tabs>
          <Choose>
            <When condition={this.props.useApplyCouponComponent}>
              <ApplyCoupon
                formatCurrency={this.props.formatCurrency}
                isShukranEnabled={this.props.isShukranEnabled}
                shukranCardNumber={this.props.shukranCardNumber}
                shukranPlaceholder={this.props.shukranPlaceholder}
                shukranCardSuccessNote={this.props.shukranCardSuccessNote}
                fareKey={this.props.fareKey}
                applyCoupon={this.props.applyCoupon}
                resetCouponDetails={this.props.resetCouponDetails}
                updateCouponDetails={this.props.updateCouponDetails}
                couponDetails={path(['data'], this.props.couponDetails)}
                isCouponLoading={path(['isLoading'], this.props.couponDetails)}
                handleValidationError={this.props.handleValidationError}
                onCouponChange={this.props.onCouponChange}
                textHangOn={this.props.textHangOn}
                textCheckingSavings={this.props.textCheckingSavings}
                textCashbackSchedule={this.props.textCashbackSchedule}
                textInvalidCoupon={this.props.textInvalidCoupon}
                textApplyCouponCode={applyCouponText}
                textEnterCouponCode={enterCouponCodePlaceholder}
                textValidateEnterCouponCode={
                  this.props.textValidateEnterCouponCode
                }
                textOkay={this.props.textOkay}
                textClose={this.props.textClose}
                textCouponApplied={this.props.textCouponApplied}
                textNote={this.props.textNote}
                textApplyButton={this.props.textApplyButton}
                isRTL={this.props.isRTL}
                gvPinErrorMessage={this.props.gvPinErrorMessage}
                showPromoMsg={this.props.showPromoMsg}
                totalAmount={flightTotalAmount}
                getMaxGiftVoucher={this.props.getMaxGiftVoucher}
                giftVoucherEnable={this.props.giftVoucherEnable}
              />
            </When>
          </Choose>

          <div className="ta-c mt-30">
            <Choose>
              <When condition={this.props.meta.type === 'flights'}>
                <p className="fs-13 mb-10">
                  {this.props.labelTotalBookingAmount}
                </p>
                <p className="fs-30 fw-300 mb-10">
                  {/* {this.props.formatCurrency(flightTotalAmountDisplay)} */}
                  <Countup
                    // className={classList}
                    start={10}
                    end={flightTotalAmountDisplay}
                    duration={0.75}
                    useGrouping={true}
                    separator={','}
                    useEasing={true}
                    formattingFn={this.props.formatCurrency}
                    decimals={this.props.decimals}
                  />
                </p>
              </When>
              <When
                condition={
                  !isHotel ||
                  (isHotel &&
                    !isPayAtHotelFlow &&
                    !isPayAtHotelWithCreditCardFlow)
                }
              >
                <p className="fs-13 mb-10">
                  {this.props.labelTotalBookingAmount}
                </p>
                <p className="fs-30 fw-300 mb-10">
                  {formatCurrency(totalAmount)}
                </p>
              </When>
            </Choose>
            <If condition={type === 'flights'}>
              <div>
                <If condition={convenienceFee > 0}>
                  <p className="fs-12 c-black-70 mb-10">
                    {this.props.textConvFee.replace(
                      '{convFee}',
                      this.props.formatCurrency(convenienceFee)
                    )}
                  </p>
                </If>
                <If condition={this.props.showUtmNote === true}>
                  <p className="fs-12 c-black-70 mb-10">
                    {this.props.utmCurrNote.replace(
                      '{orgFare}',
                      this.props.formatCurrency(totalAmount, null, true)
                    )}
                  </p>
                </If>
                <p className="fs-12 c-black-40">
                  {this.props.textAcceptTerms}
                  <a
                    href={this.props.termsAndConditionLink}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <span className="fs-13 c-blue">
                      {' '}
                      {this.props.textTermsAndCondition}
                    </span>
                  </a>
                </p>
              </div>
            </If>
            <If
              condition={
                isHotel && !isPayAtHotelFlow && !isPayAtHotelWithCreditCardFlow
              }
            >
              <div>
                <If condition={convenienceFee > 0}>
                  <p className="fs-12 c-black-70 mb-10">
                    A convenience fee of {formatCurrency(convenienceFee)} is
                    applicable on this booking
                  </p>
                </If>
                <p className="fs-12 c-black-40">
                  By proceeding, you accept the
                  <a
                    href={HOTEL_BOOKING_POLICY_URL(this.props.itineraryId)}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <span className="fs-13 c-blue mr-15"> T&C</span>
                  </a>
                </p>
              </div>
            </If>
            <If condition={this.props.meta.type === 'trains'}>
              <p className="fs-12 c-black-40">
                A processing fee of {processingFee}% and GST charges are
                included
              </p>
            </If>
          </div>
        </If>

        <If
          condition={
            !isHotel ||
            (isHotel && !isPayAtHotelFlow && !isPayAtHotelWithCreditCardFlow)
          }
        >
          <div className="pl-16 pr-16 mt-10 mb-30">
            <Button onClick={this._handleMakePayment}>
              {this.props.labelMakePaymentButton}
            </Button>
          </div>
        </If>
        <If
          condition={
            isHotel &&
            (isPayAtHotelWithCreditCardFlow ||
              (isPayAtHotelFlow && this.props.otpVerificationSuccessful))
          }
        >
          <div className="pl-16 pr-16 mt-10 mb-30">
            <Button onClick={this._handleMakePayment}>Confirm booking</Button>
          </div>
        </If>
        <BankSearch
          isOpen={this.state.showBankSearch}
          title={this.props.labelPaymentNetBankingHead}
          onClose={this._handleBankSearch}
          onSelect={this._handleNetbankingChangeFromList}
          data={this.state.netbankingList}
        />
      </div>
    )
  }
}

Payment.propTypes = {
  amount: PropTypes.number,
  isShukranEnabled: PropTypes.bool,
  shukranCardNumber: PropTypes.string,
  shukranLoyaltyPoints: PropTypes.string,
  fareKey: PropTypes.string,
  shukranPlaceholder: PropTypes.string,
  gvPinErrorMessage: PropTypes.string,
  shukranCardSuccessNote: PropTypes.string,
  netbankingList: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.objectOf(PropTypes.object)
  ]),
  enableWallet: PropTypes.bool,
  onCardInput: PropTypes.func.isRequired,
  formatCurrency: PropTypes.func,
  showUtmNote: PropTypes.bool,
  cardInfo: PropTypes.objectOf(
    PropTypes.oneOfType(
      //eslint-disable-line
      [PropTypes.bool, PropTypes.string, PropTypes.number]
    )
  ),
  cardConfig: PropTypes.objectOf(PropTypes.object), // eslint-disable-line
  onPayment: PropTypes.func.isRequired,
  itineraryId: PropTypes.string,
  isRetry: PropTypes.bool,
  paymentMode: PropTypes.string,
  meta: PropTypes.objectOf(PropTypes.string),
  paxCount: PropTypes.number,
  infants: PropTypes.number,
  cardDetails: PropTypes.arrayOf(PropTypes.any),
  Itinerary: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node
  ]),
  handleValidationError: PropTypes.func,
  applyCoupon: PropTypes.func.isRequired,
  resetCouponDetails: PropTypes.func.isRequired,
  couponDetails: PropTypes.objectOf(PropTypes.any),
  insuranceAmount: PropTypes.oneOfType(PropTypes.number, PropTypes.string),
  insuranceSelected: PropTypes.arrayOf(PropTypes.any),
  lengthOfStay: PropTypes.oneOfType(PropTypes.number, PropTypes.string),
  international: PropTypes.bool,
  showNoOfDays: PropTypes.bool,
  pushDataToGTM: PropTypes.func,
  hotelTravellerInfo: PropTypes.objectOf(PropTypes.any),
  pricingSummary: PropTypes.objectOf(PropTypes.any),
  isRTL: PropTypes.bool,
  showPromoMsg: PropTypes.bool,
  otpVerificationSuccessful: PropTypes.bool,
  useApplyCouponComponent: PropTypes.bool,
  placeHolderCardNum: PropTypes.string,
  placeHolderCVV: PropTypes.string,
  labelMakePaymentButton: PropTypes.string,
  labelTotalBookingAmount: PropTypes.string,
  messageInvalidCreditCard: PropTypes.string,
  messageCreditCardRequired: PropTypes.string,
  messageMonthInvalid: PropTypes.string,
  messageYearInvalid: PropTypes.string,
  messageDateInvalid: PropTypes.string,
  messageCVVRequired: PropTypes.string,
  messageEnterValidExpiryDate: PropTypes.string,
  messageIncorrectCVV: PropTypes.string,
  textHangOn: PropTypes.string,
  textCheckingSavings: PropTypes.string,
  textCashbackSchedule: PropTypes.string,
  textApplyCouponCode: PropTypes.string,
  textEnterCouponCode: PropTypes.string,
  textInvalidCoupon: PropTypes.string,
  textValidateEnterCouponCode: PropTypes.string,
  textOkay: PropTypes.string,
  textClose: PropTypes.string,
  textCouponApplied: PropTypes.string,
  textNote: PropTypes.string,
  textApplyButton: PropTypes.string,
  labelPaymentHead: PropTypes.string,
  labelPayment: PropTypes.string,
  textConvFee: PropTypes.string,
  utmCurrNote: PropTypes.string,
  textAddNewCard: PropTypes.string,
  textEnterCVV: PropTypes.string,
  textAcceptTerms: PropTypes.string,
  textTermsAndCondition: PropTypes.string,
  textCCExpiryPlaceholder: PropTypes.string,
  termsAndConditionLink: PropTypes.string,
  labelPaymentNetBankingHead: PropTypes.string,
  saveCardText: PropTypes.string,
  neverSaveCVVText: PropTypes.string,
  thirdPartyWallets: PropTypes.arrayOf(PropTypes.object),
  thirdPartyUPI: PropTypes.arrayOf(PropTypes.object),
  rewardCardProps: PropTypes.objectOf(PropTypes.any),
  isUPIRazorPayEnabled: PropTypes.bool,
  updateCouponDetails: PropTypes.func.isRequired,
  applyCouponText: PropTypes.string,
  enterCouponCodePlaceholder: PropTypes.string,
  getMaxGiftVoucher: PropTypes.number,
  giftVoucherEnable: PropTypes.bool,
  saveCardHandler: PropTypes.func,
  isLoggedIn: PropTypes.bool,
  saveCardEnableFlag: PropTypes.bool
}

Payment.defaultProps = {
  formatCurrency,
  isShukranEnabled: false,
  shukranCardNumber: '',
  shukranLoyaltyPoints: '',
  isLoggedIn: false,
  saveCardHandler: () => {},
  shukranPlaceholder: 'SHUKRAN',
  gvPinErrorMessage: 'Enter Pin',
  fareKey: '',
  shukranCardSuccessNote:
    'Great! You  will earn {shukranSuccess} shukran points on this booking',
  showUtmNote: false,
  amount: 481,
  netbankingList: {},
  thirdPartyWallets: [],
  thirdPartyUPI: [],
  isUPIRazorPayEnabled: false,
  enableWallet: false,
  cardInfo: {
    paymentModeCode: 'cc',
    cardTypeCode: '1'
  },
  cardConfig: {},
  itineraryId: '',
  paymentMode: null,
  isRetry: false,
  meta: {
    type: 'trains'
  },
  paxCount: 1,
  infants: 0,
  cardDetails: [],
  Itinerary: null,
  handleValidationError: () => {},
  couponDetails: {},
  insuranceAmount: 0,
  insuranceSelected: [],
  lengthOfStay: 1,
  international: false,
  showNoOfDays: false,
  pushDataToGTM: () => {},
  hotelTravellerInfo: {},
  pricingSummary: {},
  otpVerificationSuccessful: false,
  useApplyCouponComponent: false,
  isRTL: false,
  showPromoMsg: true,
  saveCardEnableFlag: false,
  labelMakePaymentButton: 'Make payment',
  messageCreditCardRequired: 'Card number is required',
  messageInvalidCreditCard: 'Invalid card number',
  labelTotalBookingAmount: 'Total booking amount',
  labelPayment: 'Payment',
  messageMonthInvalid: 'month is invalid',
  messageYearInvalid: 'year is invalid',
  messageDateInvalid: 'date is invalid',
  messageCVVRequired: 'CVV is required',
  messageEnterValidExpiryDate: 'Please enter valid expiry date',
  messageIncorrectCVV: 'Incorrect cvv',
  placeHolderCardNum: 'Card No.',
  placeHolderCVV: 'CVV',
  labelPaymentHead: 'Debit/Credit Card',
  labelPayment: 'Payment',
  textConvFee: '{convFee} per traveller included as convenience fee',
  utmCurrNote:
    ' Note - You will see a charge of {orgFare} on your bank/card statement',
  textAddNewCard: 'Add New Debit / Credit Card',
  textEnterCVV: 'Enter CVV',
  textAcceptTerms: 'By proceeding, you accept the',
  textTermsAndCondition: 'T&C',
  termsAndConditionLink: '/terms/',
  textCCExpiryPlaceholder: 'MM/YY',
  labelPaymentNetBankingHead: 'Netbanking',
  labelSelectBank: 'Select bank',
  labelSelectAnotherBank: 'Select another bank',
  getMaxGiftVoucher: DEFAULT_GIFT_VOUCHER_COUNT,
  giftVoucherEnable: false,
  rewardCardProps: {},
  saveCardText: 'Save card for faster bookings',
  neverSaveCVVText: 'We never save your CVV'
}

export default Payment
