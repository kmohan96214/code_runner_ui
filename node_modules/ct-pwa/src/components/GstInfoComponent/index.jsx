import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'

import { List, ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'
import { Shake } from 'Lib/Animate'

class GstInfo extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      animate: {
        number: false,
        name: false,
        address: false
      },
      error: {
        number: false,
        name: false,
        address: false
      }
    }
  }

  componentWillReceiveProps(nextProps) {
    const state = {
      animate: {},
      error: {}
    }
    if (
      JSON.stringify(this.props.validationState) !==
      JSON.stringify(nextProps.validationState)
    ) {
      state.animate = nextProps.validationState.animate
      state.error = nextProps.validationState.error
    }
    this.setState({ ...state })
  }

  _handleInputChange = (value, name) => {
    this.props.setTravellersGst(
      { ...this.props.gst, [name]: value.trim() },
      this.props.itineraryId
    )
  }
  _handleInputFocus = (element, name) => {
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }
  render() {
    const { error, animate } = this.state
    const {
      gst: { number = '', name = '', address = '' }
    } = this.props
    return (
      <form>
        <List>
          <Shake animate={animate.number}>
            <Input
              type="text"
              name="number"
              label="GST No."
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={number}
              onChange={this._handleInputChange}
              hasError={error.number}
              onFocus={this._handleInputFocus}
              maxlength="15"
            />
          </Shake>
          <Shake animate={animate.name}>
            <Input
              type="text"
              name="name"
              label="Holder name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={name}
              onChange={this._handleInputChange}
              hasError={error.name}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={animate.address}>
            <Input
              type="text"
              name="address"
              label="Holder address"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={address}
              onChange={this._handleInputChange}
              hasError={error.address}
              onFocus={this._handleInputFocus}
            />
          </Shake>
        </List>
      </form>
    )
  }
}
GstInfo.propTypes = {
  setTravellersGst: PropTypes.func,
  gst: PropTypes.shape({
    number: PropTypes.string,
    name: PropTypes.string,
    address: PropTypes.string,
    error: PropTypes.string
  }),
  validationState: PropTypes.objectOf(PropTypes.any),
  itineraryId: PropTypes.string
}
GstInfo.defaultProps = {
  gst: {
    number: '',
    name: '',
    address: '',
    error: ''
  },
  setTravellersGst: () => {},
  validationState: {},
  itineraryId: ''
}
export default GstInfo
