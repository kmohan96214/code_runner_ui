import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'

import { List, ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'
import Select from 'Lib/Form/NativeSelect'
import { Shake } from 'Lib/Animate'
import Button from 'Lib/Buttons'

import { isEmpty } from 'Utils'

class TravellerDetailsComponent extends PureComponent {
  constructor(props) {
    super(props)
    const { travellerDetails } = this.props
    this.state = {
      title: travellerDetails ? travellerDetails.title : '',
      firstName: travellerDetails ? travellerDetails.firstName : '',
      lastName: travellerDetails ? travellerDetails.lastName : '',
      age: travellerDetails ? parseInt(travellerDetails.age, 10) : '',
      berth: travellerDetails ? travellerDetails.berth : 'NC',
      meal: travellerDetails ? travellerDetails.meal : '',
      animate: {
        title: false,
        firstName: false,
        lastName: false,
        age: false,
        meal: false
      },
      error: {
        title: false,
        firstName: false,
        lastName: false,
        age: false,
        meal: false
      }
    }
  }

  componentWillReceiveProps(nextProps) {
    if (
      isEmpty(this.props.travellerDetails) &&
      !isEmpty(nextProps.travellerDetails)
    ) {
      const nextTravellersDetails = nextProps.travellerDetails
      this.setState({
        title: nextTravellersDetails.title,
        firstName: nextTravellersDetails.firstName,
        lastName: nextTravellersDetails.lastName,
        age: nextTravellersDetails.age,
        berth: nextTravellersDetails.berth,
        meal: nextTravellersDetails.meal
      })
    }
  }

  _handleInputChange = (value, name) => {
    this.setState({ [name]: value })
    if (name === 'title' || name === 'meal') {
      if (this.state.error[name]) {
        this.setState(prevState => ({
          error: { ...prevState.error, [name]: !prevState.error[name] }
        }))
      }
    }
  }

  _handleInputFocus = (element, name) => {
    element.scrollIntoView()
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  /* eslint complexity: [ 0 ] */
  _validateTravellerData = event => {
    const namePattern = /^([a-zA-Z]){1,}$/
    const [type, index] = this.props.id.trim().split('-')
    const { title, firstName, lastName, age, meal } = this.state
    const totalNameLength = firstName.length + lastName.length
    const state = { animate: {}, error: {} }
    let isToastVisible = false
    const isValidAge = () => {
      if (
        (type === 'adults' && age >= 12 && age <= 125) ||
        (type === 'children' && age >= 5 && age <= 11) ||
        (type === 'srMen' && age >= 60 && age <= 125) ||
        (type === 'srWomen' && age >= 58 && age <= 125)
      ) {
        return true
      }
      return false
    }
    if (isEmpty(title)) {
      state.animate.title = true
      state.error.title = true
    }
    if (!isEmpty(this.props.mealPrefList) && isEmpty(meal)) {
      state.animate.meal = true
      state.error.meal = true
    }
    if (
      isEmpty(firstName) ||
      !firstName.match(namePattern) ||
      totalNameLength > 15
    ) {
      state.animate.firstName = true
      state.error.firstName = true
      if (
        !isToastVisible &&
        !isEmpty(firstName) &&
        !firstName.match(namePattern)
      ) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'First Name can contain only alphabets'
        })
      }
    }
    if (
      isEmpty(lastName) ||
      !lastName.match(namePattern) ||
      totalNameLength > 15
    ) {
      state.animate.lastName = true
      state.error.lastName = true
      if (
        !isToastVisible &&
        !isEmpty(lastName) &&
        !lastName.match(namePattern)
      ) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'Last Name can contain only alphabets'
        })
      }
    }
    if (!isToastVisible && totalNameLength > 15) {
      isToastVisible = true
      this.props.handleValidationError({
        message:
          'First Name and last name together cannot contain more than 15 characters'
      })
    }
    if (isEmpty(age) || !isValidAge()) {
      state.animate.age = true
      state.error.age = true
      if (!isToastVisible && !isEmpty(age)) {
        this.props.handleValidationError({
          message: 'Please confirm your age'
        })
      }
    }
    if (!isEmpty(state.animate)) {
      this.setState({ ...state })
      setTimeout(() => {
        this.setState({
          animate: {
            title: false,
            firstName: false,
            lastName: false,
            age: false,
            meal: false
          }
        })
      }, 500)
    } else {
      this.props.handleTravellersDetails(type, index, this.state)
    }
  }

  _getTitleOptions = () => {
    const [travellerType] = this.props.id.trim().split('-')
    switch (travellerType) {
      case 'children':
        return [{ value: 'Mstr' }, { value: 'Miss' }]
      case 'srMen':
        return [{ value: 'Mr' }]
      case 'srWomen':
        return [{ value: 'Mrs' }, { value: 'Miss' }]
      default:
        return [{ value: 'Mrs' }, { value: 'Miss' }, { value: 'Mr' }]
    }
  }

  render() {
    const berthPrefOptions = this.props.berthPrefList.map(berthPref => {
      return (
        <option value={berthPref.preference_code}>
          {berthPref.preference_description}
        </option>
      )
    })
    const mealPrefOptions = this.props.mealPrefList.map(mealPref => {
      return (
        <option value={mealPref.preference_code}>
          {mealPref.preference_description}
        </option>
      )
    })
    const mealLabelClassName = classNames('fs-15 c-black-90 flex-fix', {
      'c-red': this.state.error.meal,
      'c-black-90': !this.state.error.meal
    })
    const titleOptions = this._getTitleOptions().map(title => {
      return <option value={title.value}>{title.value}</option>
    })
    const titleLabelClassName = classNames('fs-15 c-black-90 flex-fix', {
      'c-red': this.state.error.title,
      'c-black-90': !this.state.error.title
    })
    return (
      <form>
        <List className="mt-10">
          <Shake animate={this.state.animate.title}>
            <Select
              name="title"
              label="Title"
              selectClassName="fs-15"
              labelClassName={titleLabelClassName}
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              onChange={this._handleInputChange}
              value={this.state.title}
              hasError={this.state.error.title}
            >
              <option value="">Select title</option>
              {titleOptions}
            </Select>
          </Shake>
          <Shake animate={this.state.animate.firstName}>
            <Input
              hasError={this.state.error.firstName}
              type="text"
              name="firstName"
              label="First Name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.firstName}
              onChange={this._handleInputChange}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={this.state.animate.lastName}>
            <Input
              type="text"
              name="lastName"
              label="Last Name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.lastName}
              onChange={this._handleInputChange}
              hasError={this.state.error.lastName}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={this.state.animate.age}>
            <Input
              type="number"
              name="age"
              label="Age"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.age}
              onChange={this._handleInputChange}
              hasError={this.state.error.age}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Select
            name="berth"
            label="Berth Preference"
            selectClassName="fs-15"
            labelClassName="fs-15 c-black-90 flex-fix"
            wrapper={ListItem}
            wrapperClassName="h-48 flex flex-middle"
            onChange={this._handleInputChange}
            value={this.state.berth}
          >
            {berthPrefOptions}
          </Select>
          <If condition={!isEmpty(this.props.mealPrefList)}>
            <Shake animate={this.state.animate.meal}>
              <Select
                name="meal"
                label="Meal Preference"
                selectClassName="fs-15"
                labelClassName={mealLabelClassName}
                wrapper={ListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.meal}
                hasError={this.state.error.meal}
              >
                <option value="">Select Meal Preference</option>
                {mealPrefOptions}
              </Select>
            </Shake>
          </If>
        </List>
        <div className="pl-16 pr-16 mt-20 mb-20 ta-c">
          <Button
            size="full"
            type="secondary"
            onClick={this._validateTravellerData}
          >
            Continue booking
          </Button>
        </div>
      </form>
    )
  }
}

TravellerDetailsComponent.propTypes = {
  id: PropTypes.string.isRequired,
  travellerDetails: PropTypes.shape({
    title: PropTypes.string,
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    age: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    berth: PropTypes.string,
    meal: PropTypes.string
  }),
  handleTravellersDetails: PropTypes.func.isRequired,
  berthPrefList: PropTypes.arrayOf(PropTypes.object),
  mealPrefList: PropTypes.arrayOf(PropTypes.object),
  handleValidationError: PropTypes.func.isRequired
}

TravellerDetailsComponent.defaultProps = {
  travellerDetails: {
    title: '',
    firstName: '',
    lastName: '',
    age: '',
    berth: 'NC',
    meal: ''
  },
  berthPrefList: [],
  mealPrefList: []
}

export default TravellerDetailsComponent
