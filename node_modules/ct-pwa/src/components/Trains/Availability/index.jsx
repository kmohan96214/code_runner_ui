import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { browserHistory } from 'Utils/history'

import Button from 'Lib/Buttons'
import { SectionHeader } from 'Lib/Text'
import { List, ListItem } from 'Lib/List'
import Pageloader from 'Lib/Pageloader'
import Sheet from 'Lib/Sheet'
import Input from 'Lib/Form/Input'
import { Shake } from 'Lib/Animate'

import { path, isEmpty, formatDate, convertDate, openInNewTab } from 'Utils'
import { getDate } from 'Utils/trains'

import { TRAINS_ITINERARY_REVIEW } from 'Constants/trains/paths'

import MultipleAvailability from './MultipleAvailability'
import GeneralAvailability from './GeneralAvailablity'
import Placeholder from './Placeholder'
import { TRAINS_BASE_PATH } from 'Constants/trains/paths'

class Availabilty extends Component {
  state = {
    showloader: false,
    irctcUserName: '',
    animate: {
      irctcUserName: false
    },
    error: {
      irctcUserName: false
    }
  }

  componentWillReceiveProps(nextProps, nextState) {
    const itineraryResponse = nextProps.itineraryResp
    const { itineraryError } = nextProps
    const isItineraryUpdated =
      JSON.stringify(this.props.itineraryResp) !==
      JSON.stringify(itineraryResponse)
    if (itineraryResponse || itineraryError) {
      this.setState({ showloader: false })
    }
    if (itineraryError) {
      window.alert(itineraryError)
    } else if (!isEmpty(itineraryResponse) && isItineraryUpdated) {
      if (itineraryResponse.itinerary_id) {
        const itineraryId = itineraryResponse.itinerary_id
        const reviewPath = TRAINS_ITINERARY_REVIEW(itineraryId)
        browserHistory.push({
          pathname: reviewPath
        })
      }
    }
    if (nextProps.irctcError) {
      const state = { animate: {}, error: {} }
      state.animate.irctcUserName = true
      state.error.irctcUserName = true
      this.setState({ ...state })
      setTimeout(() => {
        this.setState({
          animate: {
            irctcUserName: false
          }
        })
      }, 500)
    }
  }
  shouldComponentUpdate(nextProps, nextState) {
    return (
      JSON.stringify(this.props) !== JSON.stringify(nextProps) ||
      JSON.stringify(this.state) !== JSON.stringify(nextState)
    )
  }

  _getIRCTUserStatus = () => {
    this.props.getIRCTCUserStatus(this.state.irctcUserName)
  }

  _handleInputChange = (value, name) => {
    this.setState({ [name]: value })
  }

  _handleInputFocus = (element, name) => {
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  _getDataObject = (data, type) => {
    const rData = path([type], data)
    if (isEmpty(rData)) {
      return null
    }
    let status = path(['ss'], rData)
    let count = path(['sc'], rData)
    if (status === 'R.A.C.') {
      status = 'R.A.C'
    } else if (
      status === 'Not Available' ||
      status === 'Curr Avbl' ||
      status === 'Class Not Exist'
    ) {
      status = 'N/A'
      count = null
    }
    if (type === 'TQ') {
      return { count, status, ex: rData.ex, sp: rData.sp }
    }
    return { count, status }
  }

  _handleCreateItinerary = (date, status, count, qta, activeClass) => {
    this.setState({ showloader: true })
    let itineraryObj = {}
    const dt = convertDate(date)
    itineraryObj = {
      qta,
      dt,
      count,
      status,
      activeClass
    }
    if (!isEmpty(itineraryObj)) {
      this.props.createItinerary(itineraryObj)
    }
  }

  _handleNavigationFromSync = () => {
    if (this.props.isTrainsRedirect) {
      this.props.toggleAvailability(false)
    } else {
      browserHistory.goBack()
    }
  }

  _renderSearchedFor = () => {
    const { searchedFor } = this.props
    if (isEmpty(searchedFor)) {
      return null
    }
    const train = path([0], searchedFor)
    const date = getDate(train.date)
    const fDate = formatDate(date)
    const general = this._getDataObject(train, 'GN')
    const tatkal = this._getDataObject(train, 'TQ')
    const isTatkalPresent = !isEmpty(tatkal)

    let SearchedForAvailabilty

    if (isTatkalPresent) {
      SearchedForAvailabilty = (
        <MultipleAvailability
          date={date}
          formattedDate={fDate}
          general={general}
          tatkal={tatkal}
          activeClass={this.props.activeClass}
          handleCreateItinerary={this._handleCreateItinerary}
        />
      )
    } else {
      SearchedForAvailabilty = (
        <GeneralAvailability
          date={date}
          formattedDate={fDate}
          status={general.status}
          count={general.count}
          activeClass={this.props.activeClass}
          handleCreateItinerary={this._handleCreateItinerary}
        />
      )
    }

    return [
      <SectionHeader key="searched-for">Searched For</SectionHeader>,
      <List key="searched-for-list">{SearchedForAvailabilty}</List>
    ]
  }

  _renderOtherDates = () => {
    const { otherDates } = this.props
    const AvailabiltyList = []
    otherDates.map(train => {
      const data = this._getDataObject(train, 'GN')
      const date = getDate(train.date)
      const fDate = formatDate(date)
      AvailabiltyList.push(
        <GeneralAvailability
          key={train.date}
          date={date}
          formattedDate={fDate}
          status={data.status}
          count={data.count}
          activeClass={this.props.activeClass}
          handleCreateItinerary={this._handleCreateItinerary}
        />
      )
      return train
    })
    if (isEmpty(AvailabiltyList)) {
      return null
    }
    return [
      <SectionHeader key="other-dates">Other Dates</SectionHeader>,
      <List key="other-dates-list">{AvailabiltyList}</List>
    ]
  }

  _handleIrctcAccount = () => {
    openInNewTab('https://irctc.co.in')
  }

  render() {
    const searchedFor = this._renderSearchedFor()
    const otherDates = this._renderOtherDates()
    const showIRCTCSyncSheet =
      !this.props.isLoadingIrctcStatus && this.props.showIrctcPopup

    if (this.props.isLoading) {
      return <Placeholder count={10} />
    }

    return (
      <div>
        <If condition={this.state.showloader && !showIRCTCSyncSheet}>
          <Pageloader title="Hang on" message="Generating your itinerary..." />
        </If>
        <If
          condition={!this.state.showloader && this.props.isLoadingIrctcStatus}
        >
          <Pageloader title="Hang on" message="Syncing IRCTC..." />
        </If>
        {searchedFor}
        {otherDates}
        <Sheet
          title="Enter IRCTC Username"
          isOpen={showIRCTCSyncSheet}
          onClose={this._handleNavigationFromSync}
        >
          <div>
            <SectionHeader>Please Note</SectionHeader>
            <List>
              <ListItem>
                <ol className="pl-16 fs-14 pt-10 pb-10">
                  <li className="mb-10 lh-copy">
                    To continue with this booking, Indian railways mandates that
                    you submit your IRCTC username.
                  </li>
                  <li className="lh-copy">
                    A maximum of 6 tickets can be booked using one IRCTC
                    username per month
                  </li>
                </ol>
              </ListItem>
            </List>

            <SectionHeader className="mt-30">
              Enter IRCTC Username
            </SectionHeader>
            <List>
              {/* <IRCTCLogo height="29" width="24" /> */}
              <Shake animate={this.state.animate.irctcUserName}>
                <Input
                  hasError={this.state.error.irctcUserName}
                  type="text"
                  name="irctcUserName"
                  label="Username"
                  labelClassName="fs-15 c-black-90 flex-fix"
                  inputClassName="fs-15 c-black-90"
                  wrapper={ListItem}
                  wrapperClassName="h-48 flex flex-middle"
                  value={this.state.irctUserName}
                  onChange={this._handleInputChange}
                  onFocus={this._handleInputFocus}
                />
              </Shake>
            </List>

            <div className="mt-15 pl-16 pr-16">
              <Button type="secondary" onClick={this._getIRCTUserStatus}>
                Continue booking
              </Button>
            </div>

            <p className="ta-c mt-20 fs-14 c-blue">
              <a onClick={this._handleIrctcAccount}>Forgot IRCTC Username</a>
            </p>

            <p className="ta-c mt-10 fs-14">
              Do not have an IRCTC account?{' '}
              <a onClick={this._handleIrctcAccount} className="c-blue">
                Register Here
              </a>
            </p>
          </div>
        </Sheet>
      </div>
    )
  }
}

Availabilty.propTypes = {
  searchedFor: PropTypes.arrayOf(PropTypes.object),
  otherDates: PropTypes.arrayOf(PropTypes.object),
  createItinerary: PropTypes.func,
  activeClass: PropTypes.string,
  itineraryResp: PropTypes.shape({
    itinerary_id: PropTypes.string,
    trs: PropTypes.shape({
      tr: PropTypes.shape({
        seq: PropTypes.number,
        ts: PropTypes.shape({
          t: PropTypes.shape({
            seq: PropTypes.number,
            mealpref: PropTypes.string,
            berthpref: PropTypes.string
          })
        })
      })
    }),
    fare: PropTypes.shape({
      bfadt: PropTypes.string,
      totbfadt: PropTypes.string,
      bfchd: PropTypes.string,
      totbfchd: PropTypes.string,
      bfsnrm: PropTypes.string,
      totbfsnrm: PropTypes.string,
      bfsnrf: PropTypes.string,
      totbfsnrf: PropTypes.string,
      railchg: PropTypes.string,
      ctsvf: PropTypes.string,
      tf: PropTypes.string,
      tot: PropTypes.string
    }),
    drn: PropTypes.string
  }),
  itineraryError: PropTypes.string,
  isLoading: PropTypes.bool,
  showIrctcPopup: PropTypes.bool,
  getIRCTCUserStatus: PropTypes.func.isRequired,
  irctcError: PropTypes.bool,
  isLoadingIrctcStatus: PropTypes.bool
}

Availabilty.defaultProps = {
  searchedFor: [],
  otherDates: [],
  createItinerary: () => { },
  activeClass: '',
  itineraryResp: {},
  itineraryError: '',
  isLoading: true,
  showIrctcPopup: false,
  irctcError: false,
  isLoadingIrctcStatus: false
}

export default Availabilty
