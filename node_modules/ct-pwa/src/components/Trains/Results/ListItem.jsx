import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'

import { ListItem } from 'Lib/List'

import { trainClassMap } from 'Utils'

class ResultsListItem extends PureComponent {
  _handleCheckTrainAvailibilty = event => {
    const data = {
      number: this.props.number,
      name: this.props.name,
      fare: this.props.price,
      distance: this.props.distance,
      availableClass: this.props.tClass
    }
    this.props.onClick(data, this.props.data, event)
  }

  render() {
    const {
      name,
      number,
      price,
      duration,
      tClass,
      origin,
      destination,
      showStations
    } = this.props
    const classValue = trainClassMap(tClass).value
    return (
      <ListItem
        className="h-64 flex flex-middle"
        enableRipple={true}
        onClick={this._handleCheckTrainAvailibilty}
      >
        <div className="d-b w-100p">
          <div className="flex flex-between mb-5">
            <p className="fw-600 fs-15 c-black-90 d-ib">
              {name} <span className="fs-12 c-black-40">({number})</span>
            </p>
            <p className="fw-600 fs-15 c-black-90 d-ib">₹{price}</p>
          </div>
          <div className="flex flex-between">
            <p className="fs-12 c-black-40 d-ib">{duration}</p>
            <p className="fs-12 c-black-40 d-ib">{classValue}</p>
          </div>
          <If condition={showStations}>
            <div className="flex flex-between">
              <p className="fs-12 c-black-40 d-ib lh-copy">
                {origin.c} → {destination.c}
              </p>
            </div>
          </If>
        </div>
      </ListItem>
    )
  }
}

ResultsListItem.propTypes = {
  number: PropTypes.string,
  name: PropTypes.string,
  price: PropTypes.string,
  duration: PropTypes.string,
  tClass: PropTypes.string,
  onClick: PropTypes.func,
  distance: PropTypes.number,
  data: PropTypes.object, // eslint-disable-line
  origin: PropTypes.shape({
    c: PropTypes.string,
    n: PropTypes.string,
    dd: PropTypes.string,
    dt: PropTypes.string
  }).isRequired,
  destination: PropTypes.shape({
    c: PropTypes.string,
    n: PropTypes.string,
    dd: PropTypes.string,
    dt: PropTypes.string
  }).isRequired,
  showStations: PropTypes.bool.isRequired
}

ResultsListItem.defaultProps = {
  number: '',
  name: '',
  price: '',
  duration: '',
  tClass: '',
  onClick: event => {},
  distance: 0,
  data: {}
}

export default ResultsListItem
