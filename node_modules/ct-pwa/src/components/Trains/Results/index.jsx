import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { browserHistory } from 'Utils/history'
import { List } from 'Lib/List'
import Button from 'Lib/Buttons'
import { getFormattedTime, path, toProperCase } from 'Utils'

import { TRAINS_AVAILABILITY } from 'Constants/trains/paths'

import ResultsListItem from './ListItem'
import Placeholders from './Placeholder'

class Results extends Component {
  shouldComponentUpdate(nextProps, nextState) {
    const loadingChanged = this.props.isLoading !== nextProps.isLoading
    const trainsPropChanged =
      JSON.stringify(this.props.trains) !== JSON.stringify(nextProps.trains)
    return loadingChanged || trainsPropChanged
  }

  _handleCheckTrainAvailability = (data, trainData, event) => {
    const { tClass, departOn, travellers } = this.props.query
    const origin = path(['tfs', 's', 0], trainData) || {}
    const destination = path(['tts', 's', 0], trainData) || {}
    this.props.onTrainSelection(trainData)
    browserHistory.push({
      pathname: TRAINS_AVAILABILITY,
      query: {
        tClass,
        oStation: toProperCase(origin.n),
        oCode: origin.c,
        dStation: toProperCase(destination.n),
        dCode: destination.c,
        departOn,
        adults: travellers.adults,
        children: travellers.children,
        srMen: travellers.srMen,
        srWomen: travellers.srWomen,
        tNumber: data.number,
        tName: data.name,
        fare: data.fare,
        distance: data.distance,
        aClass: data.availableClass
      }
    })
  }

  _handleShowNearbyStations = event => {
    this.props.showNearByStations(event)
  }

  render() {
    const { trains, showNearByButton } = this.props

    // Show Placeholder while loading
    if (this.props.isLoading) return <Placeholders count={10} />

    return (
      <div>
        <List className="mt-10">
          {trains.map((train, index) => {
            const time = getFormattedTime(train.td, true)
            let { tdt, tat } = train
            tdt = tdt.slice(0, 5)
            tat = tat.slice(0, 5)
            const durationString = `${tdt} - ${tat} | ${time}`
            const origin = path(['tfs', 's', 0], train)
            const destination = path(['tts', 's', 0], train)
            return (
              <ResultsListItem
                key={train.tno}
                number={train.tno}
                name={train.tn}
                price={train.fare.f}
                distance={train.tdis}
                duration={durationString}
                tClass={train.fare.cc}
                onClick={this._handleCheckTrainAvailability}
                data={train}
                origin={origin}
                destination={destination}
                showStations={!showNearByButton}
              />
            )
          })}
        </List>
        {showNearByButton && (
          <div className="ta-c mt-15 mb-30">
            <p className="c-black-70 fs-13 mb-10">
              Not enough trains to chose from?
            </p>
            <Button
              type="tertiary"
              size="medium"
              onClick={this._handleShowNearbyStations}
            >
              Show nearby stations
            </Button>
          </div>
        )}
      </div>
    )
  }
}

Results.propTypes = {
  trains: PropTypes.arrayOf(PropTypes.object),
  query: PropTypes.shape({
    origin: PropTypes.shape({
      code: PropTypes.string,
      station: PropTypes.string
    }),
    destination: PropTypes.shape({
      code: PropTypes.string,
      station: PropTypes.string
    }),
    departOn: PropTypes.number,
    travellers: PropTypes.shape({
      adults: PropTypes.number,
      children: PropTypes.number,
      srMen: PropTypes.number,
      srWomen: PropTypes.number
    }),
    tClass: PropTypes.string
  }).isRequired,
  onTrainSelection: PropTypes.func.isRequired,
  isLoading: PropTypes.bool,
  showNearByStations: PropTypes.func.isRequired,
  showNearByButton: PropTypes.bool.isRequired
}

Results.defaultProps = {
  trains: [],
  isLoading: true
}

export default Results
