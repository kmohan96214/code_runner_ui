import React, { Component } from 'react'
import PropTypes from 'prop-types'

import { List, ListItem } from 'Lib/List'
import Button from 'Lib/Buttons'
import { Shake } from 'Lib/Animate'
import InputBlock from 'Lib/Form/InputBlock'
import NativeSelect from 'Lib/Form/NativeSelect'

import { TRAIN_CLASS } from 'Constants'
import { dateType } from 'Constants/types'
import { isEmpty, formatDate, getTrainsTravellerText } from 'Utils'

import Switch from './switch.svg'

class Search extends Component {
  state = {
    animate: {
      origin: false,
      destination: false,
      depart: false,
      travellers: false
    },
    error: {
      origin: false,
      destination: false,
      depart: false,
      travellers: false
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    const propsUpdated =
      JSON.stringify(nextProps) !== JSON.stringify(this.props)
    const stateUpdated =
      JSON.stringify(nextState) !== JSON.stringify(this.state)
    return propsUpdated || stateUpdated
  }

  refHandlers = {
    select: ref => {
      this.selectRef = ref
    }
  }

  _formatDate = date => {
    if (!isEmpty(date)) {
      return formatDate(date)
    }
    return ''
  }

  /* eslint complexity: [ 0 ] */
  _validateData = event => {
    const { origin, destination, depart, travellers } = this.props
    const state = { animate: {}, error: {} }
    const currDate = new Date()
    let isToastVisible = false
    const isOldDate = () => {
      currDate.setHours(0, 0, 0, 0)
      return depart < currDate.getTime()
    }
    if (isEmpty(origin.code)) {
      state.animate.origin = true
      state.error.origin = true
    }
    if (isEmpty(destination.code)) {
      state.animate.destination = true
      state.error.destination = true
    }
    if (origin.code === destination.code) {
      state.animate.origin = true
      state.error.origin = true
      state.animate.destination = true
      state.error.destination = true
      if (!isToastVisible) {
        isToastVisible = true
        this.props.handleValidationError(
          'Your origin and destination stations are the same'
        )
      }
    }
    if (isEmpty(depart) || isOldDate()) {
      state.animate.depart = true
      state.error.depart = true
      if (!isToastVisible) {
        this.props.handleValidationError('Please select valid date')
      }
    }
    if (
      isEmpty(travellers) ||
      !(
        travellers.adults +
        travellers.children +
        travellers.srMen +
        travellers.srWomen
      )
    ) {
      state.animate.travellers = true
      state.error.travellers = true
    }
    if (!isEmpty(state.animate)) {
      this.setState({ ...state })
      setTimeout(() => {
        this.setState({
          animate: {
            origin: false,
            destination: false,
            depart: false,
            travellers: false
          }
        })
      }, 500)
    } else {
      this.props.handleTrainSearch(event)
    }
  }

  _handleOriginStationSearch = event => {
    if (this.state.error.origin) {
      this.setState(prevState => ({
        error: { ...prevState.error, origin: !prevState.error.origin }
      }))
    }
    this.props.showOriginSearch(event)
  }

  _handleDestinationStationSearch = event => {
    if (this.state.error.destination) {
      this.setState(prevState => ({
        error: { ...prevState.error, destination: !prevState.error.destination }
      }))
    }
    this.props.showeDestinationSearch(event)
  }

  _handleTravellersClick = event => {
    if (this.state.error.travellers) {
      this.setState(prevState => ({
        error: { ...prevState.error, travellers: !prevState.error.travellers }
      }))
    }
    this.props.showTravellerSelect(event)
  }

  _handleDepartClick = event => {
    if (this.state.error.depart) {
      this.setState(prevState => ({
        error: { ...prevState.error, depart: !prevState.error.depart }
      }))
    }
  }

  _handleCalendarFocus = focused => {
    this.setState({ ...focused })
  }

  render() {
    return (
      <div>
        <div className="TouchAndGo mt-10 p-relative">
          <List>
            <ListItem>
              <Shake
                animate={
                  this.state.animate.origin || this.state.animate.destination
                }
              >
                <div className="TouchAndGo__group h-112">
                  <InputBlock
                    label={this.props.origin.station || 'From'}
                    labelClass="fs-15 mb-10"
                    value={this.props.origin.code}
                    valueClass="fs-30 fw-300 c-black-90"
                    onClick={this._handleOriginStationSearch}
                    showEmptyValue={true}
                    hasError={this.state.error.origin}
                  />

                  <Switch
                    className="TouchAndGo__switch"
                    fill="#36c"
                    onClick={this.props.swapStations}
                  />

                  <InputBlock
                    label={this.props.destination.station || 'To'}
                    labelClass="fs-15 mb-10"
                    value={this.props.destination.code}
                    valueClass="fs-30 fw-300 c-black-90"
                    onClick={this._handleDestinationStationSearch}
                    showEmptyValue={true}
                    hasError={this.state.error.destination}
                  />
                </div>
              </Shake>
            </ListItem>
            <ListItem>
              <Shake animate={this.state.animate.depart}>
                <div className="TouchAndGo__group h-88">
                  <InputBlock
                    label="Depart"
                    labelClass="fs-15 mb-10"
                    valueClass="fs-20 c-black-90"
                    value={this._formatDate(this.props.depart)}
                    onClick={this.props.showDatePicker}
                    hasError={this.state.error.depart}
                  />
                </div>
              </Shake>
            </ListItem>
            <ListItem onClick={this._handleTravellersClick}>
              <Shake animate={this.state.animate.travellers}>
                <div className="TouchAndGo__group h-88">
                  <InputBlock
                    hasError={this.state.error.travellers}
                    label="Travellers"
                    labelClass="fs-15 mb-10"
                    value={getTrainsTravellerText(this.props.travellers)}
                    valueClass="fs-20 c-black-90"
                  />
                </div>
              </Shake>
            </ListItem>

            <ListItem>
              <div className="TouchAndGo__group h-88">
                <div role="button" className="TouchAndGo__field">
                  <p className="TouchAndGo__label fs-15 c-black-40 mb-10">
                    Class
                  </p>
                  <NativeSelect
                    name="train-class"
                    selectClassName="fs-20"
                    value={this.props.class}
                    onChange={this.props.handleClassChange}
                    ref={this.refHandlers.select}
                  >
                    {TRAIN_CLASS.map(tClass => (
                      <option key={tClass.code} value={tClass.code}>
                        {tClass.value}
                      </option>
                    ))}
                  </NativeSelect>
                </div>
              </div>
            </ListItem>

            <ListItem>
              <div className="TouchAndGo__group h-104">
                <div className="TouchAndGo__field">
                  <Button onClick={this._validateData}>Search trains</Button>
                </div>
              </div>
            </ListItem>
          </List>
        </div>
      </div>
    )
  }
}

Search.propTypes = {
  class: PropTypes.string,
  depart: PropTypes.oneOfType([PropTypes.string, PropTypes.number, dateType]),
  origin: PropTypes.shape({
    code: PropTypes.string,
    station: PropTypes.string
  }),
  showOriginSearch: PropTypes.func,
  showeDestinationSearch: PropTypes.func,
  showDatePicker: PropTypes.func,
  showTravellerSelect: PropTypes.func,
  destination: PropTypes.shape({
    code: PropTypes.string,
    station: PropTypes.string
  }),
  travellers: PropTypes.shape({
    adult: PropTypes.number,
    children: PropTypes.number,
    srMen: PropTypes.number,
    srWomen: PropTypes.number
  }),
  handleClassChange: PropTypes.func,
  handleTrainSearch: PropTypes.func,
  handleValidationError: PropTypes.func,
  swapStations: PropTypes.func
}

Search.defaultProps = {
  class: '...',
  depart: '...',
  origin: {
    code: '',
    station: 'Origin'
  },
  showOriginSearch: event => {},
  showeDestinationSearch: event => {},
  showDatePicker: event => {},
  showTravellerSelect: event => {},
  destination: {
    code: '',
    station: 'Destination'
  },
  travellers: {
    adult: 0,
    children: 0,
    srMen: 0,
    srWomen: 0
  },
  handleClassChange: value => {},
  handleTrainSearch: () => {},
  handleValidationError: () => {},
  swapStations: event => {}
}

export default Search
