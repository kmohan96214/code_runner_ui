import React, { PureComponent } from 'react'
import { browserHistory } from 'Utils/history'
import PropTypes from 'prop-types'

import { SectionHeader } from 'Lib/Text'
import { List, ListItem } from 'Lib/List'
import Button from 'Lib/Buttons'

import {
  TRAINS_SEARCH,
  TRAINS_ITINERARY_TRAVELLERS
} from 'Constants/trains/paths'

import { isEmpty, path } from 'Utils'

class Review extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      itinerary: this.props.itinerary,
      itineraryRes: path(['data', 'response'], this.props.itinerary),
      loading: path(['data', 'loading'], this.props.itinerary),
      error: path(['error'], this.props.itinerary)
    }
  }
  componentWillReceiveProps(nextProps) {
    this.itinerary = nextProps.itinerary
    if (!isEmpty(nextProps.itinerary)) {
      this.setState({
        itinerary: nextProps.itinerary,
        itineraryRes: path(['data', 'response'], nextProps.itinerary),
        loading: path(['data', 'loading'], nextProps.itinerary),
        error: path(['error'], nextProps.itinerary)
      })
    }
  }

  _handleTravellerRedirection = () => {
    const { itinerary } = this.state
    const itineraryId = path(['data', 'response', 'itinerary_id'], itinerary)
    const travellersPath = TRAINS_ITINERARY_TRAVELLERS(itineraryId)
    if (itineraryId) {
      browserHistory.push({
        pathname: travellersPath
      })
    }
  }

  render() {
    let fare = {}
    const { itineraryRes } = this.state

    if (
      isEmpty(itineraryRes) &&
      (this.state.error !== '' || null) &&
      !this.state.loading
    ) {
      browserHistory.push({
        pathname: TRAINS_SEARCH
      })
    }
    if (!isEmpty(itineraryRes)) {
      fare = path(['fare'], itineraryRes)
    }
    return (
      <div>
        <SectionHeader>Fare Breakup</SectionHeader>
        <List>
          <If condition={fare.totbfadt > 0}>
            <ListItem className="h-48 flex flex-middle flex-between">
              <p className="fs-15 c-black-90">Adult</p>
              <p className="fs-15 c-black-90">₹ {Math.round(fare.totbfadt)}</p>
            </ListItem>
          </If>
          <If condition={fare.totbfchd > 0}>
            <ListItem className="h-48 flex flex-middle flex-between">
              <p className="fs-15 c-black-90">Children</p>
              <p className="fs-15 c-black-90">₹ {Math.round(fare.totbfchd)}</p>
            </ListItem>
          </If>
          <If condition={fare.totbfsnrm > 0}>
            <ListItem className="h-48 flex flex-middle flex-between">
              <p className="fs-15 c-black-90">Sr. Men</p>
              <p className="fs-15 c-black-90">₹ {Math.round(fare.totbfsnrm)}</p>
            </ListItem>
          </If>
          <If condition={fare.totbfsnrf > 0}>
            <ListItem className="h-48 flex flex-middle flex-between">
              <p className="fs-15 c-black-90">Sr. Women</p>
              <p className="fs-15 c-black-90">₹ {Math.round(fare.totbfsnrf)}</p>
            </ListItem>
          </If>
          <ListItem className="h-48 flex flex-middle flex-between">
            <p className="fs-15 c-black-90">Cleartrip Fees</p>
            <p className="fs-15 c-black-90">₹{Math.round(fare.ctsvf)}</p>
          </ListItem>
          <ListItem className="h-48 flex flex-middle flex-between">
            <p className="fs-15 c-black-90">Railway Charges</p>
            <p className="fs-15 c-black-90">₹ {Math.round(fare.railchg)}</p>
          </ListItem>
          <ListItem className="h-48 flex flex-middle flex-between">
            <p className="fs-15 fw-700 c-black-90">Total</p>
            <p className="fs-15 fw-700 c-black-90">₹ {Math.round(fare.tot)}</p>
          </ListItem>
        </List>
        <div className="pl-16 pr-16 mt-20 mb-20">
          <Button onClick={this._handleTravellerRedirection}>
            Continue booking
          </Button>
        </div>
      </div>
    )
  }
}

Review.propTypes = {
  itinerary: PropTypes.shape({
    train: PropTypes.object,
    travellers: PropTypes.object,
    data: PropTypes.shape({
      query: PropTypes.object,
      response: PropTypes.shape({
        itinerary_id: PropTypes.string,
        fare: PropTypes.object
      }),
      params: PropTypes.shape({
        activeClass: PropTypes.string,
        qta: PropTypes.string,
        date: PropTypes.any,
        class: PropTypes.string,
        count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        status: PropTypes.string
      }),
      loading: PropTypes.bool
    })
  })
}

Review.defaultProps = {
  itinerary: {
    train: {},
    travellers: {},
    data: {
      query: {},
      response: {
        itinerary_id: '',
        fare: {}
      },
      params: {
        qta: '',
        activeClass: '',
        date: '',
        class: '',
        count: 0,
        status: ''
      },
      loading: true
    }
  }
}

export default Review
