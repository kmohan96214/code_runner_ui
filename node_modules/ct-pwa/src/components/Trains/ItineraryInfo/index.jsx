import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'

import { SectionHeader } from 'Lib/Text'
import { List, ListItem } from 'Lib/List'
import { AvailabiltyBadge } from 'Lib/Badges'
import { trainClassMap, getFormattedTime } from 'Utils'
import TimeBlock from './TimeBlock'

class ItineraryInfo extends PureComponent {
  _createItineraryBlock = () => {
    const { origin, destination, duration } = this.props
    const durationString = getFormattedTime(duration, true)
    return [
      <ItineraryBlock
        key={origin.code}
        className="ta-r flex-1"
        code={origin.code}
        station={origin.station}
        date={origin.date}
        time={origin.time}
      />,
      <TimeBlock key="time-block" time={durationString} />,
      <ItineraryBlock
        key={destination.code}
        className="ta-l flex-1"
        code={destination.code}
        station={destination.station}
        date={destination.date}
        time={destination.time}
      />
    ]
  }
  render() {
    const Itinerary = this._createItineraryBlock()
    const { train } = this.props
    const classValue = trainClassMap(train.tClass) || {}
    return (
      <div>
        <SectionHeader>
          {train.name} ({train.number})
        </SectionHeader>
        <List>
          <ListItem className="h-96 flex flex-center flex-middle">
            {Itinerary}
          </ListItem>
          <ListItem className="h-48 flex flex-middle flex-between">
            <p className="fs-15 c-black-90">Class</p>
            <p className="fs-15 c-black-90">
              {classValue.value} ({classValue.code})
            </p>
          </ListItem>

          <ListItem className="h-48 flex flex-middle flex-between">
            <p className="fs-15 c-black-90">Availabilty</p>
            <AvailabiltyBadge
              count={train.availability.count}
              type={train.availability.status}
            />
          </ListItem>
        </List>
      </div>
    )
  }
}

const ItineraryBlock = ({ className, code, time, date, station }) => {
  return (
    <div className={className}>
      <p className="fs-22 mb-5">
        <If condition={className.includes('ta-l')}>
          <span className="fw-600">{time}</span>
        </If>
        <span className="fw-300">{code}</span>
        <If condition={className.includes('ta-r')}>
          <span className="fw-600">{time}</span>
        </If>
      </p>
      <p className="fs-11 c-black-48 mb-5">{date}</p>
      <p className="fs-11 c-black-48 mb-5">{station}</p>
    </div>
  )
}

ItineraryBlock.propTypes = {
  className: PropTypes.string,
  code: PropTypes.string,
  station: PropTypes.string,
  date: PropTypes.string,
  time: PropTypes.string
}

ItineraryBlock.defaultProps = {
  className: '',
  code: '',
  station: '',
  date: '',
  time: ''
}

ItineraryInfo.propTypes = {
  origin: PropTypes.shape({
    code: PropTypes.string,
    station: PropTypes.string,
    date: PropTypes.string,
    time: PropTypes.string
  }),
  destination: PropTypes.shape({
    code: PropTypes.string,
    station: PropTypes.string,
    date: PropTypes.string,
    time: PropTypes.string
  }),
  duration: PropTypes.number,
  train: PropTypes.shape({
    name: PropTypes.string,
    number: PropTypes.string,
    tClass: PropTypes.string,
    availabilty: PropTypes.shape({
      count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
      status: PropTypes.string
    })
  })
}

ItineraryInfo.defaultProps = {
  origin: {},
  destination: {},
  duration: 0,
  train: {
    number: '',
    name: '',
    tClass: '',
    availability: {
      status: '',
      count: 0
    }
  }
}

export default ItineraryInfo
