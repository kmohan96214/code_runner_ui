import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
import { browserHistory } from 'Utils/history'
import pickBy from 'lodash.pickby'
import forEach from 'lodash.foreach'
import times from 'lodash.times'

import { SectionHeader, SectionHelper } from 'Lib/Text'
import { List, ListItem } from 'Lib/List'
import { RadioList, RadioItem } from 'Lib/Radio'
import Button from 'Lib/Buttons'
import Input from 'Lib/Form/Input'
import { Shake } from 'Lib/Animate'
import Pageloader from 'Lib/Pageloader'

import {
  TRAINS_ITINERARY_TRAVELLERS_DETAILS,
  TRAINS_ITINERARY_TRAVELLERS_GST,
  TRAINS_ITINERARY_PAYMENT
} from 'Constants/trains/paths'

import { isEmpty, path, isValidEmail } from 'Utils'
import getDisplayCategory from 'Utils/travellersCategory'

import TravellerListItem from './TravellerListItem'
import StatesSearch from './StatesSearch'

class Travellers extends PureComponent {
  constructor(props) {
    super(props)
    const filteredUser = this._filterUserDetails(props.userDetails)
    const contactInfoHistory = path(['contactInfo'], props)
    this.state = {
      selectedState: {
        stateLabel: this.props.stateLabel || 'Please select State of Residence',
        shortCode: '',
        shortName: ''
      },
      statesData: [],
      toggleStatesSearch: false,
      showPasswordField: [],
      phone: !isEmpty(contactInfoHistory.phone)
        ? contactInfoHistory.phone
        : filteredUser.mobile,
      email: !isEmpty(contactInfoHistory.email)
        ? contactInfoHistory.email
        : filteredUser.email,
      password: '',
      animate: {
        phone: false,
        email: false,
        password: false
      },
      error: {
        phone: false,
        email: false,
        password: false
      },
      validateTravellersDetails: false
    }
  }

  componentWillReceiveProps(nextProps) {
    const { travellersError } = nextProps
    if (!isEmpty(nextProps.statesData)) {
      this.setState({
        statesData: nextProps.statesData,
        selectedState: {
          stateLabel:
            nextProps.stateLabel || 'Please select State of Residence',
          shortCode: '',
          shortName: ''
        }
      })
    }
    if (
      !isEmpty(nextProps.userDetails) &&
      isEmpty(nextProps.contactInfo.email) &&
      isEmpty(nextProps.contactInfo.phone)
    ) {
      const filteredUser = this._filterUserDetails(nextProps.userDetails)
      this.setState({ phone: filteredUser.mobile })
      this.setState({ email: filteredUser.email })
    }
    if (
      !isEmpty(nextProps.contactInfo.email) &&
      !isEmpty(nextProps.contactInfo.phone)
    ) {
      const nextContactInfo = nextProps.contactInfo
      this.setState({ phone: nextContactInfo.phone })
      this.setState({ email: nextContactInfo.email })
    }
    if (!isEmpty(travellersError) && !nextProps.isTravellersResponseLoading) {
      window.alert(travellersError)
    }
    if (
      !isEmpty(nextProps.travellersResponse) &&
      !isEmpty(nextProps.responseOrigin) &&
      nextProps.responseOrigin === 'api' &&
      this.props.travellersResponse !== nextProps.travellersResponse
    ) {
      const paymentPath = TRAINS_ITINERARY_PAYMENT(this.props.itineraryId)
      browserHistory.push({
        pathname: paymentPath
      })
    }
  }

  _filterUserDetails = userDetails => {
    const filteredUser = {}
    if (!isEmpty(userDetails)) {
      filteredUser.email = userDetails.username || ''
      const phoneNumbers =
        path(['contact_data', 'phone_numbers'], userDetails) || null
      if (!isEmpty(phoneNumbers)) {
        phoneNumbers.forEach(contact => {
          if (contact.category === 'mobile') {
            filteredUser.mobile = contact.mobile_number || ''
          }
        })
      }
    }
    return filteredUser
  }

  _handleInputChange = (value, name) => {
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
    this.setState({ [name]: value })
  }

  _handleInputFocus = (element, name) => {
    element.scrollIntoView()
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  _setContactInfo = () => {
    this.props.setTrainContactInfo({
      phone: this.state.phone,
      email: this.state.email
    })
  }

  _fillGstInfo = () => {
    this._setContactInfo()
    const gstPath = TRAINS_ITINERARY_TRAVELLERS_GST(this.props.itineraryId)
    browserHistory.push({
      pathname: gstPath
    })
  }
  _handleTravellersClick = uniqueId => {
    this._setContactInfo()
    const travellersDetailsPath = TRAINS_ITINERARY_TRAVELLERS_DETAILS(
      this.props.itineraryId
    )
    browserHistory.push({
      pathname: travellersDetailsPath,
      query: {
        id: uniqueId
      }
    })
  }
  _getTravellers = () => {
    const travellerRows = []
    const presentTravellers = pickBy(
      this.props.travellersCount,
      (count, key) => count !== 0
    )

    forEach(presentTravellers, (count, key) => {
      times(count, index => {
        const traveller = path([key, index], this.props.travellersDetails)
        const displayName = isEmpty(traveller)
          ? `${getDisplayCategory(key)} ${index + 1}`
          : `${traveller.firstName} ${traveller.lastName}`

        travellerRows.push(
          <TravellerListItem
            uniqueId={`${key}-${index + 1}`}
            displayName={displayName}
            key={key + index}
            validateTravellersDetails={this.state.validateTravellersDetails}
            onTravellersClick={this._handleTravellersClick}
          />
        )
      })
    })
    return travellerRows
  }

  /* eslint complexity: [ 0 ] */
  __validateTravellersAndContactInfo = () => {
    this.props.resetTrainTravellersError()
    if (this.state.error.phone || this.state.error.email) {
      this.setState({
        error: {
          phone: false,
          email: false
        }
      })
    }
    this.setState({ validateTravellersDetails: true })
    const { phone, email, password } = this.state
    const state = { animate: {}, error: {} }
    let isToastVisible = false
    const isValidPhone = () => {
      const phoneRegex = /^\d{10}$/
      return phoneRegex.test(phone)
    }
    if (isEmpty(phone) || !isValidPhone()) {
      state.animate.phone = true
      state.error.phone = true
      if (!isToastVisible && !isEmpty(phone)) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'Mobile number is invalid'
        })
      }
    }
    if (isEmpty(email) || !isValidEmail(email)) {
      state.animate.email = true
      state.error.email = true
      if (!isToastVisible && !isEmpty(email)) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'The email format is incorrect'
        })
      }
    }
    if (this.state.showPasswordField[0] && isEmpty(password)) {
      state.animate.password = true
      state.error.password = true
      if (!isToastVisible) {
        this.props.handleValidationError({
          message: 'Password cannot be empty'
        })
      }
    }
    if (!isEmpty(state.animate)) {
      this.setState({ ...state })
      setTimeout(() => {
        this.setState({
          animate: {
            phone: false,
            email: false,
            password: false
          },
          validateTravellersDetails: false
        })
      }, 500)
    } else {
      this._checkAndPostTravellersDetails()
      setTimeout(() => {
        this.setState({ validateTravellersDetails: false })
      }, 500)
    }
  }

  _checkAndPostTravellersDetails = () => {
    const contactInfo = {
      phone: this.state.phone,
      email: this.state.email
    }
    const { travellersCount, travellersDetails } = this.props
    const countKeys = Object.keys(travellersCount)
    const categoryLength = countKeys.length
    let isAllDetailsFilled = 0
    for (let key = 0; key < categoryLength; key += 1) {
      const category = countKeys[key]
      if (travellersDetails[category].length === travellersCount[category]) {
        isAllDetailsFilled += 1
      }
    }
    if (isAllDetailsFilled === categoryLength) {
      let { selectedState } = this.state
      const gstIn = this.props.gst.number
      if (!isEmpty(gstIn)) {
        const { statesData } = this.props
        const getGSTState = state => state.short_code === gstIn.substring(0, 2)
        const state = statesData.find(getGSTState)
        selectedState = {
          short_code: path(['short_code'], state),
          short_name: path(['short_name'], state),
          stateLabel: path(['state_name'], state)
        }
      }
      if (selectedState.shortCode === '') {
        selectedState.stateLabel = ''
      }
      if (this.state.showPasswordField[0]) {
        this.props.loginAndPostTrainTravellersDetails(
          contactInfo,
          selectedState,
          this.state.password
        )
      } else {
        this.props.postTrainTravellersDetails(contactInfo, selectedState)
      }
    }
  }
  _toggleStatesSearch = () => {
    this.setState(prevState => ({
      toggleStatesSearch: !prevState.toggleStatesSearch
    }))
  }

  _togglePassword = showPasswordField => {
    this.setState({ showPasswordField })
  }

  _handleStatesChange = (selectedState, event) => {
    this.setState({
      selectedState: {
        stateLabel: selectedState.state_name,
        shortCode: selectedState.short_code,
        shortName: selectedState.short_name
      }
    })
    this._toggleStatesSearch()
  }
  render() {
    const travelers = this._getTravellers()
    return (
      <div>
        <If condition={this.props.isTravellersResponseLoading}>
          <Pageloader
            title="Hang on"
            message="Fetching travellers response..."
          />
        </If>
        <div>
          <SectionHeader>Traveller details</SectionHeader>
          <List className="mt-10">{travelers}</List>
          <SectionHeader>Contact details</SectionHeader>
          <List>
            <Shake animate={this.state.animate.phone}>
              <Input
                type="tel"
                name="phone"
                label="Mobile"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90"
                wrapper={ListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.phone}
                hasError={this.state.error.phone}
                onFocus={this._handleInputFocus}
                maxlength="10"
              />
            </Shake>
            <Shake animate={this.state.animate.email}>
              <Input
                type="email"
                name="email"
                label="Email"
                labelClassName="fs-15 c-black-90 flex-fix"
                wrapper={ListItem}
                wrapperClassName="h-48 flex flex-middle"
                inputClassName="fs-15 c-black-90"
                onChange={this._handleInputChange}
                value={this.state.email}
                hasError={this.state.error.email}
                onFocus={this._handleInputFocus}
                disabled={this.props.isLoggedIn}
              />
            </Shake>
          </List>
          <SectionHelper>
            Your ticket & PNR info would be sent here
          </SectionHelper>

          <If condition={!this.props.isLoggedIn}>
            <RadioList
              value={this.state.showPasswordField}
              onChange={this._togglePassword}
              className="mt-30"
              multi={true}
            >
              <RadioItem
                value="password"
                className="RadioList__item h-48 flex flex-middle"
              >
                {selected => (
                  <div>
                    <p className="fs-15 c-black-80">
                      I have a Cleartrip account
                    </p>
                  </div>
                )}
              </RadioItem>
            </RadioList>
          </If>

          <If condition={this.state.showPasswordField[0]}>
            <List className="bt-0">
              <Shake animate={this.state.animate.password}>
                <Input
                  type="password"
                  name="password"
                  label="Password"
                  labelClassName="fs-15 c-black-90 flex-fix"
                  wrapper={ListItem}
                  wrapperClassName="h-48 flex flex-middle"
                  inputClassName="fs-15 c-black-90"
                  onChange={this._handleInputChange}
                  value={this.state.password}
                  hasError={this.state.error.password}
                  onFocus={this._handleInputFocus}
                  autoFocus={true}
                />
              </Shake>
            </List>
          </If>

          <SectionHeader>GST</SectionHeader>
          <List>
            <ListItem
              className="h-48 flex flex-middle"
              onClick={this._fillGstInfo}
              arrow={true}
            >
              <p className="fs-15">Use GSTIN for this booking (optional)</p>
            </ListItem>
            <ListItem
              className="h-48 flex flex-middle"
              onClick={this._toggleStatesSearch}
            >
              <p className="fs-15">{this.state.selectedState.stateLabel}</p>
            </ListItem>
          </List>

          <div className="pl-16 pr-16 mt-20 mb-20">
            <Button onClick={this.__validateTravellersAndContactInfo}>
              Continue booking
            </Button>
          </div>
        </div>
        <StatesSearch
          isOpen={this.state.toggleStatesSearch}
          title="States"
          onClose={this._toggleStatesSearch}
          onSelect={this._handleStatesChange}
          statesData={this.state.statesData}
        />
      </div>
    )
  }
}

Travellers.propTypes = {
  statesData: PropTypes.oneOfType([PropTypes.array]),
  travellersCount: PropTypes.shape({
    adults: PropTypes.number,
    children: PropTypes.number,
    srMen: PropTypes.number,
    srWomen: PropTypes.number
  }),
  travellersDetails: PropTypes.shape({
    adults: PropTypes.arrayOf(PropTypes.object),
    children: PropTypes.arrayOf(PropTypes.object),
    srMen: PropTypes.arrayOf(PropTypes.object),
    srWomen: PropTypes.arrayOf(PropTypes.object)
  }),
  postTrainTravellersDetails: PropTypes.func.isRequired,
  contactInfo: PropTypes.shape({
    phone: PropTypes.string,
    email: PropTypes.string
  }),
  itineraryId: PropTypes.string.isRequired,
  travellersResponse: PropTypes.objectOf(PropTypes.any),
  isTravellersResponseLoading: PropTypes.bool,
  userDetails: PropTypes.objectOf(PropTypes.any),
  responseOrigin: PropTypes.string,
  stateLabel: PropTypes.string,
  gst: PropTypes.shape({
    number: PropTypes.string,
    name: PropTypes.string,
    address: PropTypes.string
  }),
  travellersError: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  handleValidationError: PropTypes.func.isRequired,
  setTrainContactInfo: PropTypes.func.isRequired,
  isLoggedIn: PropTypes.bool,
  loginAndPostTrainTravellersDetails: PropTypes.func.isRequired,
  resetTrainTravellersError: PropTypes.func.isRequired
}

Travellers.defaultProps = {
  statesData: [],
  travellersCount: {
    adults: 0,
    children: 0,
    srMen: 0,
    srWomen: 0
  },
  travellersDetails: null,
  contactInfo: {
    phone: '',
    email: ''
  },
  travellersResponse: null,
  isTravellersResponseLoading: false,
  userDetails: null,
  responseOrigin: '',
  stateLabel: '',
  gst: {},
  travellersError: null,
  isLoggedIn: false
}

export default Travellers
