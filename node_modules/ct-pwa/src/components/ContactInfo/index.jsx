import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'

import { SectionHeader, SectionHelper } from 'Lib/Text'
import { List, ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'
import { Shake } from 'Lib/Animate'

import { isEmpty, path } from 'Utils'

class ContactInfo extends PureComponent {
  constructor(props) {
    super(props)
    const filteredUser = this._filterUserDetails(props.userDetails)
    const contactInfoHistory = path(['contactInfo'], props)
    this.state = {
      phone: !isEmpty(contactInfoHistory.phone)
        ? contactInfoHistory.phone
        : filteredUser.mobile,
      email: !isEmpty(contactInfoHistory.email)
        ? contactInfoHistory.email
        : filteredUser.email,
      animate: {
        phone: false,
        email: false
      },
      error: {
        phone: false,
        email: false
      }
    }
  }

  componentWillReceiveProps(nextProps) {
    const state = { phone: '', email: '', animate: {}, error: {} }
    if (
      !isEmpty(nextProps.userDetails) &&
      isEmpty(nextProps.contactInfo.email) &&
      isEmpty(nextProps.contactInfo.phone)
    ) {
      const filteredUser = this._filterUserDetails(nextProps.userDetails)
      this.props.setContactInfo(
        { phone: filteredUser.mobile, email: filteredUser.email },
        this.props.itineraryId
      )
    }
    if (
      !isEmpty(nextProps.contactInfo.email) ||
      !isEmpty(nextProps.contactInfo.phone)
    ) {
      const nextContactInfo = nextProps.contactInfo
      state.phone = nextContactInfo.phone
      state.email = nextContactInfo.email
    }
    if (
      JSON.stringify(this.props.validationState) !==
      JSON.stringify(nextProps.validationState)
    ) {
      state.animate = { ...nextProps.validationState.animate }
      state.error = { ...nextProps.validationState.error }
    }
    this.setState({ ...state })
  }

  _filterUserDetails = userDetails => {
    const filteredUser = {}
    if (!isEmpty(userDetails)) {
      filteredUser.email = userDetails.username || ''
      const phoneNumbers =
        path(['contact_data', 'phone_numbers'], userDetails) || null
      if (!isEmpty(phoneNumbers)) {
        phoneNumbers.forEach(contact => {
          if (contact.category === 'mobile') {
            filteredUser.mobile = contact.mobile_number || ''
          }
        })
      }
    }
    return filteredUser
  }

  _saveContactInfo = () => {
    this.props.setContactInfo(
      { phone: this.state.phone, email: this.state.email },
      this.props.itineraryId
    )
  }

  _handleInputChange = (value, name) => {
    this.setState({ [name]: value.trim() }, this._saveContactInfo)
  }

  _handleInputFocus = (element, name) => {
    element.scrollIntoView()
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  render() {
    return (
      <form>
        <SectionHeader>Contact Info</SectionHeader>
        <List>
          <Shake animate={this.state.animate.phone}>
            <Input
              type="tel"
              name="phone"
              label="Mobile"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              onChange={this._handleInputChange}
              value={this.state.phone}
              hasError={this.state.error.phone}
              onFocus={this._handleInputFocus}
              maxLength="20"
            />
          </Shake>
          <Shake animate={this.state.animate.email}>
            <Input
              type="email"
              name="email"
              label="Email"
              labelClassName="fs-15 c-black-90 flex-fix"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              inputClassName="fs-15 c-black-90"
              onChange={this._handleInputChange}
              value={this.state.email}
              hasError={this.state.error.email}
              onFocus={this._handleInputFocus}
              disabled={this.props.isLoggedIn}
            />
          </Shake>
        </List>
        <SectionHelper>Your ticket & PNR info would be sent here</SectionHelper>
      </form>
    )
  }
}

ContactInfo.propTypes = {
  contactInfo: PropTypes.objectOf(PropTypes.any),
  userDetails: PropTypes.objectOf(PropTypes.any),
  setContactInfo: PropTypes.func,
  isLoggedIn: PropTypes.bool,
  validationState: PropTypes.objectOf(PropTypes.any),
  itineraryId: PropTypes.string
}

ContactInfo.defaultProps = {
  contactInfo: {},
  userDetails: {},
  setContactInfo: () => {},
  isLoggedIn: false,
  validationState: {},
  itineraryId: ''
}

export default ContactInfo
