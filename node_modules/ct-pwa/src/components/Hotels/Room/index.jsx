/*eslint-disable*/
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { SectionHeader } from 'Lib/Text'
import { Counter, Count } from 'Lib/Counter'
import { List, ListItem } from 'Lib/List'
import { pluralize } from 'Utils'

import Select from 'Lib/Form/NativeSelect'

import ChildAge from 'components/Hotels/ChildAge'
import Close from 'Lib/Sheet/close.svg'

const MAX_PER_ROOM = 4

class Room extends Component {
  constructor(props) {
    super(props)
    this.state = {
      ...this.props.room
    }
  }

  shouldComponentUpdate = (nextProps, nextState) => {
    if (nextState !== this.state) {
      this.props.saveTravellersToSearchQuery(nextState, nextProps.roomNumber)
      return true
    }
    return false
  }

  childAgeArray = childrenCount => {
    let childAgeArray = []
    for (let i = 0; i < childrenCount; i++) {
      childAgeArray.push({ age: 1 })
    }

    return childAgeArray
  }

  handleTravellersChange = ({ adults: adultsCount, children: childrenCount }) => {
    if (adultsCount <= MAX_PER_ROOM && childrenCount < MAX_PER_ROOM) {
      this.setState({
        adults: {
          count: adultsCount,
          metadata: []
        },
        children: {
          count: childrenCount,
          metadata: this.childAgeArray(childrenCount)
        }
      })
    }
  }

  formChildAgeArray = (age, childAgeIndex) => {
    let childAgeArray = this.state.children.metadata
    const childrenCount = this.state.children.count

    childAgeArray[childAgeIndex].age = Number(age)

    return childAgeArray
  }

  handleChildAgeSelection = (age, name) => {
    const childAgeIndex = Number(name.split('-')[1])
    const childAgeArray = this.formChildAgeArray(age, childAgeIndex)
    this.setState(prevState => ({
      adults: prevState.adults,
      children: {
        count: prevState.children.count,
        metadata: childAgeArray
      }
    }))
  }

  handleRemoveRoom = () => {
    this.props.removeRoom(this.props.roomNumber)
  }

  render() {
    const { room } = this.props
    const { adults, children } = this.state
    const { metadata } = this.state.children
    const travellerGroup = { adults: adults.count, children: children.count }
    const totalValueGroup = Object.keys(travellerGroup).reduce(
      (sum, key) => sum + travellerGroup[key],
      0
    )
    const ageOptions = Array(11)
      .fill()
      .map((x, index) => {
        return (
          <option value={index + 1}>
            {index + 1} {pluralize(index + 1, 'year')}
          </option>
        )
      })

    return (
      <div>
        <If condition={this.props.roomNumber > 1}>
          <span
            role="button"
            className="Sheet__closeAction mt-25 mr-10"
            onClick={this.handleRemoveRoom}
          >
            {/* <Close width="12" height="12" fill="#000" /> */}
            <span className="c-blue fs-13 tt-u fw-500 c-black-50 ">Remove</span>
          </span>
        </If>
        <SectionHeader marginTop={10}>Room {this.props.roomNumber}</SectionHeader>

        <Counter
          value={{ adults: adults.count, children: children.count }}
          maxValue={MAX_PER_ROOM}
          onChange={this.handleTravellersChange}
          totalValue={totalValueGroup}
        >
          <Count id="adults" minValue={1}>
            {count => <p>{pluralize(count, 'Adult')} </p>}
          </Count>
          <Count id="children">
            {count => <p>{pluralize(count, 'Child', 'ren')} (1 - 12 yrs) </p>}
          </Count>
        </Counter>

        <List className="bt-0">
          {children.count > 0 &&
            Array(children.count)
              .fill()
              .map((x, index) => {
                return (
                  <Select
                    name={`age-${index}`}
                    label={`Child ${index + 1} age`}
                    labelClassName="fs-16 c-black-90 flex-fix c-black-90 c-black-90"
                    selectClassName="fs-16"
                    wrapper={ListItem}
                    onChange={this.handleChildAgeSelection}
                    wrapperClassName="h-48 flex flex-middle"
                    value={metadata[index] && metadata[index].age}
                  >
                    {ageOptions}
                  </Select>
                )
              })}
        </List>
      </div>
    )
  }
}

Room.propTypes = {
  saveToSearch: PropTypes.func,
  roomNumber: PropTypes.number
}

Room.defaultProps = {
  saveToSearch: () => {},
  roomNumber: 1
}

export default Room
