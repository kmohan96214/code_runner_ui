import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Summary } from 'Lib/Subheader'
import { isEmpty, path } from 'Utils'
import { formatHeaderDate, unmapQueryToSrpURL } from 'Utils/hotels'

class SummaryHeader extends PureComponent {
  state = {
    guests: 0
  }

  componentDidMount = () => {
    const guestCount = this.guestCount()
    this.setState({
      guests: guestCount
    })
  }

  _formatDate = date => {
    if (!isEmpty(date)) {
      return formatHeaderDate(
        `${date.substr(6, 4)}/${date.substr(3, 2)}/${date.substr(0, 2)}`, false
      )
    }
    return ''
  }

  adultCount = () => {
    let adultsCount = 0
    const { roomAllocations } = this.props.hotelSummary
    return roomAllocations.reduce((a, b) => {
      adultsCount += b.adults.count
      return adultsCount
    }, 0)
  }

  childrenCount = () => {
    let childrenCount = 0

    const { roomAllocations } = this.props.hotelSummary
    return roomAllocations.reduce((a, b) => {
      childrenCount += b.children.count
      return childrenCount
    }, 0)
  }

  guestCount = () => {
    const guests = Number(this.adultCount()) + Number(this.childrenCount())
    return guests
  }
  guestCountString = () => {
    const guests = this.guestCount() || 0;
    if (guests <= 1) {
      return `${guests} guest`
    }
    return `${guests} guests`
  }

  getTitle = (city, totalCount) => {
    const cityTitle = city ? city : '';
    const totalCountTitle = totalCount ? `(${totalCount} hotels)` : '';
    return `${cityTitle} ${totalCountTitle}`;
  }

  roomCountString = (roomAllocations) => {
    const rooms = roomAllocations.length || 0;
    if (rooms <= 1) {
      return `${rooms} room`
    }
    return `${rooms} rooms`
  }
  render() {
    const { totalCount, hotelSummary, backButtonClickedFromSRP } = this.props
    const { city, chkIn, chkOut, roomAllocations } = hotelSummary
    return (
      <div>
        <Summary
          title={this.getTitle(city, totalCount)}
          subtitle={
            `${this._formatDate(chkIn)} â€“ ${this._formatDate(chkOut)},
            ${this.guestCountString()} | ${this.roomCountString(roomAllocations)}`
          }
          backButtonClickedFromSRP={backButtonClickedFromSRP}
        />
      </div>
    )
  }
}

SummaryHeader.propTypes = {
  hotelSummary: PropTypes.objectOf(PropTypes.any)
}

SummaryHeader.defaultProps = {
  hotelSummary: {}
}

const mapStateToProps = ({ data, routing }) => {
  const queryFromUrl = path(['locationBeforeTransitions', 'query'], routing)
  const query = unmapQueryToSrpURL(queryFromUrl)
  const totalCount = path(['hotels', 'hotelResult', 'totalCount'], data)
  return {
    hotelSummary: query,
    totalCount
  }
}

export default connect(mapStateToProps)(SummaryHeader)
