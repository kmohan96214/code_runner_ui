import React, { Component, Fragment } from 'react'
import PropTypes from 'prop-types'
import format from 'date-fns/format'
import parse from 'date-fns/parse'

import { List, ListItem } from 'Lib/List'
import { isEmpty, getFormattedTime, isValidDate, pluralize } from 'Utils'
import TimeBlock from 'Components/Trains/ItineraryInfo/TimeBlock'
import Truncate from 'Lib/Text/Truncate'
import IFrame from 'Lib/IFrame'
import { HOTEL_BOOKING_POLICY_URL } from 'Constants/api/hotels'

class ItineraryBlockComponent extends Component {
  state = {
    showPolicyBenefits: false
  }

  _showPolicyBenifits = () => {
    this.setState({ showPolicyBenefits: true })
  }

  _hidePolicyBenefits = () => {
    this.setState({ showPolicyBenefits: false })
  }
  _createItineraryBlock = () => {
    const {
      itineraryInfo: {
        searchCriteria: { checkInDate, checkOutDate } = {},
        duration
      } = {}
    } =
      this.props || {}
    const { hotelData: { checkIn: checkInTime, checkOut: checkOutTime } = {} } =
      this.props || {}
    const checkInDateTimeStamp = parseInt(checkInDate, 10)
    const checkOutDateTimeStamp = parseInt(checkOutDate, 10)
    let chkInTime = !isEmpty(checkInTime)
      ? parse(checkInTime, 'HHmm', checkInDateTimeStamp)
      : ''
    let chkOutTime = !isEmpty(checkOutTime)
      ? parse(checkOutTime, 'HHmm', checkOutDateTimeStamp)
      : ''
    let chkInDay = ''
    let chkOutDay = ''
    let chkInMonth = ''
    let chkOutMonth = ''
    let chkInDate = format(checkInDateTimeStamp, 'ddd, D MMM')
    ;[chkInDay, chkInDate] = chkInDate.trim().split(',')
    chkInDate = chkInDate
      .split(' ')
      .reverse()
      .join(' ')
    ;[chkInMonth, chkInDate] = chkInDate.split(' ')
    let chkOutDate = format(checkOutDateTimeStamp, 'ddd, D MMM')
    ;[chkOutDay, chkOutDate] = chkOutDate.trim().split(',')
    ;[chkOutDate, chkOutMonth] = chkOutDate.trim().split(' ')
    chkInTime = isValidDate(chkInTime)
      ? `${chkInDay}, ${format(chkInTime, 'h A')}`
      : chkInDay
    chkOutTime = isValidDate(chkOutTime)
      ? `${chkOutDay}, ${format(chkOutTime, 'h A')}`
      : chkOutDay
    return (
      <Fragment>
        <ItineraryBlock
          key="check-in"
          className="ta-r flex-1"
          type="Check-in"
          date={chkInDate}
          month={chkInMonth.toUpperCase()}
          time={chkInTime}
        />
        <TimeBlock key="time-block" time={getFormattedTime(duration, true)} />
        <ItineraryBlock
          key="check-out"
          className="ta-l flex-1"
          type="Check-out"
          date={chkOutDate}
          month={chkOutMonth.toUpperCase()}
          time={chkOutTime}
        />
      </Fragment>
    )
  }
  render() {
    const { itineraryInfo: { roomType, adults, children, id } = {} } =
      this.props || {}
    const Itinerary = this._createItineraryBlock()
    const policyURL = HOTEL_BOOKING_POLICY_URL(id)
    const adultCount = pluralize(adults, `${adults} Adult`)
    const childCount =
      children > 0 ? `, ${pluralize(children, `${children} Child`, 'ren')}` : ''
    return (
      <List>
        <ListItem className="h-96 flex flex-center flex-middle">
          {Itinerary}
        </ListItem>

        <ListItem className="h-48 flex flex-middle flex-between">
          <p className="fs-15 c-black-90">Guests</p>
          <p className="fs-15 c-black-90">{`${adultCount}${childCount}`}</p>
        </ListItem>

        <ListItem className="h-48 flex flex-middle flex-between">
          <p className="fs-15 c-black-90">Booking Policy</p>
          <a onClick={this._showPolicyBenifits} className="c-blue fs-15">
            View Policy
          </a>
          <If condition={this.state.showPolicyBenefits}>
            <IFrame
              URL={policyURL}
              title="Policy Benefits"
              message="Loading policy benefits"
              isOpen={this.state.showPolicyBenefits}
              sheetTitle="Policy Benefits"
              onClose={this._hidePolicyBenefits}
            >
              Please{' '}
              <a href={policyURL} target="_blank" className="c-blue">
                click here
              </a>{' '}
              to see policy benefits
            </IFrame>
          </If>
        </ListItem>
      </List>
    )
  }
}

const ItineraryBlock = ({ className, type, date, month, time }) => {
  return (
    <div className={className}>
      <p className="fs-12 c-black-60 mb-5">{type}</p>
      <p className="fs-20 mb-5">
        <If condition={className.includes('ta-l')}>
          <span className="fw-600">{`${date} `}</span>
        </If>
        <span className="fw-300">{month}</span>
        <If condition={className.includes('ta-r')}>
          <span className="fw-600">{` ${date}`}</span>
        </If>
      </p>
      <p className="fs-12 c-black-60 mb-5">{time}</p>
    </div>
  )
}

ItineraryBlock.propTypes = {
  className: PropTypes.string,
  type: PropTypes.string,
  date: PropTypes.string,
  time: PropTypes.string,
  month: PropTypes.string
}

ItineraryBlock.defaultProps = {
  className: '',
  type: '',
  date: '',
  time: '',
  month: ''
}

export default ItineraryBlockComponent
