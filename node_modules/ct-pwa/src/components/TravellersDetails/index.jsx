import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'

import { List, ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'
import Select from 'Lib/Form/NativeSelect'
import { Shake } from 'Lib/Animate'
import Button from 'Lib/Buttons'
import Autocomplete from 'Lib/Autocomplete'
import { CodeBadge } from 'Lib/Badges'
import { Truncate } from 'Lib/Text'
import Label from 'Lib/Form/Label'
import { isEmpty, pad, getProductType, isValidDob } from 'Utils'

import COUNTRIES from 'Constants/countries'
import { browserHistory } from 'Utils/history'

const RippleListItem = <ListItem enableRipple={true} />

class TravellerDetailsComponent extends PureComponent {
  constructor(props) {
    super(props)
    const {
      title,
      firstName,
      middleName,
      lastName,
      dob,
      age,
      berth,
      meal,
      passport,
      visa,
      id,
      passportExpiryDate,
      passportIssueDate,
      nationality,
      residentIDCardNumber,
      residentIDCardExpiryDate,
      residentIDCardIssueDate,
      passportIssuingCountry,
      residentIdentityCardIssuingCountry,
      birthCountry
    } = this.props.travellerDetails
    this.state = {
      title: title || '',
      firstName: firstName || '',
      middleName: middleName || '',
      lastName: lastName || '',
      age: age ? parseInt(age, 10) : '',
      berth: berth || 'NC',
      meal: meal || '',
      dob: dob || '',
      passport: passport || '',
      visa: visa || '',
      id: id || '',
      passportExpiryDate: passportExpiryDate || '',
      passportIssueDate: passportIssueDate || '',
      nationality: nationality || '',
      residentIDCardNumber: residentIDCardNumber || '',
      residentIDCardExpiryDate: residentIDCardExpiryDate || '',
      residentIDCardIssueDate: residentIDCardIssueDate || '',
      passportIssuingCountry: passportIssuingCountry || {},
      residentIdentityCardIssuingCountry:
        residentIdentityCardIssuingCountry || {},
      birthCountry: birthCountry || {},
      countries: COUNTRIES,
      animate: {},
      error: {}
    }
  }

  componentWillReceiveProps(nextProps) {
    if (
      isEmpty(this.props.travellerDetails) &&
      !isEmpty(nextProps.travellerDetails)
    ) {
      this.setState({
        ...nextProps.travellerDetails
      })
    }
    if (
      JSON.stringify(this.props.validationState) !==
      JSON.stringify(nextProps.validationState)
    ) {
      this.setState({
        animate: { ...nextProps.validationState.animate },
        error: { ...nextProps.validationState.error }
      })
    }
  }

  _saveDetails = productType => {
    const {
      title,
      firstName,
      middleName,
      lastName,
      dob,
      age,
      meal,
      berth,
      passport,
      visa,
      id,
      passportExpiryDate,
      passportIssueDate,
      nationality,
      residentIDCardExpiryDate,
      residentIDCardIssueDate,
      residentIDCardNumber,
      passportIssuingCountry,
      residentIdentityCardIssuingCountry,
      birthCountry
    } = this.state
    if (productType !== 'Hotels') {
      const [type, index] = this.props.id.trim().split('-')
      const passengerData = {
        title,
        firstName,
        middleName,
        lastName,
        dob,
        age,
        meal,
        berth,
        passport,
        visa,
        id,
        passportExpiryDate,
        passportIssueDate,
        nationality,
        residentIDCardNumber,
        residentIDCardExpiryDate,
        residentIDCardIssueDate,
        passportIssuingCountry,
        residentIdentityCardIssuingCountry,
        birthCountry
      }
      this.props.setTravellersDetails(type, index, passengerData)
    } else {
      this.props.setTravellersDetails({ title, firstName, lastName })
    }
  }

  _handleInputChange = (value, name) => {
    const productType = getProductType()
    this.setState({ [name]: value.trim() })
    if (name === 'title' || name === 'visa') {
      if (this.state.error[name]) {
        this.setState(prevState => ({
          error: { ...prevState.error, [name]: !prevState.error[name] }
        }))
      }
    }
    if (productType === 'Hotels') {
      this.props.setTravellersDetails(
        { [name]: value.trim() },
        this.props.itineraryId
      )
    } else if (this.props.isSinglePax) {
      const [type, index] = this.props.id.trim().split('-')
      this.props.setTravellersDetails(type, index, {
        ...this.props.travellerDetails,
        [name]: value.trim()
      })
    }
    // if (this.props.isSinglePax || productType === "Hotels") {
    //   if (productType !== "Hotels") {
    //     const [type, index] = this.props.id.trim().split("-");
    //     this.props.setTravellersDetails(type, index,
    //       { ...this.props.travellerDetails, [name]: value.trim() });
    //   } else {
    //     this.props.setTravellersDetails({ [name]: value.trim() }, this.props.itineraryId);
    //   }
    // }
  }

  _handleInputFocus = (element, name) => {
    element.scrollIntoView()
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  /* eslint complexity: [ 0 ] */
  _validateTravellerData = event => {
    const productType = getProductType()
    const namePattern = /[a-zA-Z ]{1,}$/
    const passportPattern = /^[a-z0-9]+$/i
    const [type] = this.props.id.trim().split('-')
    const {
      title,
      firstName,
      lastName,
      dob,
      age: pAge,
      meal,
      passport,
      visa,
      passportExpiryDate,
      passportIssueDate,
      nationality,
      residentIDCardExpiryDate,
      residentIDCardIssueDate,
      residentIDCardNumber,
      passportIssuingCountry,
      residentIdentityCardIssuingCountry,
      birthCountry
    } = this.state
    const state = { animate: {}, error: {} }
    const firstNameLength = firstName.length
    const lastNameLength = lastName.length
    let isToastVisible = false
    const isValidAge = () => {
      if (
        (type === 'adults' && pAge >= 12 && pAge <= 125) ||
        (type === 'children' && pAge >= 5 && pAge <= 11) ||
        (type === 'srMen' && pAge >= 60 && pAge <= 125) ||
        (type === 'srWomen' && pAge >= 58 && pAge <= 125)
      ) {
        return true
      }
      return false
    }
    if (isEmpty(title)) {
      state.animate.title = true
      state.error.title = true
      if (!isToastVisible) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'Please select title'
        })
      }
    }
    if (
      isEmpty(firstName) ||
      !firstName.match(namePattern) ||
      this.props.minFirstNameLength > firstNameLength ||
      firstNameLength > this.props.maxFirstNameLength
    ) {
      state.animate.firstName = true
      state.error.firstName = true
      if (!isToastVisible) {
        if (isEmpty(firstName)) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'First name is required'
          })
        } else if (!firstName.match(namePattern)) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'First name can contain only alphabets'
          })
        } else if (firstNameLength > this.props.maxFirstNameLength) {
          isToastVisible = true
          this.props.handleValidationError({
            message: `First name cannot contain more than ${
              this.props.maxFirstNameLength
            } alphabets`
          })
        } else if (firstNameLength < this.props.minFirstNameLength) {
          isToastVisible = true
          this.props.handleValidationError({
            message: `First name should contain atleast ${
              this.props.minFirstNameLength
            } alphabet`
          })
        }
      }
    }
    if (
      isEmpty(lastName) ||
      !lastName.match(namePattern) ||
      this.props.minLastNameLength > lastNameLength ||
      lastNameLength > this.props.maxLastNameLength
    ) {
      state.animate.lastName = true
      state.error.lastName = true
      if (!isToastVisible) {
        if (isEmpty(lastName)) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Last name is required'
          })
        } else if (!lastName.match(namePattern)) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Last name can contain only alphabets'
          })
        } else if (lastNameLength > this.props.maxLastNameLength) {
          isToastVisible = true
          this.props.handleValidationError({
            message: `Last name cannot contain more than ${
              this.props.maxLastNameLength
            } alphabets`
          })
        } else if (lastNameLength < this.props.minLastNameLength) {
          isToastVisible = true
          this.props.handleValidationError({
            message: `Last name should contain atleast ${
              this.props.minLastNameLength
            } alphabet`
          })
        }
      }
    }
    if (productType === 'Trains') {
      if (isEmpty(pAge) || !isValidAge()) {
        state.animate.age = true
        state.error.age = true
        if (!isToastVisible && !isEmpty(pAge)) {
          this.props.handleValidationError({
            message: 'Please confirm your age'
          })
        }
      }
      if (!isEmpty(this.props.mealPrefList) && isEmpty(meal)) {
        state.animate.meal = true
        state.error.meal = true
      }
    }
    if (productType === 'Flights') {
      if (this.props.isDobRequired || type !== 'adults') {
        const isDobValid = isValidDob(type, dob)
        if (isEmpty(dob) || !isDobValid) {
          state.animate.dob = true
          state.error.dob = true
          if (isEmpty(dob) && !isToastVisible) {
            isToastVisible = true
            this.props.handleValidationError({
              message: 'Date of birth is required'
            })
          }
          if (!isEmpty(dob) && !isToastVisible) {
            isToastVisible = true
            this.props.handleValidationError({
              message: 'Please enter valid date of birth'
            })
          }
        }
      }
      if (
        this.props.isPassportRequired &&
        (isEmpty(passport) || !passportPattern.test(passport))
      ) {
        state.animate.passport = true
        state.error.passport = true
        if (isEmpty(passport) && !isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Passport number is required'
          })
        }
        if (!isEmpty(passport) && !isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Passport number cannot contain special characters'
          })
        }
      }
      if (
        this.props.isPassportExpiryDateRequired &&
        isEmpty(passportExpiryDate)
      ) {
        state.animate.passportExpiryDate = true
        state.error.passportExpiryDate = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select passport expiry date'
          })
        }
      }
      if (
        this.props.isPassportIssueDateRequired &&
        isEmpty(passportIssueDate)
      ) {
        state.animate.passportIssueDate = true
        state.error.passportIssueDate = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select passport issue date'
          })
        }
      }
      if (this.props.isVisaRequired && isEmpty(visa)) {
        state.animate.visa = true
        state.error.visa = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select visa'
          })
        }
      }
      if (this.props.isNationalityRequired && isEmpty(nationality)) {
        state.error.nationality = true
        state.animate.nationality = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select nationality'
          })
        }
      }
      if (
        this.props.isResidentIdentityCardNumberRequired &&
        isEmpty(residentIDCardNumber)
      ) {
        state.animate.residentIDCardNumber = true
        state.error.residentIDCardNumber = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select Resident IDCard Number'
          })
        }
      }
      if (
        this.props.isResidentIDCardIssueDateRequired &&
        isEmpty(residentIDCardIssueDate)
      ) {
        state.animate.residentIDCardIssueDate = true
        state.error.residentIDCardIssueDate = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select resident ID Card issue date'
          })
        }
      }
      if (
        this.props.isResidentIDCardExpiryDateRequired &&
        isEmpty(residentIDCardExpiryDate)
      ) {
        state.animate.residentIDCardExpiryDate = true
        state.error.residentIDCardExpiryDate = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select resident ID Card expiry date'
          })
        }
      }
      if (
        this.props.isPassportIssuingCountryRequired &&
        isEmpty(passportIssuingCountry)
      ) {
        state.animate.passportIssuingCountry = true
        state.error.passportIssuingCountry = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select passport issuing country'
          })
        }
      }
      if (
        this.props.isResidentIdentityCardIssuingCountryRequired &&
        isEmpty(residentIdentityCardIssuingCountry)
      ) {
        state.animate.residentIdentityCardIssuingCountry = true
        state.error.residentIdentityCardIssuingCountry = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select resident ID Card issuing country'
          })
        }
      }
      if (this.props.isBirthCountryRequired && isEmpty(birthCountry)) {
        state.animate.birthCountry = true
        state.error.birthCountry = true
        if (!isToastVisible) {
          isToastVisible = true
          this.props.handleValidationError({
            message: 'Please select birth country'
          })
        }
      }
    }
    if (!isEmpty(state.animate)) {
      this.setState({ ...state })
      setTimeout(() => {
        this.setState({
          animate: {
            title: false,
            firstName: false,
            lastName: false,
            passport: false,
            dob: false,
            age: false,
            berth: false,
            meal: false,
            visa: false,
            passportExpiryDate: false,
            passportIssueDate: false,
            nationality: false,
            residentIDCardNumber: false,
            residentIDCardExpiryDate: false,
            residentIDCardIssueDate: false,
            passportIssuingCountry: false,
            residentIdentityCardIssuingCountry: false,
            birthCountry: false
          }
        })
      }, 500)
    } else {
      this._saveDetails()
      browserHistory.goBack()
    }
  }

  _getTitleOptions = () => {
    const [travellerType] = this.props.id.trim().split('-')
    switch (travellerType) {
      case 'adults':
        return [{ value: 'Mr' }, { value: 'Ms' }, { value: 'Mrs' }]
      default:
        return [{ value: 'Mstr' }, { value: 'Miss' }]
    }
  }

  _getTrainTravellersTitleOptions = () => {
    const [travellerType] = this.props.id.trim().split('-')
    switch (travellerType) {
      case 'children':
        return [{ value: 'Mstr' }, { value: 'Miss' }]
      case 'srMen':
        return [{ value: 'Mr' }]
      case 'srWomen':
        return [{ value: 'Mrs' }, { value: 'Miss' }]
      default:
        return [{ value: 'Mrs' }, { value: 'Miss' }, { value: 'Mr' }]
    }
  }

  _getYearsList = () => {
    const [type] = this.props.id.trim().split('-')
    let yearList = []
    if (type === 'children') {
      yearList = this.props.childYearList
    } else if (type === 'infants') {
      yearList = this.props.infantYearList
    }
    return yearList
  }

  _getDobRange = () => {
    const dobYearList = this._getYearsList()
    let maxDobYear = Math.max.apply(null, dobYearList)
    let minDobYear = Math.min.apply(null, dobYearList)
    if (isEmpty(dobYearList)) {
      maxDobYear = new Date().getFullYear() - 12
      minDobYear = new Date().getFullYear() - 120
    }
    let maxDobMonth
    let minDobMonth
    let minDobDate
    let maxDobDate
    if (maxDobYear === new Date().getFullYear()) {
      maxDobMonth = pad(new Date().getMonth() + 1)
      minDobMonth = pad(new Date().getMonth() + 1)
      minDobDate = pad(new Date().getDate() + 1)
      maxDobDate = pad(new Date().getDate() - 1)
    } else {
      maxDobMonth = pad(12)
      minDobMonth = pad(1)
      minDobDate = pad(1)
      maxDobDate = pad(31)
    }
    return {
      maxDob: `${maxDobYear}-${maxDobMonth}-${maxDobDate}`,
      minDob: `${minDobYear}-${minDobMonth}-${minDobDate}`
    }
  }

  _getDateRange = yearList => {
    const maxYear = Math.max.apply(null, yearList)
    const minYear = Math.min.apply(null, yearList)
    return {
      max: `${maxYear}-12-31`,
      min: `${minYear}-01-01`
    }
  }

  _renderSearchListItem = item => (
    <ListItem
      className="h-48 flex flex-middle"
      key={item.isoCodeA2}
      enableRipple={true}
    >
      <CodeBadge label={item.isoCodeA2} className="mr-10" />{' '}
      <Truncate width={300} className="lh-copy fs-14">
        {item.countryName}
      </Truncate>
    </ListItem>
  )

  _handleCountrySelection = item => {
    const { isoCodeA2, countryName } = item
    const state = {}
    state[this.state.countryType] = { isoCodeA2, countryName }
    this.setState({
      value: '',
      showCountriesSheet: false,
      countryType: '',
      ...state,
      countries: COUNTRIES
    })
  }

  _showCountriesSheet = countryType => {
    this.setState(prevState => ({
      showCountriesSheet: !prevState.showCountriesSheet,
      ...countryType
    }))
  }

  _handlePassportIssuingCountry = () => {
    if (this.state.error.passportIssuingCountry) {
      this.setState(prevState => ({
        error: {
          ...prevState.error,
          passportIssuingCountry: !prevState.error.passportIssuingCountry
        }
      }))
    }
    this._showCountriesSheet({ countryType: 'passportIssuingCountry' })
  }

  _handleNationality = () => {
    if (this.state.error.nationality) {
      this.setState(prevState => ({
        error: {
          ...prevState.error,
          nationality: !prevState.error.nationality
        }
      }))
    }
    this._showCountriesSheet({ countryType: 'nationality' })
  }

  _handleBirthCountry = () => {
    if (this.state.error.birthCountry) {
      this.setState(prevState => ({
        error: {
          ...prevState.error,
          birthCountry: !prevState.error.birthCountry
        }
      }))
    }
    this._showCountriesSheet({ countryType: 'birthCountry' })
  }

  _handleResidentIdentityCardIssuingCountry = () => {
    if (this.state.error.residentIdentityCardIssuingCountry) {
      this.setState(prevState => ({
        error: {
          ...prevState.error,
          residentIdentityCardIssuingCountry: !prevState.error
            .residentIdentityCardIssuingCountry
        }
      }))
    }
    this._showCountriesSheet({
      countryType: 'residentIdentityCardIssuingCountry'
    })
  }

  _filterCountries = (value, inputName, event) => {
    const countries = COUNTRIES.filter(country => {
      const countryName = country.countryName.toLowerCase()
      return countryName.indexOf(value.toLowerCase()) !== -1
    })
    this.setState({ countries })
  }

  _hideSheet = () => {
    this.setState({
      value: '',
      showCountriesSheet: false,
      countryType: '',
      countries: COUNTRIES
    })
  }

  render() {
    const productType = getProductType()
    let type = ''
    let dobRange = {}
    let passportIssueDateRange = {}
    let passportExpiryDateRange = {}
    let residentIDCardIssueDateRange = {}
    let residentIDCardExpiryDateRange = {}
    let berthPrefOptions
    let mealPrefOptions
    let mealLabelClassName
    let titleOptions = this._getTitleOptions().map(title => {
      return <option value={title.value}>{title.value}</option>
    })
    const titleLabelClassName = classNames('fs-15 c-black-90 flex-fix', {
      'c-red': this.state.error.title,
      'c-black-90': !this.state.error.title
    })
    let visaLabelClassName = ''
    if (productType === 'Flights') {
      ;[type] = this.props.id.trim().split('-')
      dobRange = this._getDobRange()
      passportIssueDateRange = this.props.isPassportIssueDateRequired
        ? this._getDateRange(this.props.passportIssueYearList)
        : []
      passportExpiryDateRange = this.props.isPassportExpiryDateRequired
        ? this._getDateRange(this.props.passportExpiryYearList)
        : []
      residentIDCardIssueDateRange = this.props
        .isResidentIDCardIssueDateRequired
        ? this._getDateRange(this.props.residentIDCardIssueYearList)
        : []
      residentIDCardExpiryDateRange = this.props
        .isResidentIDCardExpiryDateRequired
        ? this._getDateRange(this.props.residentIDCardExpiryYearLIst)
        : []
      visaLabelClassName = classNames('fs-15 c-black-90 flex-fix', {
        'c-red': this.state.error.visa,
        'c-black-90': !this.state.error.visa
      })
    }
    if (productType === 'Trains') {
      titleOptions = this._getTrainTravellersTitleOptions().map(title => {
        return <option value={title.value}>{title.value}</option>
      })
      berthPrefOptions = this.props.berthPrefList.map(berthPref => {
        return (
          <option value={berthPref.preference_code}>
            {berthPref.preference_description}
          </option>
        )
      })
      mealPrefOptions = this.props.mealPrefList.map(mealPref => {
        return (
          <option value={mealPref.preference_code}>
            {mealPref.preference_description}
          </option>
        )
      })
      mealLabelClassName = classNames('fs-15 c-black-90 flex-fix', {
        'c-red': this.state.error.meal,
        'c-black-90': !this.state.error.meal
      })
    }
    return (
      <form>
        <Autocomplete
          isOpen={this.state.showCountriesSheet}
          title="Select Country"
          onClose={this._hideSheet}
          placeHolder="Select Country"
          value={this.state.value}
          onSelect={this._handleCountrySelection}
          renderItem={this._renderSearchListItem}
          data={this.state.countries}
          onChange={this._filterCountries}
        />
        <List className="mt-10">
          <Shake animate={this.state.animate.title}>
            <Select
              name="title"
              label="Title"
              autoComplete="honorific-prefix"
              selectClassName="fs-15"
              labelClassName={titleLabelClassName}
              wrapper={RippleListItem}
              wrapperClassName="h-48 flex flex-middle"
              onChange={this._handleInputChange}
              value={this.state.title}
              hasError={this.state.error.title}
            >
              <option value="">Select title</option>
              {titleOptions}
            </Select>
          </Shake>
          <Shake animate={this.state.animate.firstName}>
            <Input
              hasError={this.state.error.firstName}
              type="text"
              name="firstName"
              label="First name"
              autoComplete="given-name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={RippleListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.firstName}
              onChange={this._handleInputChange}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <If condition={this.props.isIntl}>
            <Input
              type="text"
              name="middleName"
              label="Middle name"
              autoComplete="additional-name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={RippleListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.middleName}
              onChange={this._handleInputChange}
              onFocus={this._handleInputFocus}
              placeHolder="optional"
            />
          </If>
          <Shake animate={this.state.animate.lastName}>
            <Input
              type="text"
              name="lastName"
              label="Last name"
              autoComplete="family-name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={RippleListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.lastName}
              onChange={this._handleInputChange}
              hasError={this.state.error.lastName}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <If condition={productType === 'Trains'}>
            <Shake animate={this.state.animate.age}>
              <Input
                type="number"
                name="age"
                label="Age"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90"
                wrapper={ListItem}
                wrapperClassName="h-48 flex flex-middle"
                value={this.state.age}
                onChange={this._handleInputChange}
                hasError={this.state.error.age}
                onFocus={this._handleInputFocus}
              />
            </Shake>
            <Select
              name="berth"
              label="Berth Preference"
              selectClassName="fs-15"
              labelClassName="fs-15 c-black-90 flex-fix"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              onChange={this._handleInputChange}
              value={this.state.berth}
            >
              {berthPrefOptions}
            </Select>
          </If>
          <If condition={!isEmpty(this.props.mealPrefList)}>
            <Shake animate={this.state.animate.meal}>
              <Select
                name="meal"
                label="Meal Preference"
                selectClassName="fs-15"
                labelClassName={mealLabelClassName}
                wrapper={ListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.meal}
                hasError={this.state.error.meal}
              >
                <option value="">Select Meal Preference</option>
                {mealPrefOptions}
              </Select>
            </Shake>
          </If>
          <If
            condition={
              this.props.isDobRequired ||
              (type !== 'adults' && productType === 'Flights')
            }
          >
            <Shake animate={this.state.animate.dob}>
              <Input
                type="date"
                name="dob"
                label="Date of birth"
                autoComplete="bday"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90 h-24"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                value={this.state.dob}
                onChange={this._handleInputChange}
                max={dobRange.maxDob}
                min={dobRange.minDob}
                hasError={this.state.error.dob}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isPassportRequired}>
            <Shake animate={this.state.animate.passport}>
              <Input
                type="text"
                name="passport"
                label="Passport No."
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                value={this.state.passport}
                onChange={this._handleInputChange}
                hasError={this.state.error.passport}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isPassportIssueDateRequired}>
            <Shake animate={this.state.animate.passportIssueDate}>
              <Input
                type="date"
                name="passportIssueDate"
                label="Passport issue date"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90 h-24"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.passportIssueDate}
                max={passportIssueDateRange.max}
                min={passportIssueDateRange.min}
                hasError={this.state.error.passportIssueDate}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isPassportExpiryDateRequired}>
            <Shake animate={this.state.animate.passportExpiryDate}>
              <Input
                type="date"
                name="passportExpiryDate"
                label="Passport expiry date"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90 h-24"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.passportExpiryDate}
                max={passportExpiryDateRange.max}
                min={passportExpiryDateRange.min}
                hasError={this.state.error.passportExpiryDate}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isPassportIssuingCountryRequired}>
            <Shake animate={this.state.animate.passportIssuingCountry}>
              <ListItem
                className="h-48 flex flex-middle flex-between"
                onClick={this._handlePassportIssuingCountry}
                hasError={this.state.error.passportIssuingCountry}
                enableRipple={true}
              >
                <Label
                  label="Passport issuing country"
                  className={classNames('fs-15 c-black-90 flex-fix', {
                    'c-red': this.state.error.passportIssuingCountry,
                    'c-black-90': !this.state.error.passportIssuingCountry
                  })}
                />
                <p className="input--text fs-15 c-black-90 h-24 has-value">
                  {this.state.passportIssuingCountry
                    ? this.state.passportIssuingCountry.countryName
                    : ''}
                </p>
              </ListItem>
            </Shake>
          </If>

          <If condition={this.props.isResidentIdentityCardNumberRequired}>
            <Shake animate={this.state.animate.residentIDCardNumber}>
              <Input
                type="text"
                name="residentIDCardNumber"
                label="Resident ID Card No"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                value={this.state.residentIDCardNumber}
                onChange={this._handleInputChange}
                hasError={this.state.error.residentIDCardNumber}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isResidentIDCardIssueDateRequired}>
            <Shake animate={this.state.animate.residentIDCardIssueDate}>
              <Input
                type="date"
                name="residentIDCardIssueDate"
                label="Resident ID card issue date"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90 h-24"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.residentIDCardIssueDate}
                max={residentIDCardIssueDateRange.max}
                min={residentIDCardIssueDateRange.min}
                hasError={this.state.error.residentIDCardIssueDate}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isResidentIDCardExpiryDateRequired}>
            <Shake animate={this.state.animate.residentIDCardExpiryDate}>
              <Input
                type="date"
                name="residentIDCardExpiryDate"
                label="Resident ID card expiry date"
                labelClassName="fs-15 c-black-90 flex-fix"
                inputClassName="fs-15 c-black-90 h-24"
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.residentIDCardExpiryDate}
                max={residentIDCardExpiryDateRange.max}
                min={residentIDCardExpiryDateRange.min}
                hasError={this.state.error.residentIDCardExpiryDate}
                onFocus={this._handleInputFocus}
              />
            </Shake>
          </If>
          <If condition={this.props.isVisaRequired}>
            <Shake animate={this.state.animate.visa}>
              <Select
                name="visa"
                label="Visa"
                selectClassName="fs-15"
                labelClassName={visaLabelClassName}
                wrapper={RippleListItem}
                wrapperClassName="h-48 flex flex-middle"
                onChange={this._handleInputChange}
                value={this.state.visa}
                hasError={this.state.error.visa}
              >
                <option value="">Visa type</option>
                <option value="Business">Business</option>
                <option value="Dependent">Dependent</option>
                <option value="Employment">Employment</option>
                <option value="Migrant">Migrant</option>
                <option value="Resident">Resident</option>
                <option value="Student">Student</option>
                <option value="Tourist">Tourist</option>
                <option value="Hajj">Hajj</option>
                <option value="Umrah">Umrah</option>
                <option value="Other">Other</option>
              </Select>
            </Shake>
          </If>
          <If condition={this.props.isNationalityRequired}>
            <Shake animate={this.state.animate.nationality}>
              <ListItem
                className="h-48 flex flex-middle flex-between"
                onClick={this._handleNationality}
                hasError={this.state.error.nationality}
                enableRipple={true}
              >
                <Label
                  label="Nationality"
                  className={classNames('fs-15 c-black-90', {
                    'c-red': this.state.error.nationality,
                    'c-black-90': !this.state.error.nationality
                  })}
                />
                <p className="fs-15 c-black-90">
                  {this.state.nationality
                    ? this.state.nationality.countryName
                    : ''}
                </p>
              </ListItem>
            </Shake>
          </If>
          <If condition={this.props.isBirthCountryRequired}>
            <Shake animate={this.state.animate.birthCountry}>
              <ListItem
                className="h-48 flex flex-middle flex-between"
                onClick={this._handleBirthCountry}
                hasError={this.state.error.birthCountry}
                enableRipple={true}
              >
                <Label
                  label="Birth country"
                  className={classNames('fs-15 c-black-90', {
                    'c-red': this.state.error.birthCountry,
                    'c-black-90': !this.state.error.birthCountry
                  })}
                />
                <p className="fs-15 c-black-90">
                  {this.state.birthCountry
                    ? this.state.birthCountry.countryName
                    : ''}
                </p>
              </ListItem>
            </Shake>
          </If>
          <If
            condition={this.props.isResidentIdentityCardIssuingCountryRequired}
          >
            <Shake
              animate={this.state.animate.residentIdentityCardIssuingCountry}
            >
              <ListItem
                className="h-48 flex flex-middle flex-between"
                onClick={this._handleResidentIdentityCardIssuingCountry}
                hasError={this.state.error.residentIdentityCardIssuingCountry}
                enableRipple={true}
              >
                <Label
                  label="Resident ID card issuing country"
                  className={classNames('fs-15 c-black-90', {
                    'c-red': this.state.error
                      .residentIdentityCardIssuingCountry,
                    'c-black-90': !this.state.error
                      .residentIdentityCardIssuingCountry
                  })}
                />
                <p className="fs-15 c-black-90">
                  {this.state.residentIdentityCardIssuingCountry
                    ? this.state.residentIdentityCardIssuingCountry.countryName
                    : ''}
                </p>
              </ListItem>
            </Shake>
          </If>
        </List>
        <If condition={this.props.showButton}>
          <div className="pl-16 pr-16 mt-20 mb-20 ta-c">
            <Button
              size="full"
              type="secondary"
              onClick={this._validateTravellerData}
            >
              Continue booking
            </Button>
          </div>
        </If>
      </form>
    )
  }
}

TravellerDetailsComponent.propTypes = {
  id: PropTypes.string.isRequired,
  travellerDetails: PropTypes.objectOf(PropTypes.any),
  setTravellersDetails: PropTypes.func.isRequired,
  childYearList: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  infantYearList: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  handleValidationError: PropTypes.func.isRequired,
  isDobRequired: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  isBirthCountryRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isPassportExpiryDateRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isPassportIssueDateRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isPassportIssuingCountryRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isPassportRequired: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  isVisaRequired: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  isNationalityRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  passportIssueYearList: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.array
  ]),
  passportExpiryYearList: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.array
  ]),
  isResidentIdentityCardNumberRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isResidentIdentityCardIssuingCountryRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isResidentIDCardExpiryDateRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  isResidentIDCardIssueDateRequired: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  residentIDCardExpiryYearLIst: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.array
  ]),
  residentIDCardIssueYearList: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.array
  ]),
  minFirstNameLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxFirstNameLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minLastNameLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxLastNameLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  showButton: PropTypes.bool,
  isSinglePax: PropTypes.bool,
  isIntl: PropTypes.bool,
  validationState: PropTypes.objectOf(PropTypes.any),
  itineraryId: PropTypes.string,
  berthPrefList: PropTypes.arrayOf(PropTypes.object),
  mealPrefList: PropTypes.arrayOf(PropTypes.object)
}

TravellerDetailsComponent.defaultProps = {
  travellerDetails: {
    berth: 'NC'
  },
  childYearList: '[]',
  infantYearList: '[]',
  isDobRequired: false,
  isBirthCountryRequired: false,
  isPassportExpiryDateRequired: false,
  isPassportIssueDateRequired: false,
  isPassportIssuingCountryRequired: false,
  isPassportRequired: false,
  isVisaRequired: false,
  isNationalityRequired: false,
  passportIssueYearList: [],
  passportExpiryYearList: [],
  isResidentIdentityCardNumberRequired: false,
  isResidentIdentityCardIssuingCountryRequired: false,
  isResidentIDCardExpiryDateRequired: false,
  isResidentIDCardIssueDateRequired: false,
  residentIDCardExpiryYearLIst: [],
  residentIDCardIssueYearList: [],
  minFirstNameLength: 1,
  maxFirstNameLength: 32,
  minLastNameLength: 1,
  maxLastNameLength: 32,
  showButton: true,
  isSinglePax: false,
  isIntl: false,
  validationState: {},
  itineraryId: '',
  berthPrefList: [],
  mealPrefList: []
}

export default TravellerDetailsComponent
