import React, { PureComponent } from 'react'
import { browserHistory } from 'Utils/history'
import PropTypes from 'prop-types'

import { List, ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'
import { Shake } from 'Lib/Animate'
import Button from 'Lib/Buttons'
import { vatValidator, isEmpty } from 'Utils'

import { SEARCH_PAGE } from 'Constants/global-paths'

class VatInfo extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      number: props.vat.number || '',
      name: props.vat.name || '',
      address: props.vat.address || '',
      animate: {
        number: false,
        name: false,
        address: false
      },
      validateError: {
        number: false,
        name: false,
        address: false
      },
      isToastVisible: false
    }
  }
  componentWillReceiveProps(nextProps) {
    this.setState({
      number: this.state.number || nextProps.vat.number || '',
      name: this.state.name || nextProps.vat.name || '',
      address: this.state.address || nextProps.vat.address || '',
      animate: {
        number: false,
        name: false,
        address: false
      },
      validateError: {
        number: false,
        name: false,
        address: false
      }
    })
    if (
      this.props.itineraryId === '' &&
      nextProps.vat.error &&
      nextProps.vat.error.length > 0
    ) {
      const searchPagePath = SEARCH_PAGE(this.props.type)
      browserHistory.push({
        pathname: searchPagePath
      })
    }
  }
  _inputValidation = (name, fieldName) => {
    let animate = false
    let error = false
    let result
    if (isEmpty(this.state[name])) {
      error = true
      animate = true
      if (!this.state.isToastVisible) {
        this.setState({ isToastVisible: true })
        this.props.handleValidationError({
          message: this.props.textIsRequired.replace('{fieldName}', fieldName)
        })
      }
    } else if (!isEmpty(this.state[name])) {
      if (name === 'number') {
        result = vatValidator(this.state[name], this.props.vatConfig.trn_regex)
        error = !result
        animate = !result
        if (!this.state.isToastVisible && !result) {
          this.setState({ isToastVisible: true })
          this.props.handleValidationError({
            message: this.props.textValidateTRN
          })
        }
      }
    }
    this.setState(prevState => ({
      validateError: { ...prevState.validateError, [name]: error },
      animate: { ...prevState.animate, [name]: animate }
    }))
    if (name === 'number') {
      return result
    }
    return !error
  }
  _handleInputChange = (value, name) => {
    this.setState({ [name]: value.trim() })
  }
  _handleInputFocus = (element, name) => {
    if (this.state.validateError[name]) {
      this.setState(prevState => ({
        validateError: {
          ...prevState.validateError,
          [name]: !prevState.validateError[name]
        }
      }))
    }
  }
  _isValidVat = () => {
    const { number, name, address } = this.state
    this.setState({ isToastVisible: false })
    let matched = this._inputValidation('number', this.props.textTRNLong)

    matched =
      matched && this._inputValidation('name', this.props.textCompanyName)

    // this._inputValidation('address', 'Address')
    const { animate } = this.state
    if (!isEmpty(animate)) {
      setTimeout(() => {
        this.setState({
          animate: {
            number: false,
            name: false,
            address: false
          }
        })
      }, 500)
    }
    if (matched && !animate.name && !animate.number && !animate.address) {
      this.setState({
        number,
        name,
        address,
        animate: {},
        validateError: {}
      })
      this.props.setTravellersVat(this.state)
    }
  }
  render() {
    const { number, name, address, validateError, animate } = this.state
    return (
      <form>
        <List className="mt-10">
          <Shake animate={animate.number}>
            <Input
              type="number"
              name="number"
              label={this.props.textTRN}
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={number}
              onChange={this._handleInputChange}
              hasError={validateError.number}
              onFocus={this._handleInputFocus}
              maxLength={15}
            />
          </Shake>
          <Shake animate={animate.name}>
            <Input
              type="text"
              name="name"
              label={this.props.textCompanyName}
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={name}
              onChange={this._handleInputChange}
              hasError={validateError.name}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={animate.address}>
            <Input
              type="text"
              name="address"
              label={this.props.textAddress}
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={address}
              onChange={this._handleInputChange}
              hasError={validateError.address}
              onFocus={this._handleInputFocus}
            />
          </Shake>
        </List>
        <div className="pl-16 pr-16 mt-20 mb-20 ta-c">
          <Button size="full" type="secondary" onClick={this._isValidVat}>
            {this.props.textContinueCooking}
          </Button>
        </div>
      </form>
    )
  }
}
VatInfo.propTypes = {
  setTravellersVat: PropTypes.func,
  vat: PropTypes.shape({
    number: PropTypes.string,
    name: PropTypes.string,
    address: PropTypes.string,
    error: PropTypes.string
  }),
  itineraryId: PropTypes.string,
  type: PropTypes.string,
  handleValidationError: PropTypes.func,
  textContinueCooking: PropTypes.string,
  textCompanyName: PropTypes.string,
  textAddress: PropTypes.string,
  textValidateTRN: PropTypes.string,
  textTRN: PropTypes.string,
  textTRNLong: PropTypes.string,
  textIsRequired: PropTypes.string
}
VatInfo.defaultProps = {
  vat: {
    number: '',
    name: '',
    address: '',
    error: ''
  },
  itineraryId: '',
  setTravellersVat: () => {},
  type: 'trains',
  handleValidationError: () => {},
  textContinueCooking: 'Continue booking',
  textCompanyName: 'Company Name',
  textAddress: 'Address',
  textValidateTRN: 'Please enter valid Tax Registration Number(TRN)',
  textTRN: 'TRN',
  textTRNLong: 'Tax Registration Number(TRN)',
  textIsRequired: '{fieldName} is required'
}
export default VatInfo
