import React, { PureComponent } from 'react'
import { browserHistory } from 'Utils/history'
import PropTypes from 'prop-types'
import classNames from 'classnames'

import { isEmpty, isValidEmail } from 'Utils'

import Input from 'Lib/Form/Input'
import Select from 'Lib/Form/NativeSelect'
import { Shake } from 'Lib/Animate'
import Button from 'Lib/Buttons'
import { SectionHeader } from 'Lib/Text'
import { List, ListItem } from 'Lib/List'

import { CT_USER_LOGIN } from 'Constants/global-paths'

class RegisterComponent extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      title: '',
      firstName: '',
      lastName: '',
      mobile: '',
      email: '',
      password: '',
      animate: {
        title: false,
        firstName: false,
        lastName: false,
        mobile: false,
        email: false,
        password: false
      },
      error: {
        title: false,
        firstName: false,
        lastName: false,
        mobile: false,
        email: false,
        password: false
      }
    }
  }

  _handleInputChange = (value, name) => {
    this.setState({ [name]: value })
    if (name === 'title') {
      if (this.state.error[name]) {
        this.setState(prevState => ({
          error: { ...prevState.error, [name]: !prevState.error[name] }
        }))
      }
    }
  }

  _handleInputFocus = (element, name) => {
    if (this.state.error[name]) {
      this.setState(prevState => ({
        error: { ...prevState.error, [name]: !prevState.error[name] }
      }))
    }
  }

  /* eslint complexity: [ 0 ] */
  _validateUserData = event => {
    const namePattern = /^([a-zA-Z]){1,}$/
    const { title, firstName, lastName, mobile, email, password } = this.state
    const state = { animate: {}, error: {} }
    const isValid = (string, pattern) => {
      return string.match(pattern)
    }
    let isToastVisible = false
    if (isEmpty(title)) {
      state.animate.title = true
      state.error.title = true
    }
    if (!isValid(firstName, namePattern)) {
      state.animate.firstName = true
      state.error.firstName = true
      if (!isToastVisible && !isEmpty(firstName)) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'First Name can contain only alphabets'
        })
      }
    }
    if (!isValid(lastName, namePattern)) {
      state.animate.lastName = true
      state.error.lastName = true
      if (!isToastVisible && !isEmpty(lastName)) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'Last Name can contain only alphabets'
        })
      }
    }
    if (!isValidEmail(email)) {
      state.animate.email = true
      state.error.email = true
      if (!isToastVisible && !isEmpty(email)) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'The email format is incorrect'
        })
      }
    }
    if (!isValid(mobile, /^\d{10}$/)) {
      state.animate.mobile = true
      state.error.mobile = true
      if (!isToastVisible && !isEmpty(mobile)) {
        isToastVisible = true
        this.props.handleValidationError({
          message: 'Mobile number is invalid'
        })
      }
    }
    if (!isValid(password, /^.{6,24}$/)) {
      state.animate.password = true
      state.error.password = true
      if (!isToastVisible && !isEmpty(password)) {
        this.props.handleValidationError({
          message:
            'Password length cannot be less than 6 characters and more than 24 characters'
        })
      }
    }
    if (!isEmpty(state.animate)) {
      this.setState({ ...state })
      setTimeout(() => {
        this.setState({
          animate: {
            title: false,
            firstName: false,
            lastName: false,
            mobile: false,
            email: false,
            password: false
          }
        })
      }, 500)
    } else {
      this.props.handleUserRegistration(this.state)
    }
  }

  _handleLoginClick = () => {
    browserHistory.replace({
      pathname: CT_USER_LOGIN
    })
  }

  render() {
    const titleLabelClassName = classNames('fs-15 c-black-90 flex-fix', {
      'c-red': this.state.error.title,
      'c-black-90': !this.state.error.title
    })
    return (
      <form>
        <SectionHeader>Create Profile</SectionHeader>
        <List className="mt-10">
          <Shake animate={this.state.animate.title}>
            <Select
              name="title"
              label="Title"
              selectClassName="fs-15"
              labelClassName={titleLabelClassName}
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              onChange={this._handleInputChange}
              value={this.state.title}
              hasError={this.state.error.title}
            >
              <option value="">Select title</option>
              <option value="Mr">Mr</option>
              <option value="Mrs">Mrs</option>
              <option value="Ms">Ms</option>
            </Select>
          </Shake>
          <Shake animate={this.state.animate.firstName}>
            <Input
              hasError={this.state.error.firstName}
              type="text"
              name="firstName"
              label="First Name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.firstName}
              onChange={this._handleInputChange}
              autoFocus={true}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={this.state.animate.lastName}>
            <Input
              type="text"
              name="lastName"
              label="Last Name"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.lastName}
              onChange={this._handleInputChange}
              hasError={this.state.error.lastName}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={this.state.animate.email}>
            <Input
              hasError={this.state.error.email}
              type="email"
              name="email"
              label="Email"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.email}
              onChange={this._handleInputChange}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={this.state.animate.mobile}>
            <Input
              type="tel"
              name="mobile"
              label="Mobile"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.mobile}
              onChange={this._handleInputChange}
              hasError={this.state.error.mobile}
              onFocus={this._handleInputFocus}
              maxlength="10"
            />
          </Shake>
          <Shake animate={this.state.animate.password}>
            <Input
              hasError={this.state.error.password}
              type="password"
              autoComplete="off"
              name="password"
              label="Password"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={this.state.password}
              onChange={this._handleInputChange}
              onFocus={this._handleInputFocus}
            />
          </Shake>
        </List>

        <div className="pl-16 pr-16 mt-20 ta-c">
          <Button size="full" type="secondary" onClick={this._validateUserData}>
            Register
          </Button>
        </div>

        <p className="ta-c mt-20 fs-14">
          Have a Cleartrip account?{' '}
          <a className="c-blue" onClick={this._handleLoginClick}>
            Log in here
          </a>
        </p>
      </form>
    )
  }
}

RegisterComponent.propTypes = {
  handleUserRegistration: PropTypes.func.isRequired,
  handleValidationError: PropTypes.func.isRequired
}

export default RegisterComponent
