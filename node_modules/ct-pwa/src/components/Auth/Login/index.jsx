import React, { PureComponent } from 'react'
import { browserHistory } from 'Utils/history'

import PropTypes from 'prop-types'
import { List, ListItem } from 'Lib/List'
import Input from 'Lib/Form/Input'
import { Shake } from 'Lib/Animate'
import Button from 'Lib/Buttons'
import { isEmpty, isValidEmail } from 'Utils'

import { CT_USER_REGISTER } from 'Constants/global-paths'

class Login extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      id: '',
      password: '',
      animate: {
        id: false,
        password: false
      },
      validateError: {
        id: false,
        password: false
      }
    }
  }

  _inputValidation = name => {
    let animate = false
    let error = false
    if (isEmpty(this.state[name])) {
      error = true
      animate = true
    }
    if (name === 'id' && !isValidEmail(this.state[name])) {
      error = true
      animate = true
      if (!isEmpty(this.state.id)) {
        this.props.handleValidationError({
          message: 'The email format is incorrect'
        })
      }
    }
    this.setState(prevState => ({
      validateError: { ...prevState.validateError, [name]: error },
      animate: { ...prevState.animate, [name]: animate }
    }))
  }

  _handleInputFocus = (element, name) => {
    if (this.state.validateError[name]) {
      this.setState(prevState => ({
        validateError: {
          ...prevState.validateError,
          [name]: !prevState.validateError[name]
        }
      }))
    }
  }

  _handleInputChange = (value, name) => {
    this.setState({ [name]: value })
  }

  _checkLogin = () => {
    const { id, password } = this.state
    this._inputValidation('id')
    this._inputValidation('password')
    const { animate } = this.state
    if (!isEmpty(animate)) {
      setTimeout(() => {
        this.setState({
          animate: {
            id: false,
            password: false
          },
          validateError: {
            id: false,
            password: false
          }
        })
      }, 500)
    }
    if (!animate.id && !animate.password) {
      this.setState({
        id,
        password,
        animate: {},
        validateError: {}
      })
      this.props.checkLogin(this.state)
    }
  }

  _handleRegister = () => {
    browserHistory.replace({
      pathname: CT_USER_REGISTER
    })
  }

  render() {
    const { id, password, validateError, animate } = this.state
    return (
      <form>
        <List className="mt-10">
          <Shake animate={animate.id}>
            <Input
              type="email"
              name="id"
              label="Email"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={id}
              onChange={this._handleInputChange}
              hasError={validateError.id}
              onFocus={this._handleInputFocus}
            />
          </Shake>
          <Shake animate={animate.password}>
            <Input
              type="password"
              autoComplete="off"
              name="password"
              label="Password"
              labelClassName="fs-15 c-black-90 flex-fix"
              inputClassName="fs-15 c-black-90"
              wrapper={ListItem}
              wrapperClassName="h-48 flex flex-middle"
              value={password}
              onChange={this._handleInputChange}
              hasError={validateError.password}
              onFocus={this._handleInputFocus}
            />
          </Shake>
        </List>
        <div className="pl-16 pr-16 mt-20 mb-20">
          <Button size="full" type="secondary" onClick={this._checkLogin}>
            Login
          </Button>
        </div>
        <p className="ta-c mt-15 fs-14">
          New to Cleartrip?{' '}
          <a className="c-blue" onClick={this._handleRegister}>
            Register Here
          </a>
        </p>
      </form>
    )
  }
}

Login.propTypes = {
  checkLogin: PropTypes.func.isRequired,
  handleValidationError: PropTypes.func.isRequired
}

export default Login
